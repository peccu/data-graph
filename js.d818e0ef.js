// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"node_modules/vue/dist/vue.runtime.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*!
 * Vue.js v2.5.21
 * (c) 2014-2018 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : typeof val === 'object' ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = /[^\w.$]/;

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = '__proto__' in {}; // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge; // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set =
  /*@__PURE__*/
  function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if ("development" !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm || {};
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ("development" !== 'production' && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ("development" !== 'production' && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ("development" !== 'production' && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if ("development" !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    "development" !== 'production' && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if ("development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!/^[a-zA-Z][\w-]*$/.test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if ("development" !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if ("development" !== 'production') {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];

      if (typeof def === 'function') {
        dirs[key] = {
          bind: def,
          update: def
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if ("development" !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ("development" !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if ("development" !== 'production' && // skip validation for weex recycle-list child component props
  !false) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ("development" !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  if (vm) {
    var cur = vm;

    while (cur = cur.$parent) {
      var hooks = cur.$options.errorCaptured;

      if (hooks) {
        for (var i = 0; i < hooks.length; i++) {
          try {
            var capture = hooks[i].call(cur, err, vm, info) === false;

            if (capture) {
              return;
            }
          } catch (e) {
            globalHandleError(e, cur, 'errorCaptured hook');
          }
        }
      }
    }
  }

  globalHandleError(err, vm, info);
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      logError(e, null, 'config.errorHandler');
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if ("development" !== 'production') {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using both microtasks and (macro) tasks.
// In < 2.4 we used microtasks everywhere, but there are some scenarios where
// microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690) or even between bubbling of the same
// event (#6566). However, using (macro) tasks everywhere also has subtle problems
// when state is changed right before repaint (e.g. #6813, out-in transitions).
// Here we use microtask by default, but expose a way to force (macro) task when
// needed (e.g. in event handlers attached by v-on).


var microTimerFunc;
var macroTimerFunc;
var useMacroTask = false; // Determine (macro) task defer implementation.
// Technically setImmediate should be the ideal choice, but it's only available
// in IE. The only polyfill that consistently queues the callback after all DOM
// events triggered in the same loop is by using MessageChannel.

/* istanbul ignore if */

if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  macroTimerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else if (typeof MessageChannel !== 'undefined' && (isNative(MessageChannel) || // PhantomJS
MessageChannel.toString() === '[object MessageChannelConstructor]')) {
  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = flushCallbacks;

  macroTimerFunc = function () {
    port.postMessage(1);
  };
} else {
  /* istanbul ignore next */
  macroTimerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
} // Determine microtask defer implementation.

/* istanbul ignore next, $flow-disable-line */


if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  microTimerFunc = function () {
    p.then(flushCallbacks); // in problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };
} else {
  // fallback to macro
  microTimerFunc = macroTimerFunc;
}
/**
 * Wrap a function so that if any code inside triggers state change,
 * the changes are queued using a (macro) task instead of a microtask.
 */


function withMacroTask(fn) {
  return fn._withTask || (fn._withTask = function () {
    useMacroTask = true;

    try {
      return fn.apply(null, arguments);
    } finally {
      useMacroTask = false;
    }
  });
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;

    if (useMacroTask) {
      macroTimerFunc();
    } else {
      microTimerFunc();
    }
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if ("development" !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if ("development" !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if ("development" !== 'production') {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }

      if (renderCompleted) {
        contexts.length = 0;
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      }
    });
    var reject = once(function (reason) {
      "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject("development" !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$off(event[i], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    }

    if (fn) {
      // specific handler
      var cb;
      var i$1 = cbs.length;

      while (i$1--) {
        cb = cbs[i$1];

        if (cb === fn || cb.fn === fn) {
          cbs.splice(i$1, 1);
          break;
        }
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if ("development" !== 'production') {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);

      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }

    return vm;
  };
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  var slots = {};

  if (!children) {
    return slots;
  }

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};

  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }

  return res;
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if ("development" !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if ("development" !== 'production') {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren


  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if ("development" !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if ("development" !== 'production') {
    circular = {};
  }

  waiting = flushing = false;
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ("development" !== 'production' && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$1 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$1; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = "development" !== 'production' ? expOrFn.toString() : ''; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
      "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if ("development" !== 'production') {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if ("development" !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
      "development" !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ("development" !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if ("development" !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ("development" !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if ("development" !== 'production') {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if ("development" !== 'production') {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if ("development" !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject).filter(function (key) {
      /* istanbul ignore next */
      return Object.getOwnPropertyDescriptor(inject, key).enumerable;
    }) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if ("development" !== 'production') {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);

    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ("development" !== 'production' && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);

        if (!(key in hash) && !(camelizedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + camelizedKey] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      "development" !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    return resolveSlots(children, parent);
  }; // support for compiled functional template


  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = data.scopedSlots || emptyObject;
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if ("development" !== 'production') {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if ("development" !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ("development" !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if ("development" !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);
  }
}

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = _parentVnode.data.scopedSlots || emptyObject;
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ("development" !== 'production' && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if ("development" !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    } // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }

  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];

    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }

    return res;
  } else {
    return latest;
  }
}

function Vue(options) {
  if ("development" !== 'production' && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ("development" !== 'production' && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ("development" !== 'production' && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if ("development" !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;
  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.5.21';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
      "development" !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps =
/*#__PURE__*/
Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if ("development" !== 'production') {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if ("development" !== 'production') {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if ("development" !== 'production') {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if ("development" !== 'production') {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if ("development" !== 'production') {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ("development" !== 'production' && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if ("development" !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && (el.tagName === 'TEXTAREA' || el.tagName === 'INPUT') && key === 'placeholder' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}

function add$1(event, handler, capture, passive) {
  handler = withMacroTask(handler);
  target$1.addEventListener(event, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(event, handler, capture, _target) {
  (_target || target$1).removeEventListener(event, handler._withTask || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.lazy) {
      // inputs with lazy should only be updated when not in focus
      return false;
    }

    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ("development" !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if ("development" !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if ("development" !== 'production' && "development" !== 'test' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ("development" !== 'production' && "development" !== 'test' && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


var _default = Vue;
exports.default = _default;
},{}],"node_modules/vue-functional-data-merge/dist/lib.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeData = mergeData;

var __assign = function () {
  return (__assign = Object.assign || function (e) {
    for (var a, s = 1, t = arguments.length; s < t; s++) for (var r in a = arguments[s]) Object.prototype.hasOwnProperty.call(a, r) && (e[r] = a[r]);

    return e;
  }).apply(this, arguments);
};

function mergeData() {
  for (var e, a, s = {}, t = arguments.length; t--;) for (var r = 0, c = Object.keys(arguments[t]); r < c.length; r++) switch (e = c[r]) {
    case "class":
    case "style":
    case "directives":
      Array.isArray(s[e]) || (s[e] = []), s[e] = s[e].concat(arguments[t][e]);
      break;

    case "staticClass":
      if (!arguments[t][e]) break;
      void 0 === s[e] && (s[e] = ""), s[e] && (s[e] += " "), s[e] += arguments[t][e].trim();
      break;

    case "on":
    case "nativeOn":
      s[e] || (s[e] = {});

      for (var n = 0, o = Object.keys(arguments[t][e] || {}); n < o.length; n++) a = o[n], s[e][a] ? s[e][a] = [].concat(s[e][a], arguments[t][e][a]) : s[e][a] = arguments[t][e][a];

      break;

    case "attrs":
    case "props":
    case "domProps":
    case "scopedSlots":
    case "staticStyle":
    case "hook":
    case "transition":
      s[e] || (s[e] = {}), s[e] = __assign({}, arguments[t][e], s[e]);
      break;

    case "slot":
    case "key":
    case "ref":
    case "tag":
    case "show":
    case "keepAlive":
    default:
      s[e] || (s[e] = arguments[t][e]);
  }

  return s;
}
},{}],"node_modules/bootstrap-vue/es/components/button/button-close.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  disabled: {
    type: Boolean,
    default: false
  },
  ariaLabel: {
    type: String,
    default: 'Close'
  },
  textVariant: {
    type: String,
    default: null
  }
};
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        listeners = _ref.listeners,
        slots = _ref.slots;
    var componentData = {
      staticClass: 'close',
      class: _defineProperty({}, 'text-' + props.textVariant, props.textVariant),
      attrs: {
        type: 'button',
        disabled: props.disabled,
        'aria-label': props.ariaLabel ? String(props.ariaLabel) : null
      },
      on: {
        click: function click(e) {
          // Ensure click on button HTML content is also disabled
          if (props.disabled && e instanceof Event) {
            e.stopPropagation();
            e.preventDefault();
          }
        } // Careful not to override the slot with innerHTML

      }
    };

    if (!slots().default) {
      componentData.domProps = {
        innerHTML: '&times;'
      };
    }

    return h('button', (0, _vueFunctionalDataMerge.mergeData)(data, componentData), slots().default);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"node_modules/bootstrap-vue/es/components/alert/alert.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/bootstrap-vue/es/components/alert/alert.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buttonClose = _interopRequireDefault(require("../button/button-close"));

require("./alert.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  components: {
    bButtonClose: _buttonClose.default
  },
  render: function render(h) {
    if (!this.localShow) {
      // If not showing, render placeholder
      return h(false);
    }

    var dismissBtn = h(false);

    if (this.dismissible) {
      // Add dismiss button
      dismissBtn = h('b-button-close', {
        attrs: {
          'aria-label': this.dismissLabel
        },
        on: {
          click: this.dismiss
        }
      }, [this.$slots.dismiss]);
    }

    var alert = h('div', {
      class: this.classObject,
      attrs: {
        role: 'alert',
        'aria-live': 'polite',
        'aria-atomic': true
      }
    }, [dismissBtn, this.$slots.default]);
    return !this.fade ? alert : h('transition', {
      props: {
        name: 'fade',
        appear: true
      }
    }, [alert]);
  },
  model: {
    prop: 'show',
    event: 'input'
  },
  data: function data() {
    return {
      countDownTimerId: null,
      dismissed: false
    };
  },
  computed: {
    classObject: function classObject() {
      return ['alert', this.alertVariant, this.dismissible ? 'alert-dismissible' : ''];
    },
    alertVariant: function alertVariant() {
      var variant = this.variant;
      return 'alert-' + variant;
    },
    localShow: function localShow() {
      return !this.dismissed && (this.countDownTimerId || this.show);
    }
  },
  props: {
    variant: {
      type: String,
      default: 'info'
    },
    dismissible: {
      type: Boolean,
      default: false
    },
    dismissLabel: {
      type: String,
      default: 'Close'
    },
    show: {
      type: [Boolean, Number],
      default: false
    },
    fade: {
      type: Boolean,
      default: false
    }
  },
  watch: {
    show: function show() {
      this.showChanged();
    }
  },
  mounted: function mounted() {
    this.showChanged();
  },
  destroyed
  /* istanbul ignore next */
  : function destroyed() {
    this.clearCounter();
  },
  methods: {
    dismiss: function dismiss() {
      this.clearCounter();
      this.dismissed = true;
      this.$emit('dismissed');
      this.$emit('input', false);

      if (typeof this.show === 'number') {
        this.$emit('dismiss-count-down', 0);
        this.$emit('input', 0);
      } else {
        this.$emit('input', false);
      }
    },
    clearCounter: function clearCounter() {
      if (this.countDownTimerId) {
        clearInterval(this.countDownTimerId);
        this.countDownTimerId = null;
      }
    },
    showChanged: function showChanged() {
      var _this = this; // Reset counter status


      this.clearCounter(); // Reset dismiss status

      this.dismissed = false; // No timer for boolean values

      if (this.show === true || this.show === false || this.show === null || this.show === 0) {
        return;
      } // Start counter


      var dismissCountDown = this.show;
      this.countDownTimerId = setInterval(function () {
        if (dismissCountDown < 1) {
          _this.dismiss();

          return;
        }

        dismissCountDown--;

        _this.$emit('dismiss-count-down', dismissCountDown);

        _this.$emit('input', dismissCountDown);
      }, 1000);
    }
  }
};
exports.default = _default;
},{"../button/button-close":"node_modules/bootstrap-vue/es/components/button/button-close.js","./alert.css":"node_modules/bootstrap-vue/es/components/alert/alert.css"}],"node_modules/bootstrap-vue/es/utils/plugins.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerComponent = registerComponent;
exports.registerComponents = registerComponents;
exports.registerDirective = registerDirective;
exports.registerDirectives = registerDirectives;
exports.vueUse = vueUse;

/**
 * Register a component plugin as being loaded. returns true if compoent plugin already registered
 * @param {object} Vue
 * @param {string} Component name
 * @param {object} Component definition
 */
function registerComponent(Vue, name, def) {
  Vue._bootstrap_vue_components_ = Vue._bootstrap_vue_components_ || {};
  var loaded = Vue._bootstrap_vue_components_[name];

  if (!loaded && def && name) {
    Vue._bootstrap_vue_components_[name] = true;
    Vue.component(name, def);
  }

  return loaded;
}
/**
 * Register a group of components as being loaded.
 * @param {object} Vue
 * @param {object} Object of component definitions
 */


function registerComponents(Vue, components) {
  for (var component in components) {
    registerComponent(Vue, component, components[component]);
  }
}
/**
 * Register a directive as being loaded. returns true if directive plugin already registered
 * @param {object} Vue
 * @param {string} Directive name
 * @param {object} Directive definition
 */


function registerDirective(Vue, name, def) {
  Vue._bootstrap_vue_directives_ = Vue._bootstrap_vue_directives_ || {};
  var loaded = Vue._bootstrap_vue_directives_[name];

  if (!loaded && def && name) {
    Vue._bootstrap_vue_directives_[name] = true;
    Vue.directive(name, def);
  }

  return loaded;
}
/**
 * Register a group of directives as being loaded.
 * @param {object} Vue
 * @param {object} Object of directive definitions
 */


function registerDirectives(Vue, directives) {
  for (var directive in directives) {
    registerDirective(Vue, directive, directives[directive]);
  }
}
/**
 * Install plugin if window.Vue available
 * @param {object} Plugin definition
 */


function vueUse(VuePlugin) {
  if (typeof window !== 'undefined' && window.Vue) {
    window.Vue.use(VuePlugin);
  }
}
},{}],"node_modules/bootstrap-vue/es/components/alert/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _alert = _interopRequireDefault(require("./alert"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bAlert: _alert.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./alert":"node_modules/bootstrap-vue/es/components/alert/alert.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/object.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readonlyDescriptor = readonlyDescriptor;
exports.is = exports.isFrozen = exports.create = exports.getPrototypeOf = exports.getOwnPropertySymbols = exports.getOwnPropertyDescriptor = exports.freeze = exports.defineProperty = exports.defineProperties = exports.keys = exports.getOwnPropertyNames = exports.assign = void 0;

/**
 * Aliasing Object[method] allows the minifier to shorten methods to a single character variable,
 * as well as giving BV a chance to inject polyfills.
 * As long as we avoid
 * - import * as Object from "utils/object"
 * all unused exports should be removed by tree-shaking.
 */
// @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
if (typeof Object.assign !== 'function') {
  Object.assign = function (target, varArgs) {
    // .length of function is 2
    if (target == null) {
      // TypeError if undefined or null
      throw new TypeError('Cannot convert undefined or null to object');
    }

    var to = Object(target);

    for (var index = 1; index < arguments.length; index++) {
      var nextSource = arguments[index];

      if (nextSource != null) {
        // Skip over if undefined or null
        for (var nextKey in nextSource) {
          // Avoid bugs when hasOwnProperty is shadowed
          if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }

    return to;
  };
} // @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is#Polyfill


if (!Object.is) {
  Object.is = function (x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      // eslint-disable-next-line no-self-compare
      return x !== x && y !== y;
    }
  };
}

var assign = Object.assign;
exports.assign = assign;
var getOwnPropertyNames = Object.getOwnPropertyNames;
exports.getOwnPropertyNames = getOwnPropertyNames;
var keys = Object.keys;
exports.keys = keys;
var defineProperties = Object.defineProperties;
exports.defineProperties = defineProperties;
var defineProperty = Object.defineProperty;
exports.defineProperty = defineProperty;
var freeze = Object.freeze;
exports.freeze = freeze;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
exports.getOwnPropertyDescriptor = getOwnPropertyDescriptor;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
exports.getOwnPropertySymbols = getOwnPropertySymbols;
var getPrototypeOf = Object.getPrototypeOf;
exports.getPrototypeOf = getPrototypeOf;
var create = Object.create;
exports.create = create;
var isFrozen = Object.isFrozen;
exports.isFrozen = isFrozen;
var is = Object.is;
exports.is = is;

function readonlyDescriptor() {
  return {
    enumerable: true,
    configurable: false,
    writable: false
  };
}
},{}],"node_modules/bootstrap-vue/es/utils/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.concat = concat;
exports.arrayFind = exports.arrayIncludes = exports.isArray = exports.from = void 0;

// Production steps of ECMA-262, Edition 6, 22.1.2.1
// es6-ified by @alexsasharegan
if (!Array.from) {
  Array.from = function () {
    var toStr = Object.prototype.toString;

    var isCallable = function isCallable(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };

    var toInteger = function toInteger(value) {
      var number = Number(value);

      if (isNaN(number)) {
        return 0;
      }

      if (number === 0 || !isFinite(number)) {
        return number;
      }

      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };

    var maxSafeInteger = Math.pow(2, 53) - 1;

    var toLength = function toLength(value) {
      return Math.min(Math.max(toInteger(value), 0), maxSafeInteger);
    }; // The length property of the from method is 1.


    return function from(arrayLike
    /*, mapFn, thisArg */
    ) {
      // 1. Let C be the this value.
      var C = this; // 2. Let items be ToObject(arrayLike).

      var items = Object(arrayLike); // 3. ReturnIfAbrupt(items).

      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      } // 4. If mapfn is undefined, then let mapping be false.


      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T = void 0;

      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        } // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.


        if (arguments.length > 2) {
          T = arguments[2];
        }
      } // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).


      var len = toLength(items.length); // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method
      // of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).

      var A = isCallable(C) ? Object(new C(len)) : new Array(len); // 16. Let k be 0.

      var k = 0; // 17. Repeat, while k < len… (also steps a - h)

      var kValue = void 0;

      while (k < len) {
        kValue = items[k];

        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }

        k += 1;
      } // 18. Let putStatus be Put(A, "length", len, true).


      A.length = len; // 20. Return A.

      return A;
    };
  }();
} // https://tc39.github.io/ecma262/#sec-array.prototype.find
// Needed for IE support


if (!Array.prototype.find) {
  // eslint-disable-next-line no-extend-native
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


      var thisArg = arguments[1]; // 5. Let k be 0.

      var k = 0; // 6. Repeat, while k < len

      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];

        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        } // e. Increase k by 1.


        k++;
      } // 7. Return undefined.


      return undefined;
    }
  });
}

if (!Array.isArray) {
  Array.isArray = function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  };
} // Static


var from = Array.from;
exports.from = from;
var isArray = Array.isArray; // Instance

exports.isArray = isArray;

var arrayIncludes = function arrayIncludes(array, value) {
  return array.indexOf(value) !== -1;
};

exports.arrayIncludes = arrayIncludes;

var arrayFind = function arrayFind(array, fn, thisArg) {
  return array.find(fn, thisArg);
};

exports.arrayFind = arrayFind;

function concat() {
  return Array.prototype.concat.apply([], arguments);
}
},{}],"node_modules/bootstrap-vue/es/utils/identity.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

function identity(x) {
  return x;
}
},{}],"node_modules/bootstrap-vue/es/utils/pluck-props.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pluckProps;

var _object = require("./object");

var _array = require("./array");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Given an array of properties or an object of property keys,
 * plucks all the values off the target object.
 * @param {{}|string[]} keysToPluck
 * @param {{}} objToPluck
 * @param {Function} transformFn
 * @return {{}}
 */
function pluckProps(keysToPluck, objToPluck) {
  var transformFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _identity.default;
  return ((0, _array.isArray)(keysToPluck) ? keysToPluck.slice() : (0, _object.keys)(keysToPluck)).reduce(function (memo, prop) {
    // eslint-disable-next-line no-sequences
    return memo[transformFn(prop)] = objToPluck[prop], memo;
  }, {});
}
},{"./object":"node_modules/bootstrap-vue/es/utils/object.js","./array":"node_modules/bootstrap-vue/es/utils/array.js","./identity":"node_modules/bootstrap-vue/es/utils/identity.js"}],"node_modules/bootstrap-vue/es/components/link/link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propsFactory = propsFactory;
exports.pickLinkProps = pickLinkProps;
exports.omitLinkProps = omitLinkProps;
exports.default = exports.computed = exports.props = void 0;

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/**
 * The Link component is used in many other BV components.
 * As such, sharing its props makes supporting all its features easier.
 * However, some components need to modify the defaults for their own purpose.
 * Prefer sharing a fresh copy of the props to ensure mutations
 * do not affect other component references to the props.
 *
 * https://github.com/vuejs/vue-router/blob/dev/src/components/link.js
 * @return {{}}
 */
function propsFactory() {
  return {
    href: {
      type: String,
      default: null
    },
    rel: {
      type: String,
      default: null
    },
    target: {
      type: String,
      default: '_self'
    },
    active: {
      type: Boolean,
      default: false
    },
    activeClass: {
      type: String,
      default: 'active'
    },
    append: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    event: {
      type: [String, Array],
      default: 'click'
    },
    exact: {
      type: Boolean,
      default: false
    },
    exactActiveClass: {
      type: String,
      default: 'active'
    },
    replace: {
      type: Boolean,
      default: false
    },
    routerTag: {
      type: String,
      default: 'a'
    },
    to: {
      type: [String, Object],
      default: null
    }
  };
}

var props = propsFactory();
exports.props = props;

function pickLinkProps(propsToPick) {
  var freshLinkProps = propsFactory(); // Normalize everything to array.

  propsToPick = (0, _array.concat)(propsToPick);
  return (0, _object.keys)(freshLinkProps).reduce(function (memo, prop) {
    if ((0, _array.arrayIncludes)(propsToPick, prop)) {
      memo[prop] = freshLinkProps[prop];
    }

    return memo;
  }, {});
}

function omitLinkProps(propsToOmit) {
  var freshLinkProps = propsFactory(); // Normalize everything to array.

  propsToOmit = (0, _array.concat)(propsToOmit);
  return (0, _object.keys)(props).reduce(function (memo, prop) {
    if (!(0, _array.arrayIncludes)(propsToOmit, prop)) {
      memo[prop] = freshLinkProps[prop];
    }

    return memo;
  }, {});
}

var computed = {
  linkProps: function linkProps() {
    var linkProps = {};
    var propKeys = (0, _object.keys)(props);

    for (var i = 0; i < propKeys.length; i++) {
      var prop = propKeys[i]; // Computed Vue getters are bound to the instance.

      linkProps[prop] = this[prop];
    }

    return linkProps;
  }
};
exports.computed = computed;

function computeTag(props, parent) {
  return Boolean(parent.$router) && props.to && !props.disabled ? 'router-link' : 'a';
}

function computeHref(_ref, tag) {
  var disabled = _ref.disabled,
      href = _ref.href,
      to = _ref.to; // We've already checked the parent.$router in computeTag,
  // so router-link means live router.
  // When deferring to Vue Router's router-link,
  // don't use the href attr at all.
  // Must return undefined for router-link to populate href.

  if (tag === 'router-link') return void 0; // If href explicitly provided

  if (href) return href; // Reconstruct href when `to` used, but no router

  if (to) {
    // Fallback to `to` prop (if `to` is a string)
    if (typeof to === 'string') return to; // Fallback to `to.path` prop (if `to` is an object)

    if ((typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && typeof to.path === 'string') return to.path;
  } // If nothing is provided use '#'


  return '#';
}

function computeRel(_ref2) {
  var target = _ref2.target,
      rel = _ref2.rel;

  if (target === '_blank' && rel === null) {
    return 'noopener';
  }

  return rel || null;
}

function clickHandlerFactory(_ref3) {
  var disabled = _ref3.disabled,
      tag = _ref3.tag,
      href = _ref3.href,
      suppliedHandler = _ref3.suppliedHandler,
      parent = _ref3.parent;
  var isRouterLink = tag === 'router-link';
  return function onClick(e) {
    if (disabled && e instanceof Event) {
      // Stop event from bubbling up.
      e.stopPropagation(); // Kill the event loop attached to this specific EventTarget.

      e.stopImmediatePropagation();
    } else {
      parent.$root.$emit('clicked::link', e);

      if (isRouterLink && e.target.__vue__) {
        e.target.__vue__.$emit('click', e);
      }

      if (typeof suppliedHandler === 'function') {
        suppliedHandler.apply(undefined, arguments);
      }
    }

    if (!isRouterLink && href === '#' || disabled) {
      // Stop scroll-to-top behavior or navigation.
      e.preventDefault();
    }
  };
}

var _default = {
  functional: true,
  props: propsFactory(),
  render: function render(h, _ref4) {
    var props = _ref4.props,
        data = _ref4.data,
        parent = _ref4.parent,
        children = _ref4.children;
    var tag = computeTag(props, parent);
    var rel = computeRel(props);
    var href = computeHref(props, tag);
    var eventType = tag === 'router-link' ? 'nativeOn' : 'on';
    var suppliedHandler = (data[eventType] || {}).click;
    var handlers = {
      click: clickHandlerFactory({
        tag: tag,
        href: href,
        disabled: props.disabled,
        suppliedHandler: suppliedHandler,
        parent: parent
      })
    };
    var componentData = (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: [props.active ? props.exact ? props.exactActiveClass : props.activeClass : null, {
        disabled: props.disabled
      }],
      attrs: {
        rel: rel,
        href: href,
        target: props.target,
        tabindex: props.disabled ? '-1' : data.attrs ? data.attrs.tabindex : null,
        'aria-disabled': tag === 'a' && props.disabled ? 'true' : null
      },
      props: (0, _object.assign)(props, {
        tag: props.routerTag
      })
    }); // If href prop exists on router-link (even undefined or null) it fails working on SSR

    if (!componentData.attrs.href) {
      delete componentData.attrs.href;
    } // We want to overwrite any click handler since our callback
    // will invoke the supplied handler if !props.disabled


    componentData[eventType] = (0, _object.assign)(componentData[eventType] || {}, handlers);
    return h(tag, componentData, children);
  }
};
exports.default = _default;
},{"../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/badge/badge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _object = require("../../utils/object");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var linkProps = (0, _link.propsFactory)();
delete linkProps.href.default;
delete linkProps.to.default;
var props = (0, _object.assign)(linkProps, {
  tag: {
    type: String,
    default: 'span'
  },
  variant: {
    type: String,
    default: 'secondary'
  },
  pill: {
    type: Boolean,
    default: false
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var tag = !props.href && !props.to ? props.tag : _link.default;
    var componentData = {
      staticClass: 'badge',
      class: [!props.variant ? 'badge-secondary' : 'badge-' + props.variant, {
        'badge-pill': Boolean(props.pill),
        active: props.active,
        disabled: props.disabled
      }],
      props: (0, _pluckProps.default)(linkProps, props)
    };
    return h(tag, (0, _vueFunctionalDataMerge.mergeData)(data, componentData), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/badge/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _badge = _interopRequireDefault(require("./badge"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bBadge: _badge.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./badge":"node_modules/bootstrap-vue/es/components/badge/badge.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-link.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _object = require("../../utils/object");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var props = (0, _object.assign)((0, _link.propsFactory)(), {
  text: {
    type: String,
    default: null
  },
  active: {
    type: Boolean,
    default: false
  },
  href: {
    type: String,
    default: '#'
  },
  ariaCurrent: {
    type: String,
    default: 'location'
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var suppliedProps = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var tag = suppliedProps.active ? 'span' : _link.default;
    var componentData = {
      props: (0, _pluckProps.default)(props, suppliedProps)
    };

    if (suppliedProps.active) {
      componentData.attrs = {
        'aria-current': suppliedProps.ariaCurrent
      };
    } else {
      componentData.attrs = {
        href: suppliedProps.href
      };
    }

    return h(tag, (0, _vueFunctionalDataMerge.mergeData)(data, componentData), children || suppliedProps.text);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-item.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _object = require("../../utils/object");

var _breadcrumbLink = _interopRequireWildcard(require("./breadcrumb-link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var props = (0, _object.assign)({}, _breadcrumbLink.props, {
  text: {
    type: String,
    default: null
  },
  href: {
    type: String,
    default: null
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h('li', (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'breadcrumb-item',
      class: {
        active: props.active
      },
      attrs: {
        role: 'presentation'
      }
    }), [h(_breadcrumbLink.default, {
      props: props
    }, children)]);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","./breadcrumb-link":"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-link.js"}],"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _array = require("../../utils/array");

var _object = require("../../utils/object");

var _breadcrumbItem = _interopRequireDefault(require("./breadcrumb-item"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var props = {
  items: {
    type: Array,
    default: null
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var childNodes = children; // Build child nodes from items if given.

    if ((0, _array.isArray)(props.items)) {
      var activeDefined = false;
      childNodes = props.items.map(function (item, idx) {
        if ((typeof item === 'undefined' ? 'undefined' : _typeof(item)) !== 'object') {
          item = {
            text: item
          };
        } // Copy the value here so we can normalize it.


        var active = item.active;

        if (active) {
          activeDefined = true;
        }

        if (!active && !activeDefined) {
          // Auto-detect active by position in list.
          active = idx + 1 === props.items.length;
        }

        return h(_breadcrumbItem.default, {
          props: (0, _object.assign)({}, item, {
            active: active
          })
        });
      });
    }

    return h('ol', (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'breadcrumb'
    }), childNodes);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","./breadcrumb-item":"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-item.js"}],"node_modules/bootstrap-vue/es/components/breadcrumb/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _breadcrumb = _interopRequireDefault(require("./breadcrumb"));

var _breadcrumbItem = _interopRequireDefault(require("./breadcrumb-item"));

var _breadcrumbLink = _interopRequireDefault(require("./breadcrumb-link"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bBreadcrumb: _breadcrumb.default,
  bBreadcrumbItem: _breadcrumbItem.default,
  bBreadcrumbLink: _breadcrumbLink.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./breadcrumb":"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb.js","./breadcrumb-item":"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-item.js","./breadcrumb-link":"node_modules/bootstrap-vue/es/components/breadcrumb/breadcrumb-link.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/dom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.eventOff = exports.eventOn = exports.position = exports.offset = exports.getCS = exports.getBCR = exports.hasAttr = exports.getAttr = exports.removeAttr = exports.setAttr = exports.hasClass = exports.removeClass = exports.addClass = exports.getById = exports.closest = exports.matches = exports.select = exports.selectAll = exports.reflow = exports.isDisabled = exports.isVisible = exports.isElement = void 0;

var _array = require("./array");

// Determine if an element is an HTML Element
var isElement = function isElement(el) {
  return el && el.nodeType === Node.ELEMENT_NODE;
}; // Determine if an HTML element is visible - Faster than CSS check


exports.isElement = isElement;

var isVisible = function isVisible(el) {
  return isElement(el) && document.body.contains(el) && el.getBoundingClientRect().height > 0 && el.getBoundingClientRect().width > 0;
}; // Determine if an element is disabled


exports.isVisible = isVisible;

var isDisabled = function isDisabled(el) {
  return !isElement(el) || el.disabled || el.classList.contains('disabled') || Boolean(el.getAttribute('disabled'));
}; // Cause/wait-for an element to reflow it's content (adjusting it's height/width)


exports.isDisabled = isDisabled;

var reflow = function reflow(el) {
  // requsting an elements offsetHight will trigger a reflow of the element content
  return isElement(el) && el.offsetHeight;
}; // Select all elements matching selector. Returns [] if none found


exports.reflow = reflow;

var selectAll = function selectAll(selector, root) {
  if (!isElement(root)) {
    root = document;
  }

  return (0, _array.from)(root.querySelectorAll(selector));
}; // Select a single element, returns null if not found


exports.selectAll = selectAll;

var select = function select(selector, root) {
  if (!isElement(root)) {
    root = document;
  }

  return root.querySelector(selector) || null;
}; // Determine if an element matches a selector


exports.select = select;

var matches = function matches(el, selector) {
  if (!isElement(el)) {
    return false;
  } // https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill
  // Prefer native implementations over polyfill function


  var proto = Element.prototype;

  var Matches = proto.matches || proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector ||
  /* istanbul ignore next */
  function (sel) {
    var element = this;
    var m = selectAll(sel, element.document || element.ownerDocument);
    var i = m.length; // eslint-disable-next-line no-empty

    while (--i >= 0 && m.item(i) !== element) {}

    return i > -1;
  };

  return Matches.call(el, selector);
}; // Finds closest element matching selector. Returns null if not found


exports.matches = matches;

var closest = function closest(selector, root) {
  if (!isElement(root)) {
    return null;
  } // https://developer.mozilla.org/en-US/docs/Web/API/Element/closest
  // Since we dont support IE < 10, we can use the "Matches" version of the polyfill for speed
  // Prefer native implementation over polyfill function


  var Closest = Element.prototype.closest ||
  /* istanbul ignore next */
  function (sel) {
    var element = this;

    if (!document.documentElement.contains(element)) {
      return null;
    }

    do {
      // Use our "patched" matches function
      if (matches(element, sel)) {
        return element;
      }

      element = element.parentElement;
    } while (element !== null);

    return null;
  };

  var el = Closest.call(root, selector); // Emulate jQuery closest and return null if match is the passed in element (root)

  return el === root ? null : el;
}; // Get an element given an ID


exports.closest = closest;

var getById = function getById(id) {
  return document.getElementById(/^#/.test(id) ? id.slice(1) : id) || null;
}; // Add a class to an element


exports.getById = getById;

var addClass = function addClass(el, className) {
  if (className && isElement(el)) {
    el.classList.add(className);
  }
}; // Remove a class from an element


exports.addClass = addClass;

var removeClass = function removeClass(el, className) {
  if (className && isElement(el)) {
    el.classList.remove(className);
  }
}; // Test if an element has a class


exports.removeClass = removeClass;

var hasClass = function hasClass(el, className) {
  if (className && isElement(el)) {
    return el.classList.contains(className);
  }

  return false;
}; // Set an attribute on an element


exports.hasClass = hasClass;

var setAttr = function setAttr(el, attr, value) {
  if (attr && isElement(el)) {
    el.setAttribute(attr, value);
  }
}; // Remove an attribute from an element


exports.setAttr = setAttr;

var removeAttr = function removeAttr(el, attr) {
  if (attr && isElement(el)) {
    el.removeAttribute(attr);
  }
}; // Get an attribute value from an element (returns null if not found)


exports.removeAttr = removeAttr;

var getAttr = function getAttr(el, attr) {
  if (attr && isElement(el)) {
    return el.getAttribute(attr);
  }

  return null;
}; // Determine if an attribute exists on an element (returns true or false, or null if element not found)


exports.getAttr = getAttr;

var hasAttr = function hasAttr(el, attr) {
  if (attr && isElement(el)) {
    return el.hasAttribute(attr);
  }

  return null;
}; // Return the Bounding Client Rec of an element. Retruns null if not an element


exports.hasAttr = hasAttr;

var getBCR = function getBCR(el) {
  return isElement(el) ? el.getBoundingClientRect() : null;
}; // Get computed style object for an element


exports.getBCR = getBCR;

var getCS = function getCS(el) {
  return isElement(el) ? window.getComputedStyle(el) : {};
}; // Return an element's offset wrt document element
// https://j11y.io/jquery/#v=git&fn=jQuery.fn.offset


exports.getCS = getCS;

var offset = function offset(el) {
  if (isElement(el)) {
    if (!el.getClientRects().length) {
      return {
        top: 0,
        left: 0
      };
    }

    var bcr = getBCR(el);
    var win = el.ownerDocument.defaultView;
    return {
      top: bcr.top + win.pageYOffset,
      left: bcr.left + win.pageXOffset
    };
  }
}; // Return an element's offset wrt to it's offsetParent
// https://j11y.io/jquery/#v=git&fn=jQuery.fn.position


exports.offset = offset;

var position = function position(el) {
  if (!isElement(el)) {
    return;
  }

  var parentOffset = {
    top: 0,
    left: 0
  };
  var offsetSelf = void 0;
  var offsetParent = void 0;

  if (getCS(el).position === 'fixed') {
    offsetSelf = getBCR(el);
  } else {
    offsetSelf = offset(el);
    var doc = el.ownerDocument;
    offsetParent = el.offsetParent || doc.documentElement;

    while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && getCS(offsetParent).position === 'static') {
      offsetParent = offsetParent.parentNode;
    }

    if (offsetParent && offsetParent !== el && offsetParent.nodeType === Node.ELEMENT_NODE) {
      parentOffset = offset(offsetParent);
      parentOffset.top += parseFloat(getCS(offsetParent).borderTopWidth);
      parentOffset.left += parseFloat(getCS(offsetParent).borderLeftWidth);
    }
  }

  return {
    top: offsetSelf.top - parentOffset.top - parseFloat(getCS(el).marginTop),
    left: offsetSelf.left - parentOffset.left - parseFloat(getCS(el).marginLeft)
  };
}; // Attach an event listener to an element


exports.position = position;

var eventOn = function eventOn(el, evtName, handler) {
  if (el && el.addEventListener) {
    el.addEventListener(evtName, handler);
  }
}; // Remove an event listener from an element


exports.eventOn = eventOn;

var eventOff = function eventOff(el, evtName, handler) {
  if (el && el.removeEventListener) {
    el.removeEventListener(evtName, handler);
  }
};

exports.eventOff = eventOff;
},{"./array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/button/button.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _array = require("../../utils/array");

var _object = require("../../utils/object");

var _dom = require("../../utils/dom");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var btnProps = {
  block: {
    type: Boolean,
    default: false
  },
  disabled: {
    type: Boolean,
    default: false
  },
  size: {
    type: String,
    default: null
  },
  variant: {
    type: String,
    default: null
  },
  type: {
    type: String,
    default: 'button'
  },
  pressed: {
    // tri-state prop: true, false or null
    // => on, off, not a toggle
    type: Boolean,
    default: null
  }
};
var linkProps = (0, _link.propsFactory)();
delete linkProps.href.default;
delete linkProps.to.default;
var linkPropKeys = (0, _object.keys)(linkProps);
var props = (0, _object.assign)(linkProps, btnProps);
exports.props = props;

function handleFocus(evt) {
  if (evt.type === 'focusin') {
    (0, _dom.addClass)(evt.target, 'focus');
  } else if (evt.type === 'focusout') {
    (0, _dom.removeClass)(evt.target, 'focus');
  }
}

var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _ref2;

    var props = _ref.props,
        data = _ref.data,
        listeners = _ref.listeners,
        children = _ref.children;
    var isLink = Boolean(props.href || props.to);
    var isToggle = typeof props.pressed === 'boolean';
    var on = {
      click: function click(e) {
        if (props.disabled && e instanceof Event) {
          e.stopPropagation();
          e.preventDefault();
        } else if (isToggle) {
          // Concat will normalize the value to an array
          // without double wrapping an array value in an array.
          (0, _array.concat)(listeners['update:pressed']).forEach(function (fn) {
            if (typeof fn === 'function') {
              fn(!props.pressed);
            }
          });
        }
      }
    };

    if (isToggle) {
      on.focusin = handleFocus;
      on.focusout = handleFocus;
    }

    var componentData = {
      staticClass: 'btn',
      class: [props.variant ? 'btn-' + props.variant : 'btn-secondary', (_ref2 = {}, _defineProperty(_ref2, 'btn-' + props.size, Boolean(props.size)), _defineProperty(_ref2, 'btn-block', props.block), _defineProperty(_ref2, 'disabled', props.disabled), _defineProperty(_ref2, 'active', props.pressed), _ref2)],
      props: isLink ? (0, _pluckProps.default)(linkPropKeys, props) : null,
      attrs: {
        type: isLink ? null : props.type,
        disabled: isLink ? null : props.disabled,
        // Data attribute not used for js logic,
        // but only for BS4 style selectors.
        'data-toggle': isToggle ? 'button' : null,
        'aria-pressed': isToggle ? String(props.pressed) : null,
        // Tab index is used when the component becomes a link.
        // Links are tabable, but don't allow disabled,
        // so we mimic that functionality by disabling tabbing.
        tabindex: props.disabled && isLink ? '-1' : data.attrs ? data.attrs['tabindex'] : null
      },
      on: on
    };
    return h(isLink ? _link.default : 'button', (0, _vueFunctionalDataMerge.mergeData)(data, componentData), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/button/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("./button"));

var _buttonClose = _interopRequireDefault(require("./button-close"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bButton: _button.default,
  bBtn: _button.default,
  bButtonClose: _buttonClose.default,
  bBtnClose: _buttonClose.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./button":"node_modules/bootstrap-vue/es/components/button/button.js","./button-close":"node_modules/bootstrap-vue/es/components/button/button-close.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/button-group/button-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _array = require("../../utils/array");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  vertical: {
    type: Boolean,
    default: false
  },
  size: {
    type: String,
    default: null,
    validator: function validator(size) {
      return (0, _array.arrayIncludes)(['sm', '', 'lg'], size);
    }
  },
  tag: {
    type: String,
    default: 'div'
  },
  ariaRole: {
    type: String,
    default: 'group'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: _defineProperty({
        'btn-group': !props.vertical,
        'btn-group-vertical': props.vertical
      }, 'btn-group-' + props.size, Boolean(props.size)),
      attrs: {
        'role': props.ariaRole
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/button-group/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buttonGroup = _interopRequireDefault(require("./button-group"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bButtonGroup: _buttonGroup.default,
  bBtnGroup: _buttonGroup.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./button-group":"node_modules/bootstrap-vue/es/components/button-group/button-group.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/key-codes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Key Codes (events)
 */
var _default = {
  SPACE: 32,
  ENTER: 13,
  ESC: 27,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  PAGEUP: 33,
  PAGEDOWN: 34,
  HOME: 36,
  END: 35
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/button-toolbar/button-toolbar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dom = require("../../utils/dom");

var _keyCodes = _interopRequireDefault(require("../../utils/key-codes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ITEM_SELECTOR = ['.btn:not(.disabled):not([disabled]):not(.dropdown-item)', '.form-control:not(.disabled):not([disabled])', 'select:not(.disabled):not([disabled])', 'input[type="checkbox"]:not(.disabled)', 'input[type="radio"]:not(.disabled)'].join(',');
var _default = {
  render: function render(h) {
    return h('div', {
      class: this.classObject,
      attrs: {
        role: 'toolbar',
        tabindex: this.keyNav ? '0' : null
      },
      on: {
        focusin: this.onFocusin,
        keydown: this.onKeydown
      }
    }, [this.$slots.default]);
  },
  computed: {
    classObject: function classObject() {
      return ['btn-toolbar', this.justify && !this.vertical ? 'justify-content-between' : ''];
    }
  },
  props: {
    justify: {
      type: Boolean,
      default: false
    },
    keyNav: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    onFocusin: function onFocusin(evt) {
      if (evt.target === this.$el) {
        evt.preventDefault();
        evt.stopPropagation();
        this.focusFirst(evt);
      }
    },
    onKeydown: function onKeydown(evt) {
      if (!this.keyNav) {
        return;
      }

      var key = evt.keyCode;
      var shift = evt.shiftKey;

      if (key === _keyCodes.default.UP || key === _keyCodes.default.LEFT) {
        evt.preventDefault();
        evt.stopPropagation();

        if (shift) {
          this.focusFirst(evt);
        } else {
          this.focusNext(evt, true);
        }
      } else if (key === _keyCodes.default.DOWN || key === _keyCodes.default.RIGHT) {
        evt.preventDefault();
        evt.stopPropagation();

        if (shift) {
          this.focusLast(evt);
        } else {
          this.focusNext(evt, false);
        }
      }
    },
    setItemFocus: function setItemFocus(item) {
      this.$nextTick(function () {
        item.focus();
      });
    },
    focusNext: function focusNext(evt, prev) {
      var items = this.getItems();

      if (items.length < 1) {
        return;
      }

      var index = items.indexOf(evt.target);

      if (prev && index > 0) {
        index--;
      } else if (!prev && index < items.length - 1) {
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      this.setItemFocus(items[index]);
    },
    focusFirst: function focusFirst(evt) {
      var items = this.getItems();

      if (items.length > 0) {
        this.setItemFocus(items[0]);
      }
    },
    focusLast: function focusLast(evt) {
      var items = this.getItems();

      if (items.length > 0) {
        this.setItemFocus([items.length - 1]);
      }
    },
    getItems: function getItems() {
      var items = (0, _dom.selectAll)(ITEM_SELECTOR, this.$el);
      items.forEach(function (item) {
        // Ensure tabfocus is -1 on any new elements
        item.tabIndex = -1;
      });
      return items.filter(function (el) {
        return (0, _dom.isVisible)(el);
      });
    }
  },
  mounted: function mounted() {
    if (this.keyNav) {
      // Pre-set the tabindexes if the markup does not include tabindex="-1" on the toolbar items
      this.getItems();
    }
  }
};
exports.default = _default;
},{"../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js"}],"node_modules/bootstrap-vue/es/components/button-toolbar/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _buttonToolbar = _interopRequireDefault(require("./button-toolbar"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bButtonToolbar: _buttonToolbar.default,
  bBtnToolbar: _buttonToolbar.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./button-toolbar":"node_modules/bootstrap-vue/es/components/button-toolbar/button-toolbar.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/input-group/input-group-text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  }
};
exports.props = props;
var _default = {
  props: props,
  functional: true,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'input-group-text'
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/input-group/input-group-addon.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.propsFactory = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _inputGroupText = _interopRequireDefault(require("./input-group-text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propsFactory = function propsFactory(append) {
  return {
    id: {
      type: String,
      default: null
    },
    tag: {
      type: String,
      default: 'div'
    },
    append: {
      type: Boolean,
      default: append
    },
    isText: {
      type: Boolean,
      default: false
    }
  };
};

exports.propsFactory = propsFactory;
var _default = {
  functional: true,
  props: propsFactory(false),
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'input-group-' + (props.append ? 'append' : 'prepend'),
      attrs: {
        id: props.id
      }
    }), props.isText ? [h(_inputGroupText.default, children)] : children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","./input-group-text":"node_modules/bootstrap-vue/es/components/input-group/input-group-text.js"}],"node_modules/bootstrap-vue/es/components/input-group/input-group-prepend.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _inputGroupAddon = _interopRequireWildcard(require("./input-group-addon"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  functional: true,
  props: (0, _inputGroupAddon.propsFactory)(false),
  render: _inputGroupAddon.default.render
};
exports.default = _default;
},{"./input-group-addon":"node_modules/bootstrap-vue/es/components/input-group/input-group-addon.js"}],"node_modules/bootstrap-vue/es/components/input-group/input-group-append.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _inputGroupAddon = _interopRequireWildcard(require("./input-group-addon"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  functional: true,
  props: (0, _inputGroupAddon.propsFactory)(true),
  render: _inputGroupAddon.default.render
};
exports.default = _default;
},{"./input-group-addon":"node_modules/bootstrap-vue/es/components/input-group/input-group-addon.js"}],"node_modules/bootstrap-vue/es/components/input-group/input-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _inputGroupPrepend = _interopRequireDefault(require("./input-group-prepend"));

var _inputGroupAppend = _interopRequireDefault(require("./input-group-append"));

var _inputGroupText = _interopRequireDefault(require("./input-group-text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  id: {
    type: String,
    default: null
  },
  size: {
    type: String,
    default: null
  },
  prepend: {
    type: String,
    default: null
  },
  append: {
    type: String,
    default: null
  },
  tag: {
    type: String,
    default: 'div'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots;
    var $slots = slots();
    var childNodes = []; // Prepend prop

    if (props.prepend) {
      childNodes.push(h(_inputGroupPrepend.default, [h(_inputGroupText.default, {
        domProps: {
          innerHTML: props.prepend
        }
      })]));
    } // Prepend slot


    if ($slots.prepend) {
      childNodes.push(h(_inputGroupPrepend.default, $slots.prepend));
    } // Default slot


    childNodes.push($slots.default); // Append prop

    if (props.append) {
      childNodes.push(h(_inputGroupAppend.default, [h(_inputGroupText.default, {
        domProps: {
          innerHTML: props.append
        }
      })]));
    } // Append slot


    if ($slots.append) {
      childNodes.push(h(_inputGroupAppend.default, $slots.append));
    }

    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'input-group',
      class: _defineProperty({}, 'input-group-' + props.size, Boolean(props.size)),
      attrs: {
        id: props.id || null,
        role: 'group'
      }
    }), childNodes);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","./input-group-prepend":"node_modules/bootstrap-vue/es/components/input-group/input-group-prepend.js","./input-group-append":"node_modules/bootstrap-vue/es/components/input-group/input-group-append.js","./input-group-text":"node_modules/bootstrap-vue/es/components/input-group/input-group-text.js"}],"node_modules/bootstrap-vue/es/components/input-group/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _plugins = require("../../utils/plugins");

var _inputGroup = _interopRequireDefault(require("./input-group"));

var _inputGroupAddon = _interopRequireDefault(require("./input-group-addon"));

var _inputGroupPrepend = _interopRequireDefault(require("./input-group-prepend"));

var _inputGroupAppend = _interopRequireDefault(require("./input-group-append"));

var _inputGroupText = _interopRequireDefault(require("./input-group-text"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bInputGroup: _inputGroup.default,
  bInputGroupAddon: _inputGroupAddon.default,
  bInputGroupPrepend: _inputGroupPrepend.default,
  bInputGroupAppend: _inputGroupAppend.default,
  bInputGroupText: _inputGroupText.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js","./input-group":"node_modules/bootstrap-vue/es/components/input-group/input-group.js","./input-group-addon":"node_modules/bootstrap-vue/es/components/input-group/input-group-addon.js","./input-group-prepend":"node_modules/bootstrap-vue/es/components/input-group/input-group-prepend.js","./input-group-append":"node_modules/bootstrap-vue/es/components/input-group/input-group-append.js","./input-group-text":"node_modules/bootstrap-vue/es/components/input-group/input-group-text.js"}],"node_modules/bootstrap-vue/es/utils/upper-first.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = upperFirst;

/**
 * @param {string} str
 */
function upperFirst(str) {
  if (typeof str !== 'string') {
    str = String(str);
  }

  return str.charAt(0).toUpperCase() + str.slice(1);
}
},{}],"node_modules/bootstrap-vue/es/utils/prefix-prop-name.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixPropName;

var _upperFirst = _interopRequireDefault(require("./upper-first"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {string} prefix
 * @param {string} value
 */
function prefixPropName(prefix, value) {
  return prefix + (0, _upperFirst.default)(value);
}
},{"./upper-first":"node_modules/bootstrap-vue/es/utils/upper-first.js"}],"node_modules/bootstrap-vue/es/utils/lower-first.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lowerFirst;

/**
 * @param {string} str
 */
function lowerFirst(str) {
  if (typeof str !== 'string') {
    str = String(str);
  }

  return str.charAt(0).toLowerCase() + str.slice(1);
}
},{}],"node_modules/bootstrap-vue/es/utils/unprefix-prop-name.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = unPrefixPropName;

var _lowerFirst = _interopRequireDefault(require("./lower-first"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @param {string} prefix
 * @param {string} value
 */
function unPrefixPropName(prefix, value) {
  return (0, _lowerFirst.default)(value.replace(prefix, ''));
}
},{"./lower-first":"node_modules/bootstrap-vue/es/utils/lower-first.js"}],"node_modules/bootstrap-vue/es/utils/copyProps.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = copyProps;

var _array = require("./array");

var _object = require("./object");

var _identity = _interopRequireDefault(require("./identity"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/**
 * @param {[]|{}} props
 * @param {Function} transformFn
 */
function copyProps(props) {
  var transformFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity.default;

  if ((0, _array.isArray)(props)) {
    return props.map(transformFn);
  } // Props as an object.


  var copied = {};

  for (var prop in props) {
    if (props.hasOwnProperty(prop)) {
      if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object') {
        copied[transformFn(prop)] = (0, _object.assign)({}, props[prop]);
      } else {
        copied[transformFn(prop)] = props[prop];
      }
    }
  }

  return copied;
}
},{"./array":"node_modules/bootstrap-vue/es/utils/array.js","./object":"node_modules/bootstrap-vue/es/utils/object.js","./identity":"node_modules/bootstrap-vue/es/utils/identity.js"}],"node_modules/bootstrap-vue/es/mixins/card-mixin.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    bgVariant: {
      type: String,
      default: null
    },
    borderVariant: {
      type: String,
      default: null
    },
    textVariant: {
      type: String,
      default: null
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/card/card-body.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _prefixPropName = _interopRequireDefault(require("../../utils/prefix-prop-name"));

var _copyProps = _interopRequireDefault(require("../../utils/copyProps"));

var _object = require("../../utils/object");

var _cardMixin = _interopRequireDefault(require("../../mixins/card-mixin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = (0, _object.assign)({}, (0, _copyProps.default)(_cardMixin.default.props, _prefixPropName.default.bind(null, 'body')), {
  bodyClass: {
    type: [String, Object, Array],
    default: null
  },
  title: {
    type: String,
    default: null
  },
  titleTag: {
    type: String,
    default: 'h4'
  },
  subTitle: {
    type: String,
    default: null
  },
  subTitleTag: {
    type: String,
    default: 'h6'
  },
  overlay: {
    type: Boolean,
    default: false
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _ref2;

    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots;
    var cardBodyChildren = [];

    if (props.title) {
      cardBodyChildren.push(h(props.titleTag, {
        staticClass: 'card-title',
        domProps: {
          innerHTML: props.title
        }
      }));
    }

    if (props.subTitle) {
      cardBodyChildren.push(h(props.subTitleTag, {
        staticClass: 'card-subtitle mb-2 text-muted',
        domProps: {
          innerHTML: props.subTitle
        }
      }));
    }

    cardBodyChildren.push(slots().default);
    return h(props.bodyTag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'card-body',
      class: [(_ref2 = {
        'card-img-overlay': props.overlay
      }, _defineProperty(_ref2, 'bg-' + props.bodyBgVariant, Boolean(props.bodyBgVariant)), _defineProperty(_ref2, 'border-' + props.bodyBorderVariant, Boolean(props.bodyBorderVariant)), _defineProperty(_ref2, 'text-' + props.bodyTextVariant, Boolean(props.bodyTextVariant)), _ref2), props.bodyClass || {}]
    }), cardBodyChildren);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/prefix-prop-name":"node_modules/bootstrap-vue/es/utils/prefix-prop-name.js","../../utils/copyProps":"node_modules/bootstrap-vue/es/utils/copyProps.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../mixins/card-mixin":"node_modules/bootstrap-vue/es/mixins/card-mixin.js"}],"node_modules/bootstrap-vue/es/components/card/card-header.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _prefixPropName = _interopRequireDefault(require("../../utils/prefix-prop-name"));

var _copyProps = _interopRequireDefault(require("../../utils/copyProps"));

var _object = require("../../utils/object");

var _cardMixin = _interopRequireDefault(require("../../mixins/card-mixin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = (0, _object.assign)({}, (0, _copyProps.default)(_cardMixin.default.props, _prefixPropName.default.bind(null, 'header')), {
  header: {
    type: String,
    default: null
  },
  headerClass: {
    type: [String, Object, Array],
    default: null
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _ref2;

    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots,
        children = _ref.children;
    return h(props.headerTag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'card-header',
      class: [props.headerClass, (_ref2 = {}, _defineProperty(_ref2, 'bg-' + props.headerBgVariant, Boolean(props.headerBgVariant)), _defineProperty(_ref2, 'border-' + props.headerBorderVariant, Boolean(props.headerBorderVariant)), _defineProperty(_ref2, 'text-' + props.headerTextVariant, Boolean(props.headerTextVariant)), _ref2)]
    }), children || [h('div', {
      domProps: {
        innerHTML: props.header
      }
    })]);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/prefix-prop-name":"node_modules/bootstrap-vue/es/utils/prefix-prop-name.js","../../utils/copyProps":"node_modules/bootstrap-vue/es/utils/copyProps.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../mixins/card-mixin":"node_modules/bootstrap-vue/es/mixins/card-mixin.js"}],"node_modules/bootstrap-vue/es/components/card/card-footer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _prefixPropName = _interopRequireDefault(require("../../utils/prefix-prop-name"));

var _copyProps = _interopRequireDefault(require("../../utils/copyProps"));

var _object = require("../../utils/object");

var _cardMixin = _interopRequireDefault(require("../../mixins/card-mixin"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = (0, _object.assign)({}, (0, _copyProps.default)(_cardMixin.default.props, _prefixPropName.default.bind(null, 'footer')), {
  footer: {
    type: String,
    default: null
  },
  footerClass: {
    type: [String, Object, Array],
    default: null
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _ref2;

    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots,
        children = _ref.children;
    return h(props.footerTag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'card-footer',
      class: [props.footerClass, (_ref2 = {}, _defineProperty(_ref2, 'bg-' + props.footerBgVariant, Boolean(props.footerBgVariant)), _defineProperty(_ref2, 'border-' + props.footerBorderVariant, Boolean(props.footerBorderVariant)), _defineProperty(_ref2, 'text-' + props.footerTextVariant, Boolean(props.footerTextVariant)), _ref2)]
    }), children || [h('div', {
      domProps: {
        innerHTML: props.footer
      }
    })]);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/prefix-prop-name":"node_modules/bootstrap-vue/es/utils/prefix-prop-name.js","../../utils/copyProps":"node_modules/bootstrap-vue/es/utils/copyProps.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../mixins/card-mixin":"node_modules/bootstrap-vue/es/mixins/card-mixin.js"}],"node_modules/bootstrap-vue/es/components/card/card-img.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  src: {
    type: String,
    default: null,
    required: true
  },
  alt: {
    type: String,
    default: null
  },
  top: {
    type: Boolean,
    default: false
  },
  bottom: {
    type: Boolean,
    default: false
  },
  fluid: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots;
    var staticClass = 'card-img';

    if (props.top) {
      staticClass += '-top';
    } else if (props.bottom) {
      staticClass += '-bottom';
    }

    return h('img', (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: staticClass,
      class: {
        'img-fluid': props.fluid
      },
      attrs: {
        src: props.src,
        alt: props.alt
      }
    }));
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/card/card.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _prefixPropName = _interopRequireDefault(require("../../utils/prefix-prop-name"));

var _unprefixPropName = _interopRequireDefault(require("../../utils/unprefix-prop-name"));

var _copyProps = _interopRequireDefault(require("../../utils/copyProps"));

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _object = require("../../utils/object");

var _cardMixin = _interopRequireDefault(require("../../mixins/card-mixin"));

var _cardBody = _interopRequireWildcard(require("./card-body"));

var _cardHeader = _interopRequireWildcard(require("./card-header"));

var _cardFooter = _interopRequireWildcard(require("./card-footer"));

var _cardImg = _interopRequireWildcard(require("./card-img"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var cardImgProps = (0, _copyProps.default)(_cardImg.props, _prefixPropName.default.bind(null, 'img'));
cardImgProps.imgSrc.required = false;
var props = (0, _object.assign)({}, _cardBody.props, _cardHeader.props, _cardFooter.props, cardImgProps, (0, _copyProps.default)(_cardMixin.default.props), {
  align: {
    type: String,
    default: null
  },
  noBody: {
    type: Boolean,
    default: false
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class;

    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots,
        children = _ref.children; // The order of the conditionals matter.
    // We are building the component markup in order.

    var childNodes = [];
    var $slots = slots();
    var img = props.imgSrc ? h(_cardImg.default, {
      props: (0, _pluckProps.default)(cardImgProps, props, _unprefixPropName.default.bind(null, 'img'))
    }) : null;

    if (img) {
      // Above the header placement.
      if (props.imgTop || !props.imgBottom) {
        childNodes.push(img);
      }
    }

    if (props.header || $slots.header) {
      childNodes.push(h(_cardHeader.default, {
        props: (0, _pluckProps.default)(_cardHeader.props, props)
      }, $slots.header));
    }

    if (props.noBody) {
      childNodes.push($slots.default);
    } else {
      childNodes.push(h(_cardBody.default, {
        props: (0, _pluckProps.default)(_cardBody.props, props)
      }, $slots.default));
    }

    if (props.footer || $slots.footer) {
      childNodes.push(h(_cardFooter.default, {
        props: (0, _pluckProps.default)(_cardFooter.props, props)
      }, $slots.footer));
    }

    if (img && props.imgBottom) {
      // Below the footer placement.
      childNodes.push(img);
    }

    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'card',
      class: (_class = {}, _defineProperty(_class, 'text-' + props.align, Boolean(props.align)), _defineProperty(_class, 'bg-' + props.bgVariant, Boolean(props.bgVariant)), _defineProperty(_class, 'border-' + props.borderVariant, Boolean(props.borderVariant)), _defineProperty(_class, 'text-' + props.textVariant, Boolean(props.textVariant)), _class)
    }), childNodes);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/prefix-prop-name":"node_modules/bootstrap-vue/es/utils/prefix-prop-name.js","../../utils/unprefix-prop-name":"node_modules/bootstrap-vue/es/utils/unprefix-prop-name.js","../../utils/copyProps":"node_modules/bootstrap-vue/es/utils/copyProps.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../mixins/card-mixin":"node_modules/bootstrap-vue/es/mixins/card-mixin.js","./card-body":"node_modules/bootstrap-vue/es/components/card/card-body.js","./card-header":"node_modules/bootstrap-vue/es/components/card/card-header.js","./card-footer":"node_modules/bootstrap-vue/es/components/card/card-footer.js","./card-img":"node_modules/bootstrap-vue/es/components/card/card-img.js"}],"node_modules/bootstrap-vue/es/components/card/card-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  },
  deck: {
    type: Boolean,
    default: false
  },
  columns: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var staticClass = 'card-group';

    if (props.columns) {
      staticClass = 'card-columns';
    }

    if (props.deck) {
      staticClass = 'card-deck';
    }

    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: staticClass
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/card/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _card = _interopRequireDefault(require("./card"));

var _cardHeader = _interopRequireDefault(require("./card-header"));

var _cardBody = _interopRequireDefault(require("./card-body"));

var _cardFooter = _interopRequireDefault(require("./card-footer"));

var _cardImg = _interopRequireDefault(require("./card-img"));

var _cardGroup = _interopRequireDefault(require("./card-group"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bCard: _card.default,
  bCardHeader: _cardHeader.default,
  bCardBody: _cardBody.default,
  bCardFooter: _cardFooter.default,
  bCardImg: _cardImg.default,
  bCardGroup: _cardGroup.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./card":"node_modules/bootstrap-vue/es/components/card/card.js","./card-header":"node_modules/bootstrap-vue/es/components/card/card-header.js","./card-body":"node_modules/bootstrap-vue/es/components/card/card-body.js","./card-footer":"node_modules/bootstrap-vue/es/components/card/card-footer.js","./card-img":"node_modules/bootstrap-vue/es/components/card/card-img.js","./card-group":"node_modules/bootstrap-vue/es/components/card/card-group.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/observe-dom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = observeDOM;

var _object = require("./object");

var _dom = require("../utils/dom");

/**
 * Observe a DOM element changes, falls back to eventListener mode
 * @param {Element} el The DOM element to observe
 * @param {Function} callback callback to be called on change
 * @param {object} [opts={childList: true, subtree: true}] observe options
 * @see http://stackoverflow.com/questions/3219758
 */
function observeDOM(el, callback, opts) {
  var MutationObserver = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
  var eventListenerSupported = window.addEventListener; // Handle case where we might be passed a vue instance

  el = el ? el.$el || el : null;
  /* istanbul ignore next: dificult to test in JSDOM */

  if (!(0, _dom.isElement)(el)) {
    // We can't observe somthing that isn't an element
    return null;
  }

  var obs = null;
  /* istanbul ignore next: dificult to test in JSDOM */

  if (MutationObserver) {
    // Define a new observer
    obs = new MutationObserver(function (mutations) {
      var changed = false; // A Mutation can contain several change records, so we loop through them to see what has changed.
      // We break out of the loop early if any "significant" change has been detected

      for (var i = 0; i < mutations.length && !changed; i++) {
        // The muttion record
        var mutation = mutations[i]; // Mutation Type

        var type = mutation.type; // DOM Node (could be any DOM Node type - HTMLElement, Text, comment, etc)

        var target = mutation.target;

        if (type === 'characterData' && target.nodeType === Node.TEXT_NODE) {
          // We ignore nodes that are not TEXt (i.e. comments, etc) as they don't change layout
          changed = true;
        } else if (type === 'attributes') {
          changed = true;
        } else if (type === 'childList' && (mutation.addedNodes.length > 0 || mutation.removedNodes.length > 0)) {
          // This includes HTMLElement and Text Nodes being added/removed/re-arranged
          changed = true;
        }
      }

      if (changed) {
        // We only call the callback if a change that could affect layout/size truely happened.
        callback();
      }
    }); // Have the observer observe foo for changes in children, etc

    obs.observe(el, (0, _object.assign)({
      childList: true,
      subtree: true
    }, opts));
  } else if (eventListenerSupported) {
    // Legacy interface. most likely not used in modern browsers
    el.addEventListener('DOMNodeInserted', callback, false);
    el.addEventListener('DOMNodeRemoved', callback, false);
  } // We return a reference to the observer so that obs.disconnect() can be called if necessary
  // To reduce overhead when the root element is hiiden


  return obs;
}
},{"./object":"node_modules/bootstrap-vue/es/utils/object.js","../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/mixins/id.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * SSR Safe Client Side ID attribute generation
 *
 */
var _default = {
  props: {
    id: {
      type: String,
      default: null
    }
  },
  methods: {
    safeId: function safeId() {
      var suffix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var id = this.id || this.localId_ || null;

      if (!id) {
        return null;
      }

      suffix = String(suffix).replace(/\s+/g, '_');
      return suffix ? id + '_' + suffix : id;
    }
  },
  computed: {
    localId_: function localId_() {
      if (!this.$isServer && !this.id && typeof this._uid !== 'undefined') {
        return '__BVID__' + this._uid;
      }
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/carousel/carousel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _observeDom = _interopRequireDefault(require("../../utils/observe-dom"));

var _keyCodes = _interopRequireDefault(require("../../utils/key-codes"));

var _dom = require("../../utils/dom");

var _id = _interopRequireDefault(require("../../mixins/id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Slide directional classes
var DIRECTION = {
  next: {
    dirClass: 'carousel-item-left',
    overlayClass: 'carousel-item-next'
  },
  prev: {
    dirClass: 'carousel-item-right',
    overlayClass: 'carousel-item-prev' // Fallback Transition duration (with a little buffer) in ms

  }
};
var TRANS_DURATION = 600 + 50; // Transition Event names

var TransitionEndEvents = {
  WebkitTransition: 'webkitTransitionEnd',
  MozTransition: 'transitionend',
  OTransition: 'otransitionend oTransitionEnd',
  transition: 'transitionend' // Return the browser specific transitionEnd event name

};

function getTransisionEndEvent(el) {
  for (var name in TransitionEndEvents) {
    if (el.style[name] !== undefined) {
      return TransitionEndEvents[name];
    }
  } // fallback


  return null;
}

var _default = {
  mixins: [_id.default],
  render: function render(h) {
    var _this = this; // Wrapper for slides


    var inner = h('div', {
      ref: 'inner',
      class: ['carousel-inner'],
      attrs: {
        id: this.safeId('__BV_inner_'),
        role: 'list'
      }
    }, [this.$slots.default]); // Prev and Next Controls

    var controls = h(false);

    if (this.controls) {
      controls = [h('a', {
        class: ['carousel-control-prev'],
        attrs: {
          href: '#',
          role: 'button',
          'aria-controls': this.safeId('__BV_inner_')
        },
        on: {
          click: function click(evt) {
            evt.preventDefault();
            evt.stopPropagation();

            _this.prev();
          },
          keydown: function keydown(evt) {
            var keyCode = evt.keyCode;

            if (keyCode === _keyCodes.default.SPACE || keyCode === _keyCodes.default.ENTER) {
              evt.preventDefault();
              evt.stopPropagation();

              _this.prev();
            }
          }
        }
      }, [h('span', {
        class: ['carousel-control-prev-icon'],
        attrs: {
          'aria-hidden': 'true'
        }
      }), h('span', {
        class: ['sr-only']
      }, [this.labelPrev])]), h('a', {
        class: ['carousel-control-next'],
        attrs: {
          href: '#',
          role: 'button',
          'aria-controls': this.safeId('__BV_inner_')
        },
        on: {
          click: function click(evt) {
            evt.preventDefault();
            evt.stopPropagation();

            _this.next();
          },
          keydown: function keydown(evt) {
            var keyCode = evt.keyCode;

            if (keyCode === _keyCodes.default.SPACE || keyCode === _keyCodes.default.ENTER) {
              evt.preventDefault();
              evt.stopPropagation();

              _this.next();
            }
          }
        }
      }, [h('span', {
        class: ['carousel-control-next-icon'],
        attrs: {
          'aria-hidden': 'true'
        }
      }), h('span', {
        class: ['sr-only']
      }, [this.labelNext])])];
    } // Indicators


    var indicators = h('ol', {
      class: ['carousel-indicators'],
      directives: [{
        name: 'show',
        rawName: 'v-show',
        value: this.indicators,
        expression: 'indicators'
      }],
      attrs: {
        id: this.safeId('__BV_indicators_'),
        'aria-hidden': this.indicators ? 'false' : 'true',
        'aria-label': this.labelIndicators,
        'aria-owns': this.safeId('__BV_inner_')
      }
    }, this.slides.map(function (slide, n) {
      return h('li', {
        key: 'slide_' + n,
        class: {
          active: n === _this.index
        },
        attrs: {
          role: 'button',
          id: _this.safeId('__BV_indicator_' + (n + 1) + '_'),
          tabindex: _this.indicators ? '0' : '-1',
          'aria-current': n === _this.index ? 'true' : 'false',
          'aria-label': _this.labelGotoSlide + ' ' + (n + 1),
          'aria-describedby': _this.slides[n].id || null,
          'aria-controls': _this.safeId('__BV_inner_')
        },
        on: {
          click: function click(evt) {
            _this.setSlide(n);
          },
          keydown: function keydown(evt) {
            var keyCode = evt.keyCode;

            if (keyCode === _keyCodes.default.SPACE || keyCode === _keyCodes.default.ENTER) {
              evt.preventDefault();
              evt.stopPropagation();

              _this.setSlide(n);
            }
          }
        }
      });
    })); // Return the carousel

    return h('div', {
      class: ['carousel', 'slide'],
      style: {
        background: this.background
      },
      attrs: {
        role: 'region',
        id: this.safeId(),
        'aria-busy': this.isSliding ? 'true' : 'false'
      },
      on: {
        mouseenter: this.pause,
        mouseleave: this.restart,
        focusin: this.pause,
        focusout: this.restart,
        keydown: function keydown(evt) {
          var keyCode = evt.keyCode;

          if (keyCode === _keyCodes.default.LEFT || keyCode === _keyCodes.default.RIGHT) {
            evt.preventDefault();
            evt.stopPropagation();

            _this[keyCode === _keyCodes.default.LEFT ? 'prev' : 'next']();
          }
        }
      }
    }, [inner, controls, indicators]);
  },
  data: function data() {
    return {
      index: this.value || 0,
      isSliding: false,
      intervalId: null,
      transitionEndEvent: null,
      slides: [],
      direction: null
    };
  },
  props: {
    labelPrev: {
      type: String,
      default: 'Previous Slide'
    },
    labelNext: {
      type: String,
      default: 'Next Slide'
    },
    labelGotoSlide: {
      type: String,
      default: 'Goto Slide'
    },
    labelIndicators: {
      type: String,
      default: 'Select a slide to display'
    },
    interval: {
      type: Number,
      default: 5000
    },
    indicators: {
      type: Boolean,
      default: false
    },
    controls: {
      type: Boolean,
      default: false
    },
    imgWidth: {
      // Sniffed by carousel-slide
      type: [Number, String]
    },
    imgHeight: {
      // Sniffed by carousel-slide
      type: [Number, String]
    },
    background: {
      type: String
    },
    value: {
      type: Number,
      default: 0
    }
  },
  computed: {
    isCycling: function isCycling() {
      return Boolean(this.intervalId);
    }
  },
  methods: {
    // Set slide
    setSlide: function setSlide(slide) {
      var _this2 = this; // Don't animate when page is not visible


      if (typeof document !== 'undefined' && document.visibilityState && document.hidden) {
        return;
      }

      var len = this.slides.length; // Don't do anything if nothing to slide to

      if (len === 0) {
        return;
      } // Don't change slide while transitioning, wait until transition is done


      if (this.isSliding) {
        // Schedule slide after sliding complete
        this.$once('sliding-end', function () {
          return _this2.setSlide(slide);
        });
        return;
      } // Make sure we have an integer (you never know!)


      slide = Math.floor(slide); // Set new slide index. Wrap around if necessary

      this.index = slide >= len ? 0 : slide >= 0 ? slide : len - 1;
    },
    // Previous slide
    prev: function prev() {
      this.direction = 'prev';
      this.setSlide(this.index - 1);
    },
    // Next slide
    next: function next() {
      this.direction = 'next';
      this.setSlide(this.index + 1);
    },
    // Pause auto rotation
    pause: function pause() {
      if (this.isCycling) {
        clearInterval(this.intervalId);
        this.intervalId = null;

        if (this.slides[this.index]) {
          // Make current slide focusable for screen readers
          this.slides[this.index].tabIndex = 0;
        }
      }
    },
    // Start auto rotate slides
    start: function start() {
      var _this3 = this; // Don't start if no interval, or if we are already running


      if (!this.interval || this.isCycling) {
        return;
      }

      this.slides.forEach(function (slide) {
        slide.tabIndex = -1;
      });
      this.intervalId = setInterval(function () {
        _this3.next();
      }, Math.max(1000, this.interval));
    },
    // Re-Start auto rotate slides when focus/hover leaves the carousel
    restart: function restart(evt) {
      if (!this.$el.contains(document.activeElement)) {
        this.start();
      }
    },
    // Update slide list
    updateSlides: function updateSlides() {
      this.pause(); // Get all slides as DOM elements

      this.slides = (0, _dom.selectAll)('.carousel-item', this.$refs.inner);
      var numSlides = this.slides.length; // Keep slide number in range

      var index = Math.max(0, Math.min(Math.floor(this.index), numSlides - 1));
      this.slides.forEach(function (slide, idx) {
        var n = idx + 1;

        if (idx === index) {
          (0, _dom.addClass)(slide, 'active');
        } else {
          (0, _dom.removeClass)(slide, 'active');
        }

        (0, _dom.setAttr)(slide, 'aria-current', idx === index ? 'true' : 'false');
        (0, _dom.setAttr)(slide, 'aria-posinset', String(n));
        (0, _dom.setAttr)(slide, 'aria-setsize', String(numSlides));
        slide.tabIndex = -1;
      }); // Set slide as active

      this.setSlide(index);
      this.start();
    },
    calcDirection: function calcDirection() {
      var direction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var curIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var nextIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      if (!direction) {
        return nextIndex > curIndex ? DIRECTION.next : DIRECTION.prev;
      }

      return DIRECTION[direction];
    }
  },
  watch: {
    value: function value(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.setSlide(newVal);
      }
    },
    interval: function interval(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }

      if (!newVal) {
        // Pausing slide show
        this.pause();
      } else {
        // Restarting or Changing interval
        this.pause();
        this.start();
      }
    },
    index: function index(val, oldVal) {
      var _this4 = this;

      if (val === oldVal || this.isSliding) {
        return;
      } // Determine sliding direction


      var direction = this.calcDirection(this.direction, oldVal, val); // Determine current and next slides

      var currentSlide = this.slides[oldVal];
      var nextSlide = this.slides[val]; // Don't do anything if there aren't any slides to slide to

      if (!currentSlide || !nextSlide) {
        return;
      } // Start animating


      this.isSliding = true;
      this.$emit('sliding-start', val); // Update v-model

      this.$emit('input', this.index);
      nextSlide.classList.add(direction.overlayClass); // Trigger a reflow of next slide

      (0, _dom.reflow)(nextSlide);
      (0, _dom.addClass)(currentSlide, direction.dirClass);
      (0, _dom.addClass)(nextSlide, direction.dirClass); // Transition End handler

      var called = false;
      /* istanbul ignore next: dificult to test */

      var onceTransEnd = function onceTransEnd(evt) {
        if (called) {
          return;
        }

        called = true;

        if (_this4.transitionEndEvent) {
          var events = _this4.transitionEndEvent.split(/\s+/);

          events.forEach(function (event) {
            (0, _dom.eventOff)(currentSlide, event, onceTransEnd);
          });
        }

        _this4._animationTimeout = null;
        (0, _dom.removeClass)(nextSlide, direction.dirClass);
        (0, _dom.removeClass)(nextSlide, direction.overlayClass);
        (0, _dom.addClass)(nextSlide, 'active');
        (0, _dom.removeClass)(currentSlide, 'active');
        (0, _dom.removeClass)(currentSlide, direction.dirClass);
        (0, _dom.removeClass)(currentSlide, direction.overlayClass);
        (0, _dom.setAttr)(currentSlide, 'aria-current', 'false');
        (0, _dom.setAttr)(nextSlide, 'aria-current', 'true');
        (0, _dom.setAttr)(currentSlide, 'aria-hidden', 'true');
        (0, _dom.setAttr)(nextSlide, 'aria-hidden', 'false');
        currentSlide.tabIndex = -1;
        nextSlide.tabIndex = -1;

        if (!_this4.isCycling) {
          // Focus the next slide for screen readers if not in play mode
          nextSlide.tabIndex = 0;

          _this4.$nextTick(function () {
            nextSlide.focus();
          });
        }

        _this4.isSliding = false;
        _this4.direction = null; // Notify ourselves that we're done sliding (slid)

        _this4.$nextTick(function () {
          return _this4.$emit('sliding-end', val);
        });
      }; // Clear transition classes after transition ends


      if (this.transitionEndEvent) {
        var events = this.transitionEndEvent.split(/\s+/);
        events.forEach(function (event) {
          (0, _dom.eventOn)(currentSlide, event, onceTransEnd);
        });
      } // Fallback to setTimeout


      this._animationTimeout = setTimeout(onceTransEnd, TRANS_DURATION);
    }
  },
  created: function created() {
    // Create private non-reactive props
    this._animationTimeout = null;
  },
  mounted: function mounted() {
    // Cache current browser transitionend event name
    this.transitionEndEvent = getTransisionEndEvent(this.$el) || null; // Get all slides

    this.updateSlides(); // Observe child changes so we can update slide list

    (0, _observeDom.default)(this.$refs.inner, this.updateSlides.bind(this), {
      subtree: false,
      childList: true,
      attributes: true,
      attributeFilter: ['id']
    });
  },

  /* istanbul ignore next: dificult to test */
  beforeDestroy: function beforeDestroy() {
    clearInterval(this.intervalId);
    clearTimeout(this._animationTimeout);
    this.intervalId = null;
    this._animationTimeout = null;
  }
};
exports.default = _default;
},{"../../utils/observe-dom":"node_modules/bootstrap-vue/es/utils/observe-dom.js","../../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js"}],"node_modules/bootstrap-vue/es/components/image/img.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

// Blank image with fill template
var BLANK_TEMPLATE = '<svg width="%{w}" height="%{h}" ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'viewBox="0 0 %{w} %{h}" preserveAspectRatio="none">' + '<rect width="100%" height="100%" style="fill:%{f};"></rect>' + '</svg>';

function makeBlankImgSrc(width, height, color) {
  var src = encodeURIComponent(BLANK_TEMPLATE.replace('%{w}', String(width)).replace('%{h}', String(height)).replace('%{f}', color));
  return 'data:image/svg+xml;charset=UTF-8,' + src;
}

var props = {
  src: {
    type: String,
    default: null
  },
  alt: {
    type: String,
    default: null
  },
  width: {
    type: [Number, String],
    default: null
  },
  height: {
    type: [Number, String],
    default: null
  },
  block: {
    type: Boolean,
    default: false
  },
  fluid: {
    type: Boolean,
    default: false
  },
  fluidGrow: {
    // Gives fluid images class `w-100` to make them grow to fit container
    type: Boolean,
    default: false
  },
  rounded: {
    // rounded can be:
    //   false: no rounding of corners
    //   true: slightly rounded corners
    //   'top': top corners rounded
    //   'right': right corners rounded
    //   'bottom': bottom corners rounded
    //   'left': left corners rounded
    //   'circle': circle/oval
    //   '0': force rounding off
    type: [Boolean, String],
    default: false
  },
  thumbnail: {
    type: Boolean,
    default: false
  },
  left: {
    type: Boolean,
    default: false
  },
  right: {
    type: Boolean,
    default: false
  },
  center: {
    type: Boolean,
    default: false
  },
  blank: {
    type: Boolean,
    default: false
  },
  blankColor: {
    type: String,
    default: 'transparent'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class;

    var props = _ref.props,
        data = _ref.data;
    var src = props.src;
    var width = parseInt(props.width, 10) ? parseInt(props.width, 10) : null;
    var height = parseInt(props.height, 10) ? parseInt(props.height, 10) : null;
    var align = null;
    var block = props.block;

    if (props.blank) {
      if (!height && Boolean(width)) {
        height = width;
      } else if (!width && Boolean(height)) {
        width = height;
      }

      if (!width && !height) {
        width = 1;
        height = 1;
      } // Make a blank SVG image


      src = makeBlankImgSrc(width, height, props.blankColor || 'transparent');
    }

    if (props.left) {
      align = 'float-left';
    } else if (props.right) {
      align = 'float-right';
    } else if (props.center) {
      align = 'mx-auto';
      block = true;
    }

    return h('img', (0, _vueFunctionalDataMerge.mergeData)(data, {
      attrs: {
        'src': src,
        'alt': props.alt,
        'width': width ? String(width) : null,
        'height': height ? String(height) : null
      },
      class: (_class = {
        'img-thumbnail': props.thumbnail,
        'img-fluid': props.fluid || props.fluidGrow,
        'w-100': props.fluidGrow,
        'rounded': props.rounded === '' || props.rounded === true
      }, _defineProperty(_class, 'rounded-' + props.rounded, typeof props.rounded === 'string' && props.rounded !== ''), _defineProperty(_class, align, Boolean(align)), _defineProperty(_class, 'd-block', block), _class)
    }));
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/utils/warn.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Log a warning message to the console with bootstrap-vue formatting sugar.
 * @param {string} message
 */

/* istanbul ignore next */
function warn(message) {
  console.warn("[Bootstrap-Vue warn]: " + message);
}

var _default = warn;
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/carousel/carousel-slide.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _img = _interopRequireDefault(require("../image/img"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _id = _interopRequireDefault(require("../../mixins/id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default2 = {
  components: {
    bImg: _img.default
  },
  mixins: [_id.default],
  render: function render(h) {
    var $slots = this.$slots;
    var img = $slots.img;

    if (!img && (this.imgSrc || this.imgBlank)) {
      img = h('b-img', {
        props: {
          fluidGrow: true,
          block: true,
          src: this.imgSrc,
          blank: this.imgBlank,
          blankColor: this.imgBlankColor,
          width: this.computedWidth,
          height: this.computedHeight,
          alt: this.imgAlt
        }
      });
    }

    var content = h(this.contentTag, {
      class: this.contentClasses
    }, [this.caption ? h(this.captionTag, {
      domProps: {
        innerHTML: this.caption
      }
    }) : h(false), this.text ? h(this.textTag, {
      domProps: {
        innerHTML: this.text
      }
    }) : h(false), $slots.default]);
    return h('div', {
      class: ['carousel-item'],
      style: {
        background: this.background
      },
      attrs: {
        id: this.safeId(),
        role: 'listitem'
      }
    }, [img, content]);
  },
  props: {
    imgSrc: {
      type: String,
      default: function _default() {
        if (this && this.src) {
          // Deprecate src
          (0, _warn.default)("b-carousel-slide: prop 'src' has been deprecated. Use 'img-src' instead");
          return this.src;
        }

        return null;
      }
    },
    src: {
      // Deprecated: use img-src instead
      type: String
    },
    imgAlt: {
      type: String
    },
    imgWidth: {
      type: [Number, String]
    },
    imgHeight: {
      type: [Number, String]
    },
    imgBlank: {
      type: Boolean,
      default: false
    },
    imgBlankColor: {
      type: String,
      default: 'transparent'
    },
    contentVisibleUp: {
      type: String
    },
    contentTag: {
      type: String,
      default: 'div'
    },
    caption: {
      type: String
    },
    captionTag: {
      type: String,
      default: 'h3'
    },
    text: {
      type: String
    },
    textTag: {
      type: String,
      default: 'p'
    },
    background: {
      type: String
    }
  },
  computed: {
    contentClasses: function contentClasses() {
      return ['carousel-caption', this.contentVisibleUp ? 'd-none' : '', this.contentVisibleUp ? 'd-' + this.contentVisibleUp + '-block' : ''];
    },
    computedWidth: function computedWidth() {
      // Use local width, or try parent width
      return this.imgWidth || this.$parent.imgWidth;
    },
    computedHeight: function computedHeight() {
      // Use local height, or try parent height
      return this.imgHeight || this.$parent.imgHeight;
    }
  }
};
exports.default = _default2;
},{"../image/img":"node_modules/bootstrap-vue/es/components/image/img.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js"}],"node_modules/bootstrap-vue/es/components/carousel/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _carousel = _interopRequireDefault(require("./carousel"));

var _carouselSlide = _interopRequireDefault(require("./carousel-slide"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bCarousel: _carousel.default,
  bCarouselSlide: _carouselSlide.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./carousel":"node_modules/bootstrap-vue/es/components/carousel/carousel.js","./carousel-slide":"node_modules/bootstrap-vue/es/components/carousel/carousel-slide.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/layout/container.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  },
  fluid: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: {
        'container': !props.fluid,
        'container-fluid': props.fluid
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/layout/row.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _array = require("../../utils/array");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var COMMON_ALIGNMENT = ['start', 'end', 'center'];
var props = {
  tag: {
    type: String,
    default: 'div'
  },
  noGutters: {
    type: Boolean,
    default: false
  },
  alignV: {
    type: String,
    default: null,
    validator: function validator(str) {
      return (0, _array.arrayIncludes)(COMMON_ALIGNMENT.concat(['baseline', 'stretch']), str);
    }
  },
  alignH: {
    type: String,
    default: null,
    validator: function validator(str) {
      return (0, _array.arrayIncludes)(COMMON_ALIGNMENT.concat(['between', 'around']), str);
    }
  },
  alignContent: {
    type: String,
    default: null,
    validator: function validator(str) {
      return (0, _array.arrayIncludes)(COMMON_ALIGNMENT.concat(['between', 'around', 'stretch']), str);
    }
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class;

    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'row',
      class: (_class = {
        'no-gutters': props.noGutters
      }, _defineProperty(_class, 'align-items-' + props.alignV, props.alignV), _defineProperty(_class, 'justify-content-' + props.alignH, props.alignH), _defineProperty(_class, 'align-content-' + props.alignContent, props.alignContent), _class)
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/utils/memoize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = memoize;

var _object = require("./object");

function memoize(fn) {
  var cache = (0, _object.create)(null);
  return function memoizedFn() {
    var args = JSON.stringify(arguments);
    return cache[args] = cache[args] || fn.apply(null, arguments);
  };
}
},{"./object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/utils/suffix-prop-name.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = suffixPropName;

var _upperFirst = _interopRequireDefault(require("./upper-first"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Suffix can be a falsey value so nothing is appended to string.
 * (helps when looping over props & some shouldn't change)
 * Use data last parameters to allow for currying.
 * @param {string} suffix
 * @param {string} str
 */
function suffixPropName(suffix, str) {
  return str + (suffix ? (0, _upperFirst.default)(suffix) : '');
}
},{"./upper-first":"node_modules/bootstrap-vue/es/utils/upper-first.js"}],"node_modules/bootstrap-vue/es/components/layout/col.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = exports.computeBkPtClass = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _memoize = _interopRequireDefault(require("../../utils/memoize"));

var _suffixPropName = _interopRequireDefault(require("../../utils/suffix-prop-name"));

var _object = require("../../utils/object");

var _array = require("../../utils/array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/**
 * Generates a prop object with a type of
 * [Boolean, String, Number]
 */
function boolStrNum() {
  return {
    type: [Boolean, String, Number],
    default: false
  };
}
/**
 * Generates a prop object with a type of
 * [String, Number]
 */


function strNum() {
  return {
    type: [String, Number],
    default: null
  };
}

var computeBkPtClass = (0, _memoize.default)(function computeBkPt(type, breakpoint, val) {
  var className = type;

  if (val === false || val === null || val === undefined) {
    return undefined;
  }

  if (breakpoint) {
    className += '-' + breakpoint;
  } // Handling the boolean style prop when accepting [Boolean, String, Number]
  // means Vue will not convert <b-col sm /> to sm: true for us.
  // Since the default is false, an empty string indicates the prop's presence.


  if (type === 'col' && (val === '' || val === true)) {
    // .col-md
    return className.toLowerCase();
  } // .order-md-6


  className += '-' + val;
  return className.toLowerCase();
});
exports.computeBkPtClass = computeBkPtClass;
var BREAKPOINTS = ['sm', 'md', 'lg', 'xl']; // Supports classes like: .col-sm, .col-md-6, .col-lg-auto

var breakpointCol = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
function (propMap, breakpoint) {
  return propMap[breakpoint] = boolStrNum(), propMap;
}, (0, _object.create)(null)); // Supports classes like: .offset-md-1, .offset-lg-12

var breakpointOffset = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
function (propMap, breakpoint) {
  return propMap[(0, _suffixPropName.default)(breakpoint, 'offset')] = strNum(), propMap;
}, (0, _object.create)(null)); // Supports classes like: .order-md-1, .order-lg-12

var breakpointOrder = BREAKPOINTS.reduce( // eslint-disable-next-line no-sequences
function (propMap, breakpoint) {
  return propMap[(0, _suffixPropName.default)(breakpoint, 'order')] = strNum(), propMap;
}, (0, _object.create)(null)); // For loop doesn't need to check hasOwnProperty
// when using an object created from null

var breakpointPropMap = (0, _object.assign)((0, _object.create)(null), {
  col: (0, _object.keys)(breakpointCol),
  offset: (0, _object.keys)(breakpointOffset),
  order: (0, _object.keys)(breakpointOrder)
});
var props = (0, _object.assign)({}, breakpointCol, breakpointOffset, breakpointOrder, {
  tag: {
    type: String,
    default: 'div'
  },
  // Generic flexbox .col
  col: {
    type: Boolean,
    default: false
  },
  // .col-[1-12]|auto
  cols: strNum(),
  // .offset-[1-12]
  offset: strNum(),
  // Flex ordering utility .order-[1-12]
  order: strNum(),
  alignSelf: {
    type: String,
    default: null,
    validator: function validator(str) {
      return (0, _array.arrayIncludes)(['auto', 'start', 'end', 'center', 'baseline', 'stretch'], str);
    }
  }
});
/**
 * We need ".col" to default in when no other props are passed,
 * but always render when col=true.
 */

exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _classList$push;

    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var classList = []; // Loop through `col`, `offset`, `order` breakpoint props

    for (var type in breakpointPropMap) {
      // Returns colSm, offset, offsetSm, orderMd, etc.
      var _keys = breakpointPropMap[type];

      for (var i = 0; i < _keys.length; i++) {
        // computeBkPt(col, colSm => Sm, value=[String, Number, Boolean])
        var c = computeBkPtClass(type, _keys[i].replace(type, ''), props[_keys[i]]); // If a class is returned, push it onto the array.

        if (c) {
          classList.push(c);
        }
      }
    }

    classList.push((_classList$push = {
      // Default to .col if no other classes generated nor `cols` specified.
      col: props.col || classList.length === 0 && !props.cols
    }, _defineProperty(_classList$push, 'col-' + props.cols, props.cols), _defineProperty(_classList$push, 'offset-' + props.offset, props.offset), _defineProperty(_classList$push, 'order-' + props.order, props.order), _defineProperty(_classList$push, 'align-self-' + props.alignSelf, props.alignSelf), _classList$push));
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: classList
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/memoize":"node_modules/bootstrap-vue/es/utils/memoize.js","../../utils/suffix-prop-name":"node_modules/bootstrap-vue/es/utils/suffix-prop-name.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/layout/form-row.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'form-row'
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/layout/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _container = _interopRequireDefault(require("./container"));

var _row = _interopRequireDefault(require("./row"));

var _col = _interopRequireDefault(require("./col"));

var _formRow = _interopRequireDefault(require("./form-row"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bContainer: _container.default,
  bRow: _row.default,
  bCol: _col.default,
  bFormRow: _formRow.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./container":"node_modules/bootstrap-vue/es/components/layout/container.js","./row":"node_modules/bootstrap-vue/es/components/layout/row.js","./col":"node_modules/bootstrap-vue/es/components/layout/col.js","./form-row":"node_modules/bootstrap-vue/es/components/layout/form-row.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/mixins/listen-on-root.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _array = require("../utils/array");

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

/**
 * Issue #569: collapse::toggle::state triggered too many times
 * @link https://github.com/bootstrap-vue/bootstrap-vue/issues/569
 */
var BVRL = '__BV_root_listeners__';
var _default = {
  methods: {
    /**
         * Safely register event listeners on the root Vue node.
         * While Vue automatically removes listeners for individual components,
         * when a component registers a listener on root and is destroyed,
         * this orphans a callback because the node is gone,
         * but the root does not clear the callback.
         *
         * This adds a non-reactive prop to a vm on the fly
         * in order to avoid object observation and its performance costs
         * to something that needs no reactivity.
         * It should be highly unlikely there are any naming collisions.
         * @param {string} event
         * @param {function} callback
         * @chainable
         */
    listenOnRoot: function listenOnRoot(event, callback) {
      if (!this[BVRL] || !(0, _array.isArray)(this[BVRL])) {
        this[BVRL] = [];
      }

      this[BVRL].push({
        event: event,
        callback: callback
      });
      this.$root.$on(event, callback);
      return this;
    },

    /**
         * Convenience method for calling vm.$emit on vm.$root.
         * @param {string} event
         * @param {*} args
         * @chainable
         */
    emitOnRoot: function emitOnRoot(event) {
      var _$root;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_$root = this.$root).$emit.apply(_$root, [event].concat(_toConsumableArray(args)));

      return this;
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (this[BVRL] && (0, _array.isArray)(this[BVRL])) {
      while (this[BVRL].length > 0) {
        // shift to process in order
        var _BVRL$shift = this[BVRL].shift(),
            event = _BVRL$shift.event,
            callback = _BVRL$shift.callback;

        this.$root.$off(event, callback);
      }
    }
  }
};
exports.default = _default;
},{"../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/collapse/collapse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _listenOnRoot = _interopRequireDefault(require("../../mixins/listen-on-root"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Events we emit on $root
var EVENT_STATE = 'bv::collapse::state';
var EVENT_ACCORDION = 'bv::collapse::accordion'; // Events we listen to on $root

var EVENT_TOGGLE = 'bv::toggle::collapse';
var _default = {
  mixins: [_listenOnRoot.default],
  render: function render(h) {
    var content = h(this.tag, {
      class: this.classObject,
      directives: [{
        name: 'show',
        value: this.show
      }],
      attrs: {
        id: this.id || null
      },
      on: {
        click: this.clickHandler
      }
    }, [this.$slots.default]);
    return h('transition', {
      props: {
        enterClass: '',
        enterActiveClass: 'collapsing',
        enterToClass: '',
        leaveClass: '',
        leaveActiveClass: 'collapsing',
        leaveToClass: ''
      },
      on: {
        enter: this.onEnter,
        afterEnter: this.onAfterEnter,
        leave: this.onLeave,
        afterLeave: this.onAfterLeave
      }
    }, [content]);
  },
  data: function data() {
    return {
      show: this.visible,
      transitioning: false
    };
  },
  model: {
    prop: 'visible',
    event: 'input'
  },
  props: {
    id: {
      type: String,
      required: true
    },
    isNav: {
      type: Boolean,
      default: false
    },
    accordion: {
      type: String,
      default: null
    },
    visible: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: 'div'
    }
  },
  watch: {
    visible: function visible(newVal) {
      if (newVal !== this.show) {
        this.show = newVal;
      }
    },
    show: function show(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.emitState();
      }
    }
  },
  computed: {
    classObject: function classObject() {
      return {
        'navbar-collapse': this.isNav,
        'collapse': !this.transitioning,
        'show': this.show && !this.transitioning
      };
    }
  },
  methods: {
    toggle: function toggle() {
      this.show = !this.show;
    },
    onEnter: function onEnter(el) {
      el.style.height = 0;
      (0, _dom.reflow)(el);
      el.style.height = el.scrollHeight + 'px';
      this.transitioning = true; // This should be moved out so we can add cancellable events

      this.$emit('show');
    },
    onAfterEnter: function onAfterEnter(el) {
      el.style.height = null;
      this.transitioning = false;
      this.$emit('shown');
    },
    onLeave: function onLeave(el) {
      el.style.height = 'auto';
      el.style.display = 'block';
      el.style.height = el.getBoundingClientRect().height + 'px';
      (0, _dom.reflow)(el);
      this.transitioning = true;
      el.style.height = 0; // This should be moved out so we can add cancellable events

      this.$emit('hide');
    },
    onAfterLeave: function onAfterLeave(el) {
      el.style.height = null;
      this.transitioning = false;
      this.$emit('hidden');
    },
    emitState: function emitState() {
      this.$emit('input', this.show); // Let v-b-toggle know the state of this collapse

      this.$root.$emit(EVENT_STATE, this.id, this.show);

      if (this.accordion && this.show) {
        // Tell the other collapses in this accordion to close
        this.$root.$emit(EVENT_ACCORDION, this.id, this.accordion);
      }
    },
    clickHandler: function clickHandler(evt) {
      // If we are in a nav/navbar, close the collapse when non-disabled link clicked
      var el = evt.target;

      if (!this.isNav || !el || getComputedStyle(this.$el).display !== 'block') {
        return;
      }

      if ((0, _dom.hasClass)(el, 'nav-link') || (0, _dom.hasClass)(el, 'dropdown-item')) {
        this.show = false;
      }
    },
    handleToggleEvt: function handleToggleEvt(target) {
      if (target !== this.id) {
        return;
      }

      this.toggle();
    },
    handleAccordionEvt: function handleAccordionEvt(openedId, accordion) {
      if (!this.accordion || accordion !== this.accordion) {
        return;
      }

      if (openedId === this.id) {
        // Open this collapse if not shown
        if (!this.show) {
          this.toggle();
        }
      } else {
        // Close this collapse if shown
        if (this.show) {
          this.toggle();
        }
      }
    },
    handleResize: function handleResize() {
      // Handler for orientation/resize to set collapsed state in nav/navbar
      this.show = getComputedStyle(this.$el).display === 'block';
    }
  },
  created: function created() {
    // Listen for toggle events to open/close us
    this.listenOnRoot(EVENT_TOGGLE, this.handleToggleEvt); // Listen to otehr collapses for accordion events

    this.listenOnRoot(EVENT_ACCORDION, this.handleAccordionEvt);
  },
  mounted: function mounted() {
    if (this.isNav && typeof document !== 'undefined') {
      // Set up handlers
      window.addEventListener('resize', this.handleResize, false);
      window.addEventListener('orientationchange', this.handleResize, false);
      this.handleResize();
    }

    this.emitState();
  },
  beforeDestroy: function beforeDestroy() {
    if (this.isNav && typeof document !== 'undefined') {
      window.removeEventListener('resize', this.handleResize, false);
      window.removeEventListener('orientationchange', this.handleResize, false);
    }
  }
};
exports.default = _default;
},{"../../mixins/listen-on-root":"node_modules/bootstrap-vue/es/mixins/listen-on-root.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/utils/target.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.unbindTargets = exports.bindTargets = void 0;

var _object = require("../utils/object");

var allListenTypes = {
  hover: true,
  click: true,
  focus: true
};
var BVBoundListeners = '__BV_boundEventListeners__';

var bindTargets = function bindTargets(vnode, binding, listenTypes, fn) {
  var targets = (0, _object.keys)(binding.modifiers || {}).filter(function (t) {
    return !allListenTypes[t];
  });

  if (binding.value) {
    targets.push(binding.value);
  }

  var listener = function listener() {
    fn({
      targets: targets,
      vnode: vnode
    });
  };

  (0, _object.keys)(allListenTypes).forEach(function (type) {
    if (listenTypes[type] || binding.modifiers[type]) {
      vnode.elm.addEventListener(type, listener);
      var boundListeners = vnode.elm[BVBoundListeners] || {};
      boundListeners[type] = boundListeners[type] || [];
      boundListeners[type].push(listener);
      vnode.elm[BVBoundListeners] = boundListeners;
    }
  }); // Return the list of targets

  return targets;
};

exports.bindTargets = bindTargets;

var unbindTargets = function unbindTargets(vnode, binding, listenTypes) {
  (0, _object.keys)(allListenTypes).forEach(function (type) {
    if (listenTypes[type] || binding.modifiers[type]) {
      var boundListeners = vnode.elm[BVBoundListeners] && vnode.elm[BVBoundListeners][type];

      if (boundListeners) {
        boundListeners.forEach(function (listener) {
          return vnode.elm.removeEventListener(type, listener);
        });
        delete vnode.elm[BVBoundListeners][type];
      }
    }
  });
};

exports.unbindTargets = unbindTargets;
var _default = bindTargets;
exports.default = _default;
},{"../utils/object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/directives/toggle/toggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _target = _interopRequireDefault(require("../../utils/target"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Are we client side?
var inBrowser = typeof window !== 'undefined'; // target listen types

var listenTypes = {
  click: true // Property key for handler storage

};
var BVT = '__BV_toggle__'; // Emitted Control Event for collapse (emitted to collapse)

var EVENT_TOGGLE = 'bv::toggle::collapse'; // Listen to Event for toggle state update (Emited by collapse)

var EVENT_STATE = 'bv::collapse::state';
var _default = {
  bind: function bind(el, binding, vnode) {
    var targets = (0, _target.default)(vnode, binding, listenTypes, function (_ref) {
      var targets = _ref.targets,
          vnode = _ref.vnode;
      targets.forEach(function (target) {
        vnode.context.$root.$emit(EVENT_TOGGLE, target);
      });
    });

    if (inBrowser && vnode.context && targets.length > 0) {
      // Add aria attributes to element
      (0, _dom.setAttr)(el, 'aria-controls', targets.join(' '));
      (0, _dom.setAttr)(el, 'aria-expanded', 'false');

      if (el.tagName !== 'BUTTON') {
        // If element is not a button, we add `role="button"` for accessibility
        (0, _dom.setAttr)(el, 'role', 'button');
      } // Toggle state hadnler, stored on element


      el[BVT] = function toggleDirectiveHandler(id, state) {
        if (targets.indexOf(id) !== -1) {
          // Set aria-expanded state
          (0, _dom.setAttr)(el, 'aria-expanded', state ? 'true' : 'false'); // Set/Clear 'collapsed' class state

          if (state) {
            (0, _dom.removeClass)(el, 'collapsed');
          } else {
            (0, _dom.addClass)(el, 'collapsed');
          }
        }
      }; // Listen for toggle state changes


      vnode.context.$root.$on(EVENT_STATE, el[BVT]);
    }
  },
  unbind: function unbind(el, binding, vnode) {
    if (el[BVT]) {
      // Remove our $root listener
      vnode.context.$root.$off(EVENT_STATE, el[BVT]);
      el[BVT] = null;
    }
  }
};
exports.default = _default;
},{"../../utils/target":"node_modules/bootstrap-vue/es/utils/target.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/directives/toggle/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toggle = _interopRequireDefault(require("./toggle"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directives = {
  bToggle: _toggle.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerDirectives)(Vue, directives);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./toggle":"node_modules/bootstrap-vue/es/directives/toggle/toggle.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/collapse/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _collapse = _interopRequireDefault(require("./collapse"));

var _toggle = _interopRequireDefault(require("../../directives/toggle"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bCollapse: _collapse.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
    Vue.use(_toggle.default);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./collapse":"node_modules/bootstrap-vue/es/components/collapse/collapse.js","../../directives/toggle":"node_modules/bootstrap-vue/es/directives/toggle/index.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/popper.js/dist/esm/popper.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.6
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;

for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }

    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;
/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}
/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */


function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  } // NOTE: 1 DOM access here


  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}
/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */


function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }

  return element.parentNode || element.host;
}
/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */


function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;

    case '#document':
      return element.body;
  } // Firefox want us to check `-x` and `-y` variations as well


  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

function isIE(version) {
  if (version === 11) {
    return isIE11;
  }

  if (version === 10) {
    return isIE10;
  }

  return isIE11 || isIE10;
}
/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */


function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here

  var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent

  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  } // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...


  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }

  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}
/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */


function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}
/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */


function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  } // Here we make sure to give as "start" the element that comes first in the DOM


  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1; // Get common ancestor container

  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  } // one of the nodes is inside shadowDOM, find which one


  var element1root = getRoot(element1);

  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}
/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */


function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}
/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */


function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}
/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */


function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);
  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */


function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}
/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */


function getBoundingClientRect(element) {
  var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11

  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  }; // subtract scrollbar size from sizes

  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;
  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons

  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');
    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);
  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10); // In cases where the parent is fixed, we must ignore negative scroll in offset calc

  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.

  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);
    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them

    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);
  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };
  return getClientRect(offset);
}
/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */


function isFixed(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }

  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }

  return isFixed(getParentNode(element));
}
/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */


function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }

  var el = element.parentElement;

  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }

  return el || document.documentElement;
}
/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */


function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // NOTE: 1 DOM access here

  var boundaries = {
    top: 0,
    left: 0
  };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference); // Handle viewport case

  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;

    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));

      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation

    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  } // Add paddings


  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;
  return width * height;
}
/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };
  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });
  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });
  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
  var variation = placement.split('-')[1];
  return computedPlacement + (variation ? '-' + variation : '');
}
/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */


function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}
/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */


function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}
/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */


function getOppositePlacement(placement) {
  var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */


function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0]; // Get popper node sizes

  var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object

  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  }; // depending by the popper placement we have to compute its offsets slightly differently

  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;

  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}
/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */


function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  } // use `filter` to obtain the same behavior of `find`


  return arr.filter(check)[0];
}
/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */


function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  } // use `find` + `indexOf` if `findIndex` isn't supported


  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}
/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */


function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }

    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation

    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);
      data = fn(data, modifier);
    }
  });
  return data;
}
/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */


function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  }; // compute reference element offsets

  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed); // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value

  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding); // store the computed placement inside `originalPlacement`

  data.originalPlacement = data.placement;
  data.positionFixed = this.options.positionFixed; // compute the popper offsets

  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'; // run the modifiers

  data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback

  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}
/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */


function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}
/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */


function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;

    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }

  return null;
}
/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */


function destroy() {
  this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled

  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners(); // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it

  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }

  return this;
}
/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */


function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, {
    passive: true
  });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }

  scrollParents.push(target);
}
/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */


function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, {
    passive: true
  }); // Scroll event listener on scroll parents

  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;
  return state;
}
/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */


function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}
/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */


function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound); // Remove scroll event listener on scroll parents

  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  }); // Reset state

  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}
/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */


function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}
/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */


function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}
/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */


function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = ''; // add unit if the value is numeric and is one of the following

    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }

    element.style[prop] = styles[prop] + unit;
  });
}
/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */


function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];

    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */


function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element

  setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties

  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}
/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */


function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed); // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value

  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
  popper.setAttribute('x-placement', placement); // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations

  setStyles(popper, {
    position: options.positionFixed ? 'fixed' : 'absolute'
  });
  return options;
}
/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */


function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthOddness = reference.width % 2 === popper.width % 2;
  var bothOddWidth = reference.width % 2 === 1 && popper.width % 2 === 1;

  var noRound = function noRound(v) {
    return v;
  };

  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthOddness ? Math.round : Math.floor;
  var verticalToInteger = !shouldRound ? noRound : Math.round;
  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;

  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }

  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent); // Styles

  var styles = {
    position: popper.position
  };
  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right'; // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed

  var prefixedProperty = getSupportedPropertyName('transform'); // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.

  var left = void 0,
      top = void 0;

  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }

  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }

  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  } // Attributes


  var attributes = {
    'x-placement': data.placement
  }; // Update `data` attributes, styles and arrowStyles

  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
  return data;
}
/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */


function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });
  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';

    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }

  return isRequired;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function arrow(data, options) {
  var _data$offsets$arrow; // arrow depends on keepTogether in order to work


  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector

  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier

    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len]; //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //
  // top/left side

  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  } // bottom/right side


  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }

  data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper

  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available

  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper

  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
  return data;
}
/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */


function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }

  return variation;
}
/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */


var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']; // Get rid of `auto` `auto-start` and `auto-end`

var validPlacements = placements.slice(3);
/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';
  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;

    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;

    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;

    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);
    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here

    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required

    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : ''); // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future

      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }

  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}
/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */


function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2]; // If it's not a number it's an operator, I guess

  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;

    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;

      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;

    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }

    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}
/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */


function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one

  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)

  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  }); // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space

  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  } // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.


  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]; // Convert the values with units to absolute pixels to allow our computations

  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, []) // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  }); // Loop trough the offsets arrays and execute the operations

  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */


function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var basePlacement = placement.split('-')[0];
  var offsets = void 0;

  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken

  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  } // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself


  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification

  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];
  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed); // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed

  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;
  options.boundaries = boundaries;
  var order = options.priority;
  var popper = data.offsets.popper;
  var check = {
    primary: function primary(placement) {
      var value = popper[placement];

      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }

      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];

      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }

      return defineProperty({}, mainSide, value);
    }
  };
  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });
  data.offsets.popper = popper;
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1]; // if shift shiftvariation is specified, run the modifier

  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;
    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';
    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };
    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);
  return data;
}
/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */


var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: offset,

    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: preventOverflow,

    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],

    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,

    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: arrow,

    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: flip,

    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',

    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,

    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,

    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,

    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: computeStyle,

    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,

    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',

    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: applyStyle,

    /** @prop {Function} */
    onLoad: applyStyleOnLoad,

    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};
/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};
/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */
// Utils
// Methods

var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    }; // make update() debounced, so that it only runs at most once-per-tick


    this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it

    this.options = _extends({}, Popper.Defaults, options); // init state

    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    }; // get reference and popper elements (allow jQuery wrappers)

    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options

    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    }); // Refactoring modifiers' list (Object => Array)

    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    }) // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    }); // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    }); // fire the first update to position the popper in the right place

    this.update();
    var eventsEnabled = this.options.eventsEnabled;

    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  } // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }
    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();
/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;
var _default = Popper;
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/mixins/clickout.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  mounted: function mounted() {
    if (typeof document !== 'undefined') {
      document.documentElement.addEventListener('click', this._clickOutListener);
    }
  },
  beforeDestroy: function beforeDestroy() {
    if (typeof document !== 'undefined') {
      document.documentElement.removeEventListener('click', this._clickOutListener);
    }
  },
  methods: {
    _clickOutListener: function _clickOutListener(e) {
      if (!this.$el.contains(e.target)) {
        if (this.clickOutListener) {
          this.clickOutListener();
        }
      }
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/utils/bv-event.class.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _object = require("../utils/object");

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var BvEvent = function () {
  function BvEvent(type) {
    var eventInit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, BvEvent); // Start by emulating native Event constructor.


    if (!type) {
      throw new TypeError('Failed to construct \'' + this.constructor.name + '\'. 1 argument required, ' + arguments.length + ' given.');
    } // Assign defaults first, the eventInit,
    // and the type last so it can't be overwritten.


    (0, _object.assign)(this, BvEvent.defaults(), eventInit, {
      type: type
    }); // Freeze some props as readonly, but leave them enumerable.

    (0, _object.defineProperties)(this, {
      type: (0, _object.readonlyDescriptor)(),
      cancelable: (0, _object.readonlyDescriptor)(),
      nativeEvent: (0, _object.readonlyDescriptor)(),
      target: (0, _object.readonlyDescriptor)(),
      relatedTarget: (0, _object.readonlyDescriptor)(),
      vueTarget: (0, _object.readonlyDescriptor)()
    }); // Create a private variable using closure scoping.

    var defaultPrevented = false; // Recreate preventDefault method. One way setter.

    this.preventDefault = function preventDefault() {
      if (this.cancelable) {
        defaultPrevented = true;
      }
    }; // Create 'defaultPrevented' publicly accessible prop
    // that can only be altered by the preventDefault method.


    (0, _object.defineProperty)(this, 'defaultPrevented', {
      enumerable: true,
      get: function get() {
        return defaultPrevented;
      }
    });
  }

  _createClass(BvEvent, null, [{
    key: 'defaults',
    value: function defaults() {
      return {
        type: '',
        cancelable: true,
        nativeEvent: null,
        target: null,
        relatedTarget: null,
        vueTarget: null
      };
    }
  }]);

  return BvEvent;
}();

var _default = BvEvent;
exports.default = _default;
},{"../utils/object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/mixins/dropdown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popper = _interopRequireDefault(require("popper.js"));

var _clickout = _interopRequireDefault(require("./clickout"));

var _listenOnRoot = _interopRequireDefault(require("./listen-on-root"));

var _array = require("../utils/array");

var _object = require("../utils/object");

var _keyCodes = _interopRequireDefault(require("../utils/key-codes"));

var _bvEvent = _interopRequireDefault(require("../utils/bv-event.class"));

var _warn = _interopRequireDefault(require("../utils/warn"));

var _dom = require("../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Return an Array of visible items
function filterVisible(els) {
  return (els || []).filter(_dom.isVisible);
} // Dropdown item CSS selectors
// TODO: .dropdown-form handling


var ITEM_SELECTOR = '.dropdown-item:not(.disabled):not([disabled])'; // Popper attachment positions

var AttachmentMap = {
  // DropUp Left Align
  TOP: 'top-start',
  // DropUp Right Align
  TOPEND: 'top-end',
  // Dropdown left Align
  BOTTOM: 'bottom-start',
  // Dropdown Right Align
  BOTTOMEND: 'bottom-end'
};
var _default2 = {
  mixins: [_clickout.default, _listenOnRoot.default],
  props: {
    disabled: {
      type: Boolean,
      default: false
    },
    text: {
      // Button label
      type: String,
      default: ''
    },
    dropup: {
      // place on top if possible
      type: Boolean,
      default: false
    },
    right: {
      // Right align menu (default is left align)
      type: Boolean,
      default: false
    },
    offset: {
      // Number of pixels to offset menu, or a CSS unit value (i.e. 1px, 1rem, etc)
      type: [Number, String],
      default: 0
    },
    noFlip: {
      // Disable auto-flipping of menu from bottom<=>top
      type: Boolean,
      default: false
    },
    popperOpts: {
      type: Object,
      default: function _default() {}
    }
  },
  data: function data() {
    return {
      visible: false,
      inNavbar: null,
      visibleChangePrevented: false
    };
  },
  created: function created() {
    // Create non-reactive property
    this._popper = null;
  },
  mounted: function mounted() {
    // To keep one dropdown opened on page
    this.listenOnRoot('bv::dropdown::shown', this.rootCloseListener); // Hide when clicked on links

    this.listenOnRoot('clicked::link', this.rootCloseListener); // Use new namespaced events

    this.listenOnRoot('bv::link::clicked', this.rootCloseListener);
  },

  /* istanbul ignore next: not easy to test */
  deactivated: function deactivated() {
    // In case we are inside a `<keep-alive>`
    this.visible = false;
    this.setTouchStart(false);
    this.removePopper();
  },

  /* istanbul ignore next: not easy to test */
  beforeDestroy: function beforeDestroy() {
    this.visible = false;
    this.setTouchStart(false);
    this.removePopper();
  },
  watch: {
    visible: function visible(newValue, oldValue) {
      if (this.visibleChangePrevented) {
        this.visibleChangePrevented = false;
        return;
      }

      if (newValue !== oldValue) {
        var evtName = newValue ? 'show' : 'hide';
        var bvEvt = new _bvEvent.default(evtName, {
          cancelable: true,
          vueTarget: this,
          target: this.$refs.menu,
          relatedTarget: null
        });
        this.emitEvent(bvEvt);

        if (bvEvt.defaultPrevented) {
          // Reset value and exit if canceled
          this.visibleChangePrevented = true;
          this.visible = oldValue;
          return;
        }

        if (evtName === 'show') {
          this.showMenu();
        } else {
          this.hideMenu();
        }
      }
    },
    disabled: function disabled(newValue, oldValue) {
      if (newValue !== oldValue && newValue && this.visible) {
        // Hide dropdown if disabled changes to true
        this.visible = false;
      }
    }
  },
  computed: {
    toggler: function toggler() {
      return this.$refs.toggle.$el || this.$refs.toggle;
    }
  },
  methods: {
    // Event emitter
    emitEvent: function emitEvent(bvEvt) {
      var type = bvEvt.type;
      this.$emit(type, bvEvt);
      this.emitOnRoot('bv::dropdown::' + type, bvEvt);
    },
    showMenu: function showMenu() {
      if (this.disabled) {
        return;
      } // Ensure other menus are closed


      this.emitOnRoot('bv::dropdown::shown', this); // Are we in a navbar ?

      if (this.inNavbar === null && this.isNav) {
        this.inNavbar = Boolean((0, _dom.closest)('.navbar', this.$el));
      } // Disable totally Popper.js for Dropdown in Navbar

      /* istnbul ignore next: can't test popper in JSDOM */


      if (!this.inNavbar) {
        if (typeof _popper.default === 'undefined') {
          (0, _warn.default)('b-dropdown: Popper.js not found. Falling back to CSS positioning.');
        } else {
          // for dropup with alignment we use the parent element as popper container
          var element = this.dropup && this.right || this.split ? this.$el : this.$refs.toggle; // Make sure we have a reference to an element, not a component!

          element = element.$el || element; // Instantiate popper.js

          this.createPopper(element);
        }
      }

      this.setTouchStart(true);
      this.$emit('shown'); // Focus on the first item on show

      this.$nextTick(this.focusFirstItem);
    },
    hideMenu: function hideMenu() {
      this.setTouchStart(false);
      this.emitOnRoot('bv::dropdown::hidden', this);
      this.$emit('hidden');
      this.removePopper();
    },
    createPopper: function createPopper(element) {
      this.removePopper();
      this._popper = new _popper.default(element, this.$refs.menu, this.getPopperConfig());
    },
    removePopper: function removePopper() {
      if (this._popper) {
        // Ensure popper event listeners are removed cleanly
        this._popper.destroy();
      }

      this._popper = null;
    },
    getPopperConfig
    /* istanbul ignore next: can't test popper in JSDOM */
    : function getPopperConfig() {
      var placement = AttachmentMap.BOTTOM;

      if (this.dropup && this.right) {
        // dropup + right
        placement = AttachmentMap.TOPEND;
      } else if (this.dropup) {
        // dropup + left
        placement = AttachmentMap.TOP;
      } else if (this.right) {
        // dropdown + right
        placement = AttachmentMap.BOTTOMEND;
      }

      var popperConfig = {
        placement: placement,
        modifiers: {
          offset: {
            offset: this.offset || 0
          },
          flip: {
            enabled: !this.noFlip
          }
        }
      };

      if (this.boundary) {
        popperConfig.modifiers.preventOverflow = {
          boundariesElement: this.boundary
        };
      }

      return (0, _object.assign)(popperConfig, this.popperOpts || {});
    },
    setTouchStart: function setTouchStart(on) {
      var _this = this;
      /*
       * If this is a touch-enabled device we add extra
       * empty mouseover listeners to the body's immediate children;
       * only needed because of broken event delegation on iOS
       * https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html
       */


      if ('ontouchstart' in document.documentElement) {
        var children = (0, _array.from)(document.body.children);
        children.forEach(function (el) {
          if (on) {
            (0, _dom.eventOn)('mouseover', _this._noop);
          } else {
            (0, _dom.eventOff)('mouseover', _this._noop);
          }
        });
      }
    },

    /* istanbul ignore next: not easy to test */
    _noop: function _noop() {// Do nothing event handler (used in touchstart event handler)
    },
    rootCloseListener: function rootCloseListener(vm) {
      if (vm !== this) {
        this.visible = false;
      }
    },
    clickOutListener: function clickOutListener() {
      this.visible = false;
    },
    show: function show() {
      // Public method to show dropdown
      if (this.disabled) {
        return;
      }

      this.visible = true;
    },
    hide: function hide() {
      // Public method to hide dropdown
      if (this.disabled) {
        return;
      }

      this.visible = false;
    },
    toggle: function toggle(evt) {
      // Called only by a button that toggles the menu
      evt = evt || {};
      var type = evt.type;
      var key = evt.keyCode;

      if (type !== 'click' && !(type === 'keydown' && (key === _keyCodes.default.ENTER || key === _keyCodes.default.SPACE || key === _keyCodes.default.DOWN))) {
        // We only toggle on Click, Enter, Space, and Arrow Down
        return;
      }

      if (this.disabled) {
        this.visible = false;
        return;
      }

      this.$emit('toggle', evt);

      if (evt.defaultPrevented) {
        // Exit if canceled
        return;
      }

      evt.preventDefault();
      evt.stopPropagation(); // Toggle visibility

      this.visible = !this.visible;
    },
    click: function click(evt) {
      // Calle only in split button mode, for the split button
      if (this.disabled) {
        this.visible = false;
        return;
      }

      this.$emit('click', evt);
    },

    /* istanbul ignore next: not easy to test */
    onKeydown: function onKeydown(evt) {
      // Called from dropdown menu context
      var key = evt.keyCode;

      if (key === _keyCodes.default.ESC) {
        // Close on ESC
        this.onEsc(evt);
      } else if (key === _keyCodes.default.TAB) {
        // Close on tab out
        this.onTab(evt);
      } else if (key === _keyCodes.default.DOWN) {
        // Down Arrow
        this.focusNext(evt, false);
      } else if (key === _keyCodes.default.UP) {
        // Up Arrow
        this.focusNext(evt, true);
      }
    },

    /* istanbul ignore next: not easy to test */
    onEsc: function onEsc(evt) {
      if (this.visible) {
        this.visible = false;
        evt.preventDefault();
        evt.stopPropagation(); // Return focus to original trigger button

        this.$nextTick(this.focusToggler);
      }
    },

    /* istanbul ignore next: not easy to test */
    onTab: function onTab(evt) {
      if (this.visible) {
        // TODO: Need special handler for dealing with form inputs
        // Tab, if in a text-like input, we should just focus next item in the dropdown
        // Note: Inputs are in a special .dropdown-form container
        this.visible = false;
      }
    },
    onFocusOut: function onFocusOut(evt) {
      if (this.$refs.menu.contains(evt.relatedTarget)) {
        return;
      }

      this.visible = false;
    },

    /* istanbul ignore next: not easy to test */
    onMouseOver: function onMouseOver(evt) {
      // Focus the item on hover
      // TODO: Special handling for inputs? Inputs are in a special .dropdown-form container
      var item = evt.target;

      if (item.classList.contains('dropdown-item') && !item.disabled && !item.classList.contains('disabled') && item.focus) {
        item.focus();
      }
    },
    focusNext: function focusNext(evt, up) {
      var _this2 = this;

      if (!this.visible) {
        return;
      }

      evt.preventDefault();
      evt.stopPropagation();
      this.$nextTick(function () {
        var items = _this2.getItems();

        if (items.length < 1) {
          return;
        }

        var index = items.indexOf(evt.target);

        if (up && index > 0) {
          index--;
        } else if (!up && index < items.length - 1) {
          index++;
        }

        if (index < 0) {
          index = 0;
        }

        _this2.focusItem(index, items);
      });
    },
    focusItem: function focusItem(idx, items) {
      var el = items.find(function (el, i) {
        return i === idx;
      });

      if (el && (0, _dom.getAttr)(el, 'tabindex') !== '-1') {
        el.focus();
      }
    },
    getItems: function getItems() {
      // Get all items
      return filterVisible((0, _dom.selectAll)(ITEM_SELECTOR, this.$refs.menu));
    },
    getFirstItem: function getFirstItem() {
      // Get the first non-disabled item
      var item = this.getItems()[0];
      return item || null;
    },
    focusFirstItem: function focusFirstItem() {
      var item = this.getFirstItem();

      if (item) {
        this.focusItem(0, [item]);
      }
    },
    focusToggler: function focusToggler() {
      var toggler = this.toggler;

      if (toggler && toggler.focus) {
        toggler.focus();
      }
    }
  }
};
exports.default = _default2;
},{"popper.js":"node_modules/popper.js/dist/esm/popper.js","./clickout":"node_modules/bootstrap-vue/es/mixins/clickout.js","./listen-on-root":"node_modules/bootstrap-vue/es/mixins/listen-on-root.js","../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../utils/bv-event.class":"node_modules/bootstrap-vue/es/utils/bv-event.class.js","../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _dropdown = _interopRequireDefault(require("../../mixins/dropdown"));

var _button = _interopRequireDefault(require("../button/button"));

require("./dropdown.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _dropdown.default],
  components: {
    bButton: _button.default
  },
  render: function render(h) {
    var split = h(false);

    if (this.split) {
      split = h('b-button', {
        ref: 'button',
        props: {
          disabled: this.disabled,
          variant: this.variant,
          size: this.size
        },
        attrs: {
          id: this.safeId('_BV_button_')
        },
        on: {
          click: this.click
        }
      }, [this.$slots['button-content'] || this.$slots.text || this.text]);
    }

    var toggle = h('b-button', {
      ref: 'toggle',
      class: this.toggleClasses,
      props: {
        variant: this.variant,
        size: this.size,
        disabled: this.disabled
      },
      attrs: {
        id: this.safeId('_BV_toggle_'),
        'aria-haspopup': 'true',
        'aria-expanded': this.visible ? 'true' : 'false'
      },
      on: {
        click: this.toggle,
        // click
        keydown: this.toggle // enter, space, down

      }
    }, [this.split ? h('span', {
      class: ['sr-only']
    }, [this.toggleText]) : this.$slots['button-content'] || this.$slots.text || this.text]);
    var menu = h('div', {
      ref: 'menu',
      class: this.menuClasses,
      attrs: {
        role: this.role,
        'aria-labelledby': this.safeId(this.split ? '_BV_button_' : '_BV_toggle_')
      },
      on: {
        mouseover: this.onMouseOver,
        keydown: this.onKeydown // tab, up, down, esc

      }
    }, [this.$slots.default]);
    return h('div', {
      attrs: {
        id: this.safeId()
      },
      class: this.dropdownClasses
    }, [split, toggle, menu]);
  },
  props: {
    split: {
      type: Boolean,
      default: false
    },
    toggleText: {
      type: String,
      default: 'Toggle Dropdown'
    },
    size: {
      type: String,
      default: null
    },
    variant: {
      type: String,
      default: null
    },
    menuClass: {
      type: [String, Array],
      default: null
    },
    toggleClass: {
      type: [String, Array],
      default: null
    },
    noCaret: {
      type: Boolean,
      default: false
    },
    role: {
      type: String,
      default: 'menu'
    },
    boundary: {
      // String: `scrollParent`, `window` or `viewport`
      // Object: HTML Element reference
      type: [String, Object],
      default: 'scrollParent'
    }
  },
  computed: {
    dropdownClasses: function dropdownClasses() {
      var position = ''; // Position `static` is needed to allow menu to "breakout" of the scrollParent boundaries
      // when boundary is anything other than `scrollParent`
      // See https://github.com/twbs/bootstrap/issues/24251#issuecomment-341413786

      if (this.boundary !== 'scrollParent' || !this.boundary) {
        position = 'position-static';
      }

      return ['btn-group', 'b-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : '', position];
    },
    menuClasses: function menuClasses() {
      return ['dropdown-menu', {
        'dropdown-menu-right': this.right,
        'show': this.visible
      }, this.menuClass];
    },
    toggleClasses: function toggleClasses() {
      return [{
        'dropdown-toggle': !this.noCaret || this.split,
        'dropdown-toggle-split': this.split
      }, this.toggleClass];
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/dropdown":"node_modules/bootstrap-vue/es/mixins/dropdown.js","../button/button":"node_modules/bootstrap-vue/es/components/button/button.js","./dropdown.css":"node_modules/bootstrap-vue/es/components/dropdown/dropdown.css"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown-item.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var props = (0, _link.propsFactory)();
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(_link.default, (0, _vueFunctionalDataMerge.mergeData)(data, {
      props: props,
      staticClass: 'dropdown-item',
      attrs: {
        role: 'menuitem'
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown-item-button.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  disabled: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        parent = _ref.parent,
        children = _ref.children;
    return h('button', (0, _vueFunctionalDataMerge.mergeData)(data, {
      props: props,
      staticClass: 'dropdown-item',
      attrs: {
        role: 'menuitem',
        type: 'button',
        disabled: props.disabled
      },
      on: {
        click: function click(e) {
          parent.$root.$emit('clicked::link', e);
        }
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown-header.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  id: {
    type: String,
    default: null
  },
  tag: {
    type: String,
    default: 'h6'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'dropdown-header',
      attrs: {
        id: props.id || null
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/dropdown/dropdown-divider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'dropdown-divider',
      attrs: {
        role: 'separator'
      }
    }));
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/dropdown/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dropdown = _interopRequireDefault(require("./dropdown"));

var _dropdownItem = _interopRequireDefault(require("./dropdown-item"));

var _dropdownItemButton = _interopRequireDefault(require("./dropdown-item-button"));

var _dropdownHeader = _interopRequireDefault(require("./dropdown-header"));

var _dropdownDivider = _interopRequireDefault(require("./dropdown-divider"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bDropdown: _dropdown.default,
  bDd: _dropdown.default,
  bDropdownItem: _dropdownItem.default,
  bDdItem: _dropdownItem.default,
  bDropdownItemButton: _dropdownItemButton.default,
  bDropdownItemBtn: _dropdownItemButton.default,
  bDdItemButton: _dropdownItemButton.default,
  bDdItemBtn: _dropdownItemButton.default,
  bDropdownHeader: _dropdownHeader.default,
  bDdHeader: _dropdownHeader.default,
  bDropdownDivider: _dropdownDivider.default,
  bDdDivider: _dropdownDivider.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./dropdown":"node_modules/bootstrap-vue/es/components/dropdown/dropdown.js","./dropdown-item":"node_modules/bootstrap-vue/es/components/dropdown/dropdown-item.js","./dropdown-item-button":"node_modules/bootstrap-vue/es/components/dropdown/dropdown-item-button.js","./dropdown-header":"node_modules/bootstrap-vue/es/components/dropdown/dropdown-header.js","./dropdown-divider":"node_modules/bootstrap-vue/es/components/dropdown/dropdown-divider.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/embed/embed.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _array = require("../../utils/array");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  type: {
    type: String,
    default: 'iframe',
    validator: function validator(str) {
      return (0, _array.arrayIncludes)(['iframe', 'embed', 'video', 'object', 'img', 'b-img', 'b-img-lazy'], str);
    }
  },
  tag: {
    type: String,
    default: 'div'
  },
  aspect: {
    type: String,
    default: '16by9'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, {
      ref: data.ref,
      staticClass: 'embed-responsive',
      class: _defineProperty({}, 'embed-responsive-' + props.aspect, Boolean(props.aspect))
    }, [h(props.type, (0, _vueFunctionalDataMerge.mergeData)(data, {
      ref: '',
      staticClass: 'embed-responsive-item'
    }), children)]);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/embed/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _embed = _interopRequireDefault(require("./embed"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bEmbed: _embed.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./embed":"node_modules/bootstrap-vue/es/components/embed/embed.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form/form.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  id: {
    type: String,
    default: null
  },
  inline: {
    type: Boolean,
    default: false
  },
  novalidate: {
    type: Boolean,
    default: false
  },
  validated: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h('form', (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: {
        'form-inline': props.inline,
        'was-validated': props.validated
      },
      attrs: {
        id: props.id,
        novalidate: props.novalidate
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/form/form-row.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formRow = _interopRequireDefault(require("../layout/form-row"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _formRow.default;
exports.default = _default;
},{"../layout/form-row":"node_modules/bootstrap-vue/es/components/layout/form-row.js"}],"node_modules/bootstrap-vue/es/components/form/form-text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  id: {
    type: String,
    default: null
  },
  tag: {
    type: String,
    default: 'small'
  },
  textVariant: {
    type: String,
    default: 'muted'
  },
  inline: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: _defineProperty({
        'form-text': !props.inline
      }, 'text-' + props.textVariant, Boolean(props.textVariant)),
      attrs: {
        id: props.id
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/form/form-invalid-feedback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  id: {
    type: String,
    default: null
  },
  tag: {
    type: String,
    default: 'div'
  },
  forceShow: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'invalid-feedback',
      class: {
        'd-block': props.forceShow
      },
      attrs: {
        id: props.id
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/form/form-valid-feedback.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  id: {
    type: String,
    default: null
  },
  tag: {
    type: String,
    default: 'div'
  },
  forceShow: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'valid-feedback',
      class: {
        'd-block': props.forceShow
      },
      attrs: {
        id: props.id
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/form/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _form = _interopRequireDefault(require("./form"));

var _formRow = _interopRequireDefault(require("./form-row"));

var _formText = _interopRequireDefault(require("./form-text"));

var _formInvalidFeedback = _interopRequireDefault(require("./form-invalid-feedback"));

var _formValidFeedback = _interopRequireDefault(require("./form-valid-feedback"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bForm: _form.default,
  bFormRow: _formRow.default,
  bFormText: _formText.default,
  bFormInvalidFeedback: _formInvalidFeedback.default,
  bFormFeedback: _formInvalidFeedback.default,
  bFormValidFeedback: _formValidFeedback.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form":"node_modules/bootstrap-vue/es/components/form/form.js","./form-row":"node_modules/bootstrap-vue/es/components/form/form-row.js","./form-text":"node_modules/bootstrap-vue/es/components/form/form-text.js","./form-invalid-feedback":"node_modules/bootstrap-vue/es/components/form/form-invalid-feedback.js","./form-valid-feedback":"node_modules/bootstrap-vue/es/components/form/form-valid-feedback.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/mixins/form-state.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* Form control contextual state class computation
 *
 * Returned class is either 'is-valid' or 'is-invalid' based on the 'state' prop
 * state can be one of five values:
 *  - true or 'valid' for is-valid
 *  - false or 'invalid' for is-invalid
 *  - null (or empty string) for no contextual state
 */
var _default = {
  props: {
    state: {
      // true/'valid', false/'invalid', '',null
      type: [Boolean, String],
      default: null
    }
  },
  computed: {
    computedState: function computedState() {
      var state = this.state;

      if (state === true || state === 'valid') {
        return true;
      } else if (state === false || state === 'invalid') {
        return false;
      }

      return null;
    },
    stateClass: function stateClass() {
      var state = this.computedState;

      if (state === true) {
        return 'is-valid';
      } else if (state === false) {
        return 'is-invalid';
      }

      return null;
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/form-group/form-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _dom = require("../../utils/dom");

var _id = _interopRequireDefault(require("../../mixins/id"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formRow = _interopRequireDefault(require("../layout/form-row"));

var _formText = _interopRequireDefault(require("../form/form-text"));

var _formInvalidFeedback = _interopRequireDefault(require("../form/form-invalid-feedback"));

var _formValidFeedback = _interopRequireDefault(require("../form/form-valid-feedback"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Selector for finding firt input in the form-group
var SELECTOR = 'input:not(:disabled),textarea:not(:disabled),select:not(:disabled)';
var _default = {
  mixins: [_id.default, _formState.default],
  components: {
    bFormRow: _formRow.default,
    bFormText: _formText.default,
    bFormInvalidFeedback: _formInvalidFeedback.default,
    bFormValidFeedback: _formValidFeedback.default
  },
  render: function render(h) {
    var $slots = this.$slots; // Label / Legend

    var legend = h(false);

    if (this.hasLabel) {
      var children = $slots['label'];
      var legendTag = this.labelFor ? 'label' : 'legend';
      var legendDomProps = children ? {} : {
        innerHTML: this.label
      };
      var legendAttrs = {
        id: this.labelId,
        for: this.labelFor || null
      };
      var legendClick = this.labelFor || this.labelSrOnly ? {} : {
        click: this.legendClick
      };

      if (this.horizontal) {
        // Horizontal layout with label
        if (this.labelSrOnly) {
          // SR Only we wrap label/legend in a div to preserve layout
          children = h(legendTag, {
            class: ['sr-only'],
            attrs: legendAttrs,
            domProps: legendDomProps
          }, children);
          legend = h('div', {
            class: this.labelLayoutClasses
          }, [children]);
        } else {
          legend = h(legendTag, {
            class: [this.labelLayoutClasses, this.labelClasses],
            attrs: legendAttrs,
            domProps: legendDomProps,
            on: legendClick
          }, children);
        }
      } else {
        // Vertical layout with label
        legend = h(legendTag, {
          class: this.labelSrOnly ? ['sr-only'] : this.labelClasses,
          attrs: legendAttrs,
          domProps: legendDomProps,
          on: legendClick
        }, children);
      }
    } else if (this.horizontal) {
      // No label but has horizontal layout, so we need a spacer element for layout
      legend = h('div', {
        class: this.labelLayoutClasses
      });
    } // Invalid feeback text (explicitly hidden if state is valid)


    var invalidFeedback = h(false);

    if (this.hasInvalidFeedback) {
      var domProps = {};

      if (!$slots['invalid-feedback'] && !$slots['feedback']) {
        domProps = {
          innerHTML: this.invalidFeedback || this.feedback || ''
        };
      }

      invalidFeedback = h('b-form-invalid-feedback', {
        props: {
          id: this.invalidFeedbackId,
          forceShow: this.computedState === false
        },
        attrs: {
          role: 'alert',
          'aria-live': 'assertive',
          'aria-atomic': 'true'
        },
        domProps: domProps
      }, $slots['invalid-feedback'] || $slots['feedback']);
    } // Valid feeback text (explicitly hidden if state is invalid)


    var validFeedback = h(false);

    if (this.hasValidFeedback) {
      var _domProps = $slots['valid-feedback'] ? {} : {
        innerHTML: this.validFeedback || ''
      };

      validFeedback = h('b-form-valid-feedback', {
        props: {
          id: this.validFeedbackId,
          forceShow: this.computedState === true
        },
        attrs: {
          role: 'alert',
          'aria-live': 'assertive',
          'aria-atomic': 'true'
        },
        domProps: _domProps
      }, $slots['valid-feedback']);
    } // Form help text (description)


    var description = h(false);

    if (this.hasDescription) {
      var _domProps2 = $slots['description'] ? {} : {
        innerHTML: this.description || ''
      };

      description = h('b-form-text', {
        attrs: {
          id: this.descriptionId
        },
        domProps: _domProps2
      }, $slots['description']);
    } // Build content layout


    var content = h('div', {
      ref: 'content',
      class: this.inputLayoutClasses,
      attrs: this.labelFor ? {} : {
        role: 'group',
        'aria-labelledby': this.labelId
      }
    }, [$slots['default'], invalidFeedback, validFeedback, description]); // Generate main form-group wrapper

    return h(this.labelFor ? 'div' : 'fieldset', {
      class: this.groupClasses,
      attrs: {
        id: this.safeId(),
        disabled: this.disabled,
        role: 'group',
        'aria-invalid': this.computedState === false ? 'true' : null,
        'aria-labelledby': this.labelId,
        'aria-describedby': this.labelFor ? null : this.describedByIds
      }
    }, this.horizontal ? [h('b-form-row', {}, [legend, content])] : [legend, content]);
  },
  props: {
    horizontal: {
      type: Boolean,
      default: false
    },
    labelCols: {
      type: [Number, String],
      default: 3,
      validator: function validator(value) {
        if (Number(value) >= 1 && Number(value) <= 11) {
          return true;
        }

        (0, _warn.default)('b-form-group: label-cols must be a value between 1 and 11');
        return false;
      }
    },
    breakpoint: {
      type: String,
      default: 'sm'
    },
    labelTextAlign: {
      type: String,
      default: null
    },
    label: {
      type: String,
      default: null
    },
    labelFor: {
      type: String,
      default: null
    },
    labelSize: {
      type: String,
      default: null
    },
    labelSrOnly: {
      type: Boolean,
      default: false
    },
    labelClass: {
      type: [String, Array],
      default: null
    },
    description: {
      type: String,
      default: null
    },
    invalidFeedback: {
      type: String,
      default: null
    },
    feedback: {
      // Deprecated in favor of invalid-feedback
      type: String,
      default: null
    },
    validFeedback: {
      type: String,
      default: null
    },
    validated: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    groupClasses: function groupClasses() {
      return ['b-form-group', 'form-group', this.validated ? 'was-validated' : null, this.stateClass];
    },
    labelClasses: function labelClasses() {
      return ['col-form-label', this.labelSize ? 'col-form-label-' + this.labelSize : null, this.labelTextAlign ? 'text-' + this.labelTextAlign : null, this.horizontal ? null : 'pt-0', this.labelClass];
    },
    labelLayoutClasses: function labelLayoutClasses() {
      return [this.horizontal ? 'col-' + this.breakpoint + '-' + this.labelCols : null];
    },
    inputLayoutClasses: function inputLayoutClasses() {
      return [this.horizontal ? 'col-' + this.breakpoint + '-' + (12 - Number(this.labelCols)) : null];
    },
    hasLabel: function hasLabel() {
      return this.label || this.$slots['label'];
    },
    hasDescription: function hasDescription() {
      return this.description || this.$slots['description'];
    },
    hasInvalidFeedback: function hasInvalidFeedback() {
      if (this.computedState === true) {
        // If the form-group state is explicityly valid, we return false
        return false;
      }

      return this.invalidFeedback || this.feedback || this.$slots['invalid-feedback'] || this.$slots['feedback'];
    },
    hasValidFeedback: function hasValidFeedback() {
      if (this.computedState === false) {
        // If the form-group state is explicityly invalid, we return false
        return false;
      }

      return this.validFeedback || this.$slots['valid-feedback'];
    },
    labelId: function labelId() {
      return this.hasLabel ? this.safeId('_BV_label_') : null;
    },
    descriptionId: function descriptionId() {
      return this.hasDescription ? this.safeId('_BV_description_') : null;
    },
    invalidFeedbackId: function invalidFeedbackId() {
      return this.hasInvalidFeedback ? this.safeId('_BV_feedback_invalid_') : null;
    },
    validFeedbackId: function validFeedbackId() {
      return this.hasValidFeedback ? this.safeId('_BV_feedback_valid_') : null;
    },
    describedByIds: function describedByIds() {
      return [this.descriptionId, this.invalidFeedbackId, this.validFeedbackId].filter(function (i) {
        return i;
      }).join(' ') || null;
    }
  },
  watch: {
    describedByIds: function describedByIds(add, remove) {
      if (add !== remove) {
        this.setInputDescribedBy(add, remove);
      }
    }
  },
  methods: {
    legendClick: function legendClick(evt) {
      var tagName = evt.target ? evt.target.tagName : '';

      if (/^(input|select|textarea|label)$/i.test(tagName)) {
        // If clicked an input inside legend, we just let the default happen
        return;
      } // Focus the first non-disabled visible input when the legend element is clicked


      var inputs = (0, _dom.selectAll)(SELECTOR, this.$refs.content).filter(_dom.isVisible);

      if (inputs[0] && inputs[0].focus) {
        inputs[0].focus();
      }
    },
    setInputDescribedBy: function setInputDescribedBy(add, remove) {
      // Sets the `aria-describedby` attribute on the input if label-for is set.
      // Optionally accepts a string of IDs to remove as the second parameter
      if (this.labelFor && typeof document !== 'undefined') {
        var input = (0, _dom.select)('#' + this.labelFor, this.$refs.content);

        if (input) {
          var adb = 'aria-describedby';
          var ids = ((0, _dom.getAttr)(input, adb) || '').split(/\s+/);
          remove = (remove || '').split(/\s+/); // Update ID list, preserving any original IDs

          ids = ids.filter(function (id) {
            return remove.indexOf(id) === -1;
          }).concat(add || '').join(' ').trim();

          if (ids) {
            (0, _dom.setAttr)(input, adb, ids);
          } else {
            (0, _dom.removeAttr)(input, adb);
          }
        }
      }
    }
  },
  mounted: function mounted() {
    var _this = this;

    this.$nextTick(function () {
      // Set the adia-describedby IDs on the input specified by label-for
      // We do this in a nextTick to ensure the children have finished rendering
      _this.setInputDescribedBy(_this.describedByIds);
    });
  }
};
exports.default = _default;
},{"../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../layout/form-row":"node_modules/bootstrap-vue/es/components/layout/form-row.js","../form/form-text":"node_modules/bootstrap-vue/es/components/form/form-text.js","../form/form-invalid-feedback":"node_modules/bootstrap-vue/es/components/form/form-invalid-feedback.js","../form/form-valid-feedback":"node_modules/bootstrap-vue/es/components/form/form-valid-feedback.js"}],"node_modules/bootstrap-vue/es/components/form-group/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formGroup = _interopRequireDefault(require("./form-group"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormGroup: _formGroup.default,
  bFormFieldset: _formGroup.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-group":"node_modules/bootstrap-vue/es/components/form-group/form-group.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/mixins/form-radio-check.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * form-radio & form-check mixin
 *
 */
var _default = {
  data: function data() {
    return {
      localChecked: this.checked,
      hasFocus: false
    };
  },
  model: {
    prop: 'checked',
    event: 'input'
  },
  props: {
    value: {},
    checked: {// This is the model, except when in group mode
    },
    buttonVariant: {
      // Only applicable when rendered with button style
      type: String,
      default: null
    }
  },
  computed: {
    computedLocalChecked: {
      get: function get() {
        if (this.is_Child) {
          return this.$parent.localChecked;
        } else {
          return this.localChecked;
        }
      },
      set: function set(val) {
        if (this.is_Child) {
          this.$parent.localChecked = val;
        } else {
          this.localChecked = val;
        }
      }
    },
    is_Child: function is_Child() {
      return Boolean(this.$parent && this.$parent.is_RadioCheckGroup);
    },
    is_Disabled: function is_Disabled() {
      // Child can be disabled while parent isn't
      return Boolean(this.is_Child ? this.$parent.disabled || this.disabled : this.disabled);
    },
    is_Required: function is_Required() {
      return Boolean(this.is_Child ? this.$parent.required : this.required);
    },
    is_Plain: function is_Plain() {
      return Boolean(this.is_Child ? this.$parent.plain : this.plain);
    },
    is_Custom: function is_Custom() {
      return !this.is_Plain;
    },
    get_Size: function get_Size() {
      return this.is_Child ? this.$parent.size : this.size;
    },
    get_State: function get_State() {
      // This is a tri-state prop (true, false, null)
      if (this.is_Child && typeof this.$parent.get_State === 'boolean') {
        return this.$parent.get_State;
      }

      return this.computedState;
    },
    get_StateClass: function get_StateClass() {
      // This is a tri-state prop (true, false, null)
      return typeof this.get_State === 'boolean' ? this.get_State ? 'is-valid' : 'is-invalid' : '';
    },
    is_Stacked: function is_Stacked() {
      return Boolean(this.is_Child && this.$parent.stacked);
    },
    is_Inline: function is_Inline() {
      return !this.is_Stacked;
    },
    is_ButtonMode: function is_ButtonMode() {
      return Boolean(this.is_Child && this.$parent.buttons);
    },
    get_ButtonVariant: function get_ButtonVariant() {
      // Local variant trumps parent variant
      return this.buttonVariant || (this.is_Child ? this.$parent.buttonVariant : null) || 'secondary';
    },
    get_Name: function get_Name() {
      return (this.is_Child ? this.$parent.name || this.$parent.safeId() : this.name) || null;
    },
    buttonClasses: function buttonClasses() {
      // Same for radio & check
      return ['btn', 'btn-' + this.get_ButtonVariant, this.get_Size ? 'btn-' + this.get_Size : '', // 'disabled' class makes "button" look disabled
      this.is_Disabled ? 'disabled' : '', // 'active' class makes "button" look pressed
      this.is_Checked ? 'active' : '', // Focus class makes button look focused
      this.hasFocus ? 'focus' : ''];
    }
  },
  methods: {
    handleFocus: function handleFocus(evt) {
      // When in buttons mode, we need to add 'focus' class to label when radio focused
      if (this.is_ButtonMode && evt.target) {
        if (evt.type === 'focus') {
          this.hasFocus = true;
        } else if (evt.type === 'blur') {
          this.hasFocus = false;
        }
      }
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/mixins/form.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  props: {
    name: {
      type: String
    },
    id: {
      type: String
    },
    disabled: {
      type: Boolean
    },
    required: {
      type: Boolean,
      default: false
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/mixins/form-size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  props: {
    size: {
      type: String,
      default: null
    }
  },
  computed: {
    sizeFormClass: function sizeFormClass() {
      return [this.size ? "form-control-" + this.size : null];
    },
    sizeBtnClass: function sizeBtnClass() {
      return [this.size ? "btn-" + this.size : null];
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/mixins/form-custom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  computed: {
    custom: function custom() {
      return !this.plain;
    }
  },
  props: {
    plain: {
      type: Boolean,
      default: false
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/utils/loose-equal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _array = require("./array");

var _object = require("./object");

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 * Returns boolean true or false
 */


function looseEqual(a, b) {
  if (a === b) return true;
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = (0, _array.isArray)(a);
      var isArrayB = (0, _array.isArray)(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = (0, _object.keys)(a);
        var keysB = (0, _object.keys)(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

var _default = looseEqual;
exports.default = _default;
},{"./array":"node_modules/bootstrap-vue/es/utils/array.js","./object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _formRadioCheck = _interopRequireDefault(require("../../mixins/form-radio-check"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formCustom = _interopRequireDefault(require("../../mixins/form-custom"));

var _array = require("../../utils/array");

var _looseEqual = _interopRequireDefault(require("../../utils/loose-equal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _formRadioCheck.default, _form.default, _formSize.default, _formState.default, _formCustom.default],
  render: function render(h) {
    var _this = this;

    var input = h('input', {
      ref: 'check',
      class: [this.is_ButtonMode ? '' : this.is_Plain ? 'form-check-input' : 'custom-control-input', this.get_StateClass],
      directives: [{
        name: 'model',
        rawName: 'v-model',
        value: this.computedLocalChecked,
        expression: 'computedLocalChecked'
      }],
      attrs: {
        id: this.safeId(),
        type: 'checkbox',
        name: this.get_Name,
        disabled: this.is_Disabled,
        required: this.is_Required,
        autocomplete: 'off',
        'true-value': this.value,
        'false-value': this.uncheckedValue,
        'aria-required': this.is_Required ? 'true' : null
      },
      domProps: {
        value: this.value,
        checked: this.is_Checked
      },
      on: {
        focus: this.handleFocus,
        blur: this.handleFocus,
        change: this.emitChange,
        __c: function __c(evt) {
          var $$a = _this.computedLocalChecked;
          var $$el = evt.target;

          if ((0, _array.isArray)($$a)) {
            // Multiple checkbox
            var $$v = _this.value;

            var $$i = _this._i($$a, $$v); // Vue's 'loose' Array.indexOf


            if ($$el.checked) {
              // Append value to array
              $$i < 0 && (_this.computedLocalChecked = $$a.concat([$$v]));
            } else {
              // Remove value from array
              $$i > -1 && (_this.computedLocalChecked = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));
            }
          } else {
            // Single checkbox
            _this.computedLocalChecked = $$el.checked ? _this.value : _this.uncheckedValue;
          }
        }
      }
    });
    var description = h(this.is_ButtonMode ? 'span' : 'label', {
      class: this.is_ButtonMode ? null : this.is_Plain ? 'form-check-label' : 'custom-control-label',
      attrs: {
        for: this.is_ButtonMode ? null : this.safeId()
      }
    }, [this.$slots.default]);

    if (!this.is_ButtonMode) {
      return h('div', {
        class: [this.is_Plain ? 'form-check' : this.labelClasses, {
          'form-check-inline': this.is_Plain && !this.is_Stacked
        }, {
          'custom-control-inline': !this.is_Plain && !this.is_Stacked
        }]
      }, [input, description]);
    } else {
      return h('label', {
        class: [this.buttonClasses]
      }, [input, description]);
    }
  },
  props: {
    value: {
      default: true
    },
    uncheckedValue: {
      // Not applicable in multi-check mode
      default: false
    },
    indeterminate: {
      // Not applicable in multi-check mode
      type: Boolean,
      default: false
    }
  },
  computed: {
    labelClasses: function labelClasses() {
      return ['custom-control', 'custom-checkbox', this.get_Size ? 'form-control-' + this.get_Size : '', this.get_StateClass];
    },
    is_Checked: function is_Checked() {
      var checked = this.computedLocalChecked;

      if ((0, _array.isArray)(checked)) {
        for (var i = 0; i < checked.length; i++) {
          if ((0, _looseEqual.default)(checked[i], this.value)) {
            return true;
          }
        }

        return false;
      } else {
        return (0, _looseEqual.default)(checked, this.value);
      }
    }
  },
  watch: {
    computedLocalChecked: function computedLocalChecked(newVal, oldVal) {
      if ((0, _looseEqual.default)(newVal, oldVal)) {
        return;
      }

      this.$emit('input', newVal);
      this.$emit('update:indeterminate', this.$refs.check.indeterminate);
    },
    checked: function checked(newVal, oldVal) {
      if (this.is_Child || (0, _looseEqual.default)(newVal, oldVal)) {
        return;
      }

      this.computedLocalChecked = newVal;
    },
    indeterminate: function indeterminate(newVal, oldVal) {
      this.setIndeterminate(newVal);
    }
  },
  methods: {
    emitChange: function emitChange(_ref) {
      var checked = _ref.target.checked; // Change event is only fired via user interaction
      // And we only emit the value of this checkbox

      if (this.is_Child || (0, _array.isArray)(this.computedLocalChecked)) {
        this.$emit('change', checked ? this.value : null);

        if (this.is_Child) {
          // If we are a child of form-checkbbox-group, emit change on parent
          this.$parent.$emit('change', this.computedLocalChecked);
        }
      } else {
        // Single radio mode supports unchecked value
        this.$emit('change', checked ? this.value : this.uncheckedValue);
      }

      this.$emit('update:indeterminate', this.$refs.check.indeterminate);
    },
    setIndeterminate: function setIndeterminate(state) {
      // Indeterminate only supported in single checkbox mode
      if (this.is_Child || (0, _array.isArray)(this.computedLocalChecked)) {
        return;
      }

      this.$refs.check.indeterminate = state; // Emit update event to prop

      this.$emit('update:indeterminate', this.$refs.check.indeterminate);
    }
  },
  mounted: function mounted() {
    // Set initial indeterminate state
    this.setIndeterminate(this.indeterminate);
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form-radio-check":"node_modules/bootstrap-vue/es/mixins/form-radio-check.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-custom":"node_modules/bootstrap-vue/es/mixins/form-custom.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../../utils/loose-equal":"node_modules/bootstrap-vue/es/utils/loose-equal.js"}],"node_modules/bootstrap-vue/es/mixins/form-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _array = require("../utils/array");

var _object = require("../utils/object");

function isObject(obj) {
  return obj && {}.toString.call(obj) === '[object Object]';
}

var _default2 = {
  props: {
    options: {
      type: [Array, Object],
      default: function _default() {
        return [];
      }
    },
    valueField: {
      type: String,
      default: 'value'
    },
    textField: {
      type: String,
      default: 'text'
    },
    disabledField: {
      type: String,
      default: 'disabled'
    }
  },
  computed: {
    formOptions: function formOptions() {
      var options = this.options;
      var valueField = this.valueField;
      var textField = this.textField;
      var disabledField = this.disabledField;

      if ((0, _array.isArray)(options)) {
        // Normalize flat-ish arrays to Array of Objects
        return options.map(function (option) {
          if (isObject(option)) {
            return {
              value: option[valueField],
              text: String(option[textField]),
              disabled: option[disabledField] || false
            };
          }

          return {
            value: option,
            text: String(option),
            disabled: false
          };
        });
      } else {
        // options is Object
        // Normalize Objects to Array of Objects
        return (0, _object.keys)(options).map(function (key) {
          var option = options[key] || {};

          if (isObject(option)) {
            var value = option[valueField];
            var text = option[textField];
            return {
              value: typeof value === 'undefined' ? key : value,
              text: typeof text === 'undefined' ? key : String(text),
              disabled: option[disabledField] || false
            };
          }

          return {
            value: key,
            text: String(option),
            disabled: false
          };
        });
      }
    }
  }
};
exports.default = _default2;
},{"../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../utils/object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formOptions = _interopRequireDefault(require("../../mixins/form-options"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formCustom = _interopRequireDefault(require("../../mixins/form-custom"));

var _formCheckbox = _interopRequireDefault(require("./form-checkbox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _form.default, _formSize.default, _formState.default, _formCustom.default, _formOptions.default],
  components: {
    bFormCheckbox: _formCheckbox.default
  },
  render: function render(h) {
    var _this = this;

    var $slots = this.$slots;
    var checks = this.formOptions.map(function (option, idx) {
      return h('b-form-checkbox', {
        key: 'check_' + idx + '_opt',
        props: {
          id: _this.safeId('_BV_check_' + idx + '_opt_'),
          name: _this.name,
          value: option.value,
          required: _this.name && _this.required,
          disabled: option.disabled
        }
      }, [h('span', {
        domProps: {
          innerHTML: option.text
        }
      })]);
    });
    return h('div', {
      class: this.groupClasses,
      attrs: {
        id: this.safeId(),
        role: 'group',
        tabindex: '-1',
        'aria-required': this.required ? 'true' : null,
        'aria-invalid': this.computedAriaInvalid
      }
    }, [$slots.first, checks, $slots.default]);
  },
  data: function data() {
    return {
      localChecked: this.checked || [],
      // Flag for children
      is_RadioCheckGroup: true
    };
  },
  model: {
    prop: 'checked',
    event: 'input'
  },
  props: {
    checked: {
      type: [String, Number, Object, Array, Boolean],
      default: null
    },
    validated: {
      type: Boolean,
      default: false
    },
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    },
    stacked: {
      type: Boolean,
      default: false
    },
    buttons: {
      // Render as button style
      type: Boolean,
      default: false
    },
    buttonVariant: {
      // Only applicable when rendered with button style
      type: String,
      default: 'secondary'
    }
  },
  watch: {
    checked: function checked(newVal, oldVal) {
      this.localChecked = this.checked;
    },
    localChecked: function localChecked(newVal, oldVal) {
      this.$emit('input', newVal);
    }
  },
  computed: {
    groupClasses: function groupClasses() {
      if (this.buttons) {
        return ['btn-group-toggle', this.stacked ? 'btn-group-vertical' : 'btn-group', this.size ? 'btn-group-' + this.size : '', this.validated ? 'was-validated' : ''];
      }

      return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];
    },
    computedAriaInvalid: function computedAriaInvalid() {
      if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {
        return 'true';
      }

      return this.get_State === false ? 'true' : null;
    },
    get_State: function get_State() {
      // Child radios sniff this value
      return this.computedState;
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-options":"node_modules/bootstrap-vue/es/mixins/form-options.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-custom":"node_modules/bootstrap-vue/es/mixins/form-custom.js","./form-checkbox":"node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox.js"}],"node_modules/bootstrap-vue/es/components/form-checkbox/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formCheckbox = _interopRequireDefault(require("./form-checkbox"));

var _formCheckboxGroup = _interopRequireDefault(require("./form-checkbox-group"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormCheckbox: _formCheckbox.default,
  bCheckbox: _formCheckbox.default,
  bCheck: _formCheckbox.default,
  bFormCheckboxGroup: _formCheckboxGroup.default,
  bCheckboxGroup: _formCheckboxGroup.default,
  bCheckGroup: _formCheckboxGroup.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-checkbox":"node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox.js","./form-checkbox-group":"node_modules/bootstrap-vue/es/components/form-checkbox/form-checkbox-group.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form-radio/form-radio.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formRadioCheck = _interopRequireDefault(require("../../mixins/form-radio-check"));

var _looseEqual = _interopRequireDefault(require("../../utils/loose-equal"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _formRadioCheck.default, _form.default, _formState.default],
  render: function render(h) {
    var _this = this;

    var input = h('input', {
      ref: 'radio',
      class: [this.is_ButtonMode ? '' : this.is_Plain ? 'form-check-input' : 'custom-control-input', this.get_StateClass],
      directives: [{
        name: 'model',
        rawName: 'v-model',
        value: this.computedLocalChecked,
        expression: 'computedLocalChecked'
      }],
      attrs: {
        id: this.safeId(),
        type: 'radio',
        name: this.get_Name,
        required: this.get_Name && this.is_Required,
        disabled: this.is_Disabled,
        autocomplete: 'off'
      },
      domProps: {
        value: this.value,
        checked: (0, _looseEqual.default)(this.computedLocalChecked, this.value)
      },
      on: {
        focus: this.handleFocus,
        blur: this.handleFocus,
        change: this.emitChange,
        __c: function __c(evt) {
          _this.computedLocalChecked = _this.value;
        }
      }
    });
    var description = h(this.is_ButtonMode ? 'span' : 'label', {
      class: this.is_ButtonMode ? null : this.is_Plain ? 'form-check-label' : 'custom-control-label',
      attrs: {
        for: this.is_ButtonMode ? null : this.safeId()
      }
    }, [this.$slots.default]);

    if (!this.is_ButtonMode) {
      return h('div', {
        class: [this.is_Plain ? 'form-check' : this.labelClasses, {
          'form-check-inline': this.is_Plain && !this.is_Stacked
        }, {
          'custom-control-inline': !this.is_Plain && !this.is_Stacked
        }]
      }, [input, description]);
    } else {
      return h('label', {
        class: [this.buttonClasses]
      }, [input, description]);
    }
  },
  watch: {
    // Radio Groups can only have a single value, so our watchers are simple
    checked: function checked(newVal, oldVal) {
      this.computedLocalChecked = newVal;
    },
    computedLocalChceked: function computedLocalChceked(newVal, oldVal) {
      this.$emit('input', this.computedLocalChceked);
    }
  },
  computed: {
    is_Checked: function is_Checked() {
      return (0, _looseEqual.default)(this.value, this.computedLocalChecked);
    },
    labelClasses: function labelClasses() {
      // Specific to radio
      return [this.get_Size ? 'form-control-' + this.get_Size : '', 'custom-control', 'custom-radio', this.get_StateClass];
    }
  },
  methods: {
    emitChange: function emitChange(_ref) {
      var checked = _ref.target.checked; // Change is only emitted on user interaction

      this.$emit('change', checked ? this.value : null); // If this is a child of form-radio-group, we emit a change event on it as well

      if (this.is_Child) {
        this.$parent.$emit('change', this.computedLocalChecked);
      }
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-radio-check":"node_modules/bootstrap-vue/es/mixins/form-radio-check.js","../../utils/loose-equal":"node_modules/bootstrap-vue/es/utils/loose-equal.js"}],"node_modules/bootstrap-vue/es/components/form-radio/form-radio-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _formOptions = _interopRequireDefault(require("../../mixins/form-options"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formCustom = _interopRequireDefault(require("../../mixins/form-custom"));

var _formRadio = _interopRequireDefault(require("./form-radio"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _form.default, _formSize.default, _formState.default, _formCustom.default, _formOptions.default],
  components: {
    bFormRadio: _formRadio.default
  },
  render: function render(h) {
    var _this = this;

    var $slots = this.$slots;
    var radios = this.formOptions.map(function (option, idx) {
      return h('b-form-radio', {
        key: 'radio_' + idx + '_opt',
        props: {
          id: _this.safeId('_BV_radio_' + idx + '_opt_'),
          name: _this.name,
          value: option.value,
          required: Boolean(_this.name && _this.required),
          disabled: option.disabled
        }
      }, [h('span', {
        domProps: {
          innerHTML: option.text
        }
      })]);
    });
    return h('div', {
      class: this.groupClasses,
      attrs: {
        id: this.safeId(),
        role: 'radiogroup',
        tabindex: '-1',
        'aria-required': this.required ? 'true' : null,
        'aria-invalid': this.computedAriaInvalid
      }
    }, [$slots.first, radios, $slots.default]);
  },
  data: function data() {
    return {
      localChecked: this.checked,
      // Flag for children
      is_RadioCheckGroup: true
    };
  },
  model: {
    prop: 'checked',
    event: 'input'
  },
  props: {
    checked: {
      type: [String, Object, Number, Boolean],
      default: null
    },
    validated: {
      // Used for applying hte `was-validated` class to the group
      type: Boolean,
      default: false
    },
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    },
    stacked: {
      type: Boolean,
      default: false
    },
    buttons: {
      // Render as button style
      type: Boolean,
      default: false
    },
    buttonVariant: {
      // Only applicable when rendered with button style
      type: String,
      default: 'secondary'
    }
  },
  watch: {
    checked: function checked(newVal, oldVal) {
      this.localChecked = this.checked;
    },
    localChecked: function localChecked(newVal, oldVal) {
      this.$emit('input', newVal);
    }
  },
  computed: {
    groupClasses: function groupClasses() {
      if (this.buttons) {
        return ['btn-group-toggle', this.stacked ? 'btn-group-vertical' : 'btn-group', this.size ? 'btn-group-' + this.size : '', this.validated ? 'was-validated' : ''];
      }

      return [this.sizeFormClass, this.stacked && this.custom ? 'custom-controls-stacked' : '', this.validated ? 'was-validated' : ''];
    },
    computedAriaInvalid: function computedAriaInvalid() {
      if (this.ariaInvalid === true || this.ariaInvalid === 'true' || this.ariaInvalid === '') {
        return 'true';
      }

      return this.get_State === false ? 'true' : null;
    },
    get_State: function get_State() {
      // Required by child radios
      return this.computedState;
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form-options":"node_modules/bootstrap-vue/es/mixins/form-options.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-custom":"node_modules/bootstrap-vue/es/mixins/form-custom.js","./form-radio":"node_modules/bootstrap-vue/es/components/form-radio/form-radio.js"}],"node_modules/bootstrap-vue/es/components/form-radio/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formRadio = _interopRequireDefault(require("./form-radio"));

var _formRadioGroup = _interopRequireDefault(require("./form-radio-group"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormRadio: _formRadio.default,
  bRadio: _formRadio.default,
  bFormRadioGroup: _formRadioGroup.default,
  bRadioGroup: _formRadioGroup.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-radio":"node_modules/bootstrap-vue/es/components/form-radio/form-radio.js","./form-radio-group":"node_modules/bootstrap-vue/es/components/form-radio/form-radio-group.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form-input/form-input.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/bootstrap-vue/es/components/form-input/form-input.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _array = require("../../utils/array");

require("./form-input.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Import styles
// Valid supported input types
var TYPES = ['text', 'password', 'email', 'number', 'url', 'tel', 'search', 'range', 'color', 'date', 'time', 'datetime', 'datetime-local', 'month', 'week'];
var _default = {
  mixins: [_id.default, _form.default, _formSize.default, _formState.default],
  render: function render(h) {
    return h('input', {
      ref: 'input',
      class: this.inputClass,
      attrs: {
        id: this.safeId(),
        name: this.name,
        type: this.localType,
        disabled: this.disabled,
        required: this.required,
        readonly: this.readonly || this.plaintext,
        placeholder: this.placeholder,
        autocomplete: this.autocomplete || null,
        'aria-required': this.required ? 'true' : null,
        'aria-invalid': this.computedAriaInvalid,
        value: this.value
      },
      on: {
        input: this.onInput,
        change: this.onChange
      }
    });
  },
  props: {
    value: {
      default: null
    },
    type: {
      type: String,
      default: 'text',
      validator: function validator(type) {
        return (0, _array.arrayIncludes)(TYPES, type);
      }
    },
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    plaintext: {
      type: Boolean,
      default: false
    },
    autocomplete: {
      type: String,
      default: null
    },
    placeholder: {
      type: String,
      default: null
    },
    formatter: {
      type: Function
    },
    lazyFormatter: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    localType: function localType() {
      // We only allow certain types
      return (0, _array.arrayIncludes)(TYPES, this.type) ? this.type : 'text';
    },
    inputClass: function inputClass() {
      return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];
    },
    computedAriaInvalid: function computedAriaInvalid() {
      if (!this.ariaInvalid || this.ariaInvalid === 'false') {
        // this.ariaInvalid is null or false or 'false'
        return this.computedState === false ? 'true' : null;
      }

      if (this.ariaInvalid === true) {
        // User wants explicit aria-invalid=true
        return 'true';
      } // Most likely a string value (which could be 'true')


      return this.ariaInvalid;
    }
  },
  mounted: function mounted() {
    if (this.value) {
      var fValue = this.format(this.value, null);
      this.setValue(fValue);
    }
  },
  watch: {
    value: function value(newVal) {
      if (this.lazyFormatter) {
        this.setValue(newVal);
      } else {
        var fValue = this.format(newVal, null);
        this.setValue(fValue);
      }
    }
  },
  methods: {
    format: function format(value, e) {
      if (this.formatter) {
        return this.formatter(value, e);
      }

      return value;
    },
    setValue: function setValue(value) {
      this.$emit('input', value); // When formatter removes last typed character, value of text input should update to formatted value

      this.$refs.input.value = value;
    },
    onInput: function onInput(evt) {
      var value = evt.target.value;

      if (this.lazyFormatter) {
        this.setValue(value);
      } else {
        var fValue = this.format(value, evt);
        this.setValue(fValue);
      }
    },
    onChange: function onChange(evt) {
      var fValue = this.format(evt.target.value, evt);
      this.setValue(fValue);
      this.$emit('change', fValue);
    },
    focus: function focus() {
      if (!this.disabled) {
        this.$el.focus();
      }
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","./form-input.css":"node_modules/bootstrap-vue/es/components/form-input/form-input.css"}],"node_modules/bootstrap-vue/es/components/form-input/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formInput = _interopRequireDefault(require("./form-input"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormInput: _formInput.default,
  bInput: _formInput.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-input":"node_modules/bootstrap-vue/es/components/form-input/form-input.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form-textarea/form-textarea.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _form.default, _formSize.default, _formState.default],
  render: function render(h) {
    var _this = this;

    return h('textarea', {
      ref: 'input',
      class: this.inputClass,
      style: this.inputStyle,
      directives: [{
        name: 'model',
        rawName: 'v-model',
        value: this.localValue,
        expression: 'localValue'
      }],
      domProps: {
        value: this.value
      },
      attrs: {
        id: this.safeId(),
        name: this.name,
        disabled: this.disabled,
        placeholder: this.placeholder,
        required: this.required,
        autocomplete: this.autocomplete || null,
        readonly: this.readonly || this.plaintext,
        rows: this.rowsCount,
        wrap: this.wrap || null,
        'aria-required': this.required ? 'true' : null,
        'aria-invalid': this.computedAriaInvalid
      },
      on: {
        input: function input(evt) {
          _this.localValue = evt.target.value;
        }
      }
    });
  },
  data: function data() {
    return {
      localValue: this.value
    };
  },
  props: {
    value: {
      type: String,
      default: ''
    },
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    plaintext: {
      type: Boolean,
      default: false
    },
    autocomplete: {
      type: String,
      default: null
    },
    placeholder: {
      type: String,
      default: null
    },
    rows: {
      type: [Number, String],
      default: null
    },
    maxRows: {
      type: [Number, String],
      default: null
    },
    wrap: {
      // 'soft', 'hard' or 'off'. Browser default is 'soft'
      type: String,
      default: 'soft'
    },
    noResize: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    rowsCount: function rowsCount() {
      // A better option could be based on https://codepen.io/vsync/pen/frudD
      // As linebreaks aren't added until the input is submitted
      var rows = parseInt(this.rows, 10) || 1;
      var maxRows = parseInt(this.maxRows, 10) || 0;
      var lines = (this.localValue || '').toString().split('\n').length;
      return maxRows ? Math.min(maxRows, Math.max(rows, lines)) : Math.max(rows, lines);
    },
    inputClass: function inputClass() {
      return [this.plaintext ? 'form-control-plaintext' : 'form-control', this.sizeFormClass, this.stateClass];
    },
    inputStyle: function inputStyle() {
      // We set width 100% in plaintext mode to get around a shortcoming in bootstrap CSS
      // setting noResize to true will disable the ability for the user to resize the textarea
      return {
        width: this.plaintext ? '100%' : null,
        resize: this.noResize ? 'none' : null
      };
    },
    computedAriaInvalid: function computedAriaInvalid() {
      if (!this.ariaInvalid || this.ariaInvalid === 'false') {
        // this.ariaInvalid is null or false or 'false'
        return this.computedState === false ? 'true' : null;
      }

      if (this.ariaInvalid === true) {
        // User wants explicit aria-invalid=true
        return 'true';
      } // Most likely a string value (which could be the string 'true')


      return this.ariaInvalid;
    }
  },
  watch: {
    value: function value(newVal, oldVal) {
      // Update our localValue
      if (newVal !== oldVal) {
        this.localValue = newVal;
      }
    },
    localValue: function localValue(newVal, oldVal) {
      // update Parent value
      if (newVal !== oldVal) {
        this.$emit('input', newVal);
      }
    }
  },
  methods: {
    focus: function focus() {
      // For external handler that may want a focus method
      if (!this.disabled) {
        this.$el.focus();
      }
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js"}],"node_modules/bootstrap-vue/es/components/form-textarea/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formTextarea = _interopRequireDefault(require("./form-textarea"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormTextarea: _formTextarea.default,
  bTextarea: _formTextarea.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-textarea":"node_modules/bootstrap-vue/es/components/form-textarea/form-textarea.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form-file/form-file.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formCustom = _interopRequireDefault(require("../../mixins/form-custom"));

var _array = require("../../utils/array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _form.default, _formState.default, _formCustom.default],
  render: function render(h) {
    // Form Input
    var input = h('input', {
      ref: 'input',
      class: [{
        'form-control-file': this.plain,
        'custom-file-input': this.custom,
        focus: this.custom && this.hasFocus
      }, this.stateClass],
      attrs: {
        type: 'file',
        id: this.safeId(),
        name: this.name,
        disabled: this.disabled,
        required: this.required,
        capture: this.capture || null,
        accept: this.accept || null,
        multiple: this.multiple,
        webkitdirectory: this.directory,
        'aria-required': this.required ? 'true' : null,
        'aria-describedby': this.plain ? null : this.safeId('_BV_file_control_')
      },
      on: {
        change: this.onFileChange,
        focusin: this.focusHandler,
        focusout: this.focusHandler
      }
    });

    if (this.plain) {
      return input;
    } // Overlay Labels


    var label = h('label', {
      class: ['custom-file-label', this.dragging ? 'dragging' : null],
      attrs: {
        id: this.safeId('_BV_file_control_')
      }
    }, this.selectLabel); // Return rendered custom file input

    return h('div', {
      class: ['custom-file', 'b-form-file', this.stateClass],
      attrs: {
        id: this.safeId('_BV_file_outer_')
      },
      on: {
        dragover: this.dragover
      }
    }, [input, label]);
  },
  data: function data() {
    return {
      selectedFile: null,
      dragging: false,
      hasFocus: false
    };
  },
  props: {
    accept: {
      type: String,
      default: ''
    },
    // Instruct input to capture from camera
    capture: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: String,
      default: undefined
    },
    multiple: {
      type: Boolean,
      default: false
    },
    directory: {
      type: Boolean,
      default: false
    },
    noTraverse: {
      type: Boolean,
      default: false
    },
    noDrop: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    selectLabel: function selectLabel() {
      // No file choosen
      if (!this.selectedFile || this.selectedFile.length === 0) {
        return this.placeholder;
      } // Multiple files


      if (this.multiple) {
        if (this.selectedFile.length === 1) {
          return this.selectedFile[0].name;
        }

        return this.selectedFile.map(function (file) {
          return file.name;
        }).join(', ');
      } // Single file


      return this.selectedFile.name;
    }
  },
  watch: {
    selectedFile: function selectedFile(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }

      if (!newVal && this.multiple) {
        this.$emit('input', []);
      } else {
        this.$emit('input', newVal);
      }
    }
  },
  methods: {
    focusHandler: function focusHandler(evt) {
      // Boostrap v4.beta doesn't have focus styling for custom file input
      // Firefox has a borked '[type=file]:focus ~ sibling' selector issue,
      // So we add a 'focus' class to get around these "bugs"
      if (this.plain || evt.type === 'focusout') {
        this.hasFocus = false;
      } else {
        // Add focus styling for custom file input
        this.hasFocus = true;
      }
    },
    reset: function reset() {
      try {
        // Wrapped in try in case IE < 11 craps out
        this.$refs.input.value = '';
      } catch (e) {} // IE < 11 doesn't support setting input.value to '' or null
      // So we use this little extra hack to reset the value, just in case
      // This also appears to work on modern browsers as well.


      this.$refs.input.type = '';
      this.$refs.input.type = 'file';
      this.selectedFile = this.multiple ? [] : null;
    },
    onFileChange: function onFileChange(evt) {
      var _this = this; // Always emit original event


      this.$emit('change', evt); // Check if special `items` prop is available on event (drop mode)
      // Can be disabled by setting no-traverse

      var items = evt.dataTransfer && evt.dataTransfer.items;

      if (items && !this.noTraverse) {
        var queue = [];

        for (var i = 0; i < items.length; i++) {
          var item = items[i].webkitGetAsEntry();

          if (item) {
            queue.push(this.traverseFileTree(item));
          }
        }

        Promise.all(queue).then(function (filesArr) {
          _this.setFiles((0, _array.from)(filesArr));
        });
        return;
      } // Normal handling


      this.setFiles(evt.target.files || evt.dataTransfer.files);
    },
    setFiles: function setFiles(files) {
      if (!files) {
        this.selectedFile = null;
        return;
      }

      if (!this.multiple) {
        this.selectedFile = files[0];
        return;
      } // Convert files to array


      var filesArray = [];

      for (var i = 0; i < files.length; i++) {
        if (files[i].type.match(this.accept)) {
          filesArray.push(files[i]);
        }
      }

      this.selectedFile = filesArray;
    },
    dragover: function dragover(evt) {
      evt.preventDefault();
      evt.stopPropagation();

      if (this.noDrop || !this.custom) {
        return;
      }

      this.dragging = true;
      evt.dataTransfer.dropEffect = 'copy';
    },
    dragleave: function dragleave(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      this.dragging = false;
    },
    drop: function drop(evt) {
      evt.preventDefault();
      evt.stopPropagation();

      if (this.noDrop) {
        return;
      }

      this.dragging = false;

      if (evt.dataTransfer.files && evt.dataTransfer.files.length > 0) {
        this.onFileChange(evt);
      }
    },
    traverseFileTree: function traverseFileTree(item, path) {
      var _this2 = this; // Based on http://stackoverflow.com/questions/3590058


      return new Promise(function (resolve) {
        path = path || '';

        if (item.isFile) {
          // Get file
          item.file(function (file) {
            file.$path = path; // Inject $path to file obj

            resolve(file);
          });
        } else if (item.isDirectory) {
          // Get folder contents
          item.createReader().readEntries(function (entries) {
            var queue = [];

            for (var i = 0; i < entries.length; i++) {
              queue.push(_this2.traverseFileTree(entries[i], path + item.name + '/'));
            }

            Promise.all(queue).then(function (filesArr) {
              resolve((0, _array.from)(filesArr));
            });
          });
        }
      });
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-custom":"node_modules/bootstrap-vue/es/mixins/form-custom.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/form-file/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formFile = _interopRequireDefault(require("./form-file"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormFile: _formFile.default,
  bFile: _formFile.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-file":"node_modules/bootstrap-vue/es/components/form-file/form-file.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/form-select/form-select.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _formOptions = _interopRequireDefault(require("../../mixins/form-options"));

var _form = _interopRequireDefault(require("../../mixins/form"));

var _formSize = _interopRequireDefault(require("../../mixins/form-size"));

var _formState = _interopRequireDefault(require("../../mixins/form-state"));

var _formCustom = _interopRequireDefault(require("../../mixins/form-custom"));

var _array = require("../../utils/array");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _form.default, _formSize.default, _formState.default, _formCustom.default, _formOptions.default],
  render: function render(h) {
    var _this = this;

    var $slots = this.$slots;
    var options = this.formOptions.map(function (option, index) {
      return h('option', {
        key: 'option_' + index + '_opt',
        attrs: {
          disabled: Boolean(option.disabled)
        },
        domProps: {
          innerHTML: option.text,
          value: option.value
        }
      });
    });
    return h('select', {
      ref: 'input',
      class: this.inputClass,
      directives: [{
        name: 'model',
        rawName: 'v-model',
        value: this.localValue,
        expression: 'localValue'
      }],
      attrs: {
        id: this.safeId(),
        name: this.name,
        multiple: this.multiple || null,
        size: this.computedSelectSize,
        disabled: this.disabled,
        required: this.required,
        'aria-required': this.required ? 'true' : null,
        'aria-invalid': this.computedAriaInvalid
      },
      on: {
        change: function change(evt) {
          var target = evt.target;
          var selectedVal = (0, _array.from)(target.options).filter(function (o) {
            return o.selected;
          }).map(function (o) {
            return '_value' in o ? o._value : o.value;
          });
          _this.localValue = target.multiple ? selectedVal : selectedVal[0];

          _this.$emit('change', _this.localValue);
        }
      }
    }, [$slots.first, options, $slots.default]);
  },
  data: function data() {
    return {
      localValue: this.value
    };
  },
  watch: {
    value: function value(newVal, oldVal) {
      this.localValue = newVal;
    },
    localValue: function localValue(newVal, oldVal) {
      this.$emit('input', this.localValue);
    }
  },
  props: {
    value: {},
    multiple: {
      type: Boolean,
      default: false
    },
    selectSize: {
      // Browsers default size to 0, which shows 4 rows in most browsers in multiple mode
      // Size of 1 can bork out firefox
      type: Number,
      default: 0
    },
    ariaInvalid: {
      type: [Boolean, String],
      default: false
    }
  },
  computed: {
    computedSelectSize: function computedSelectSize() {
      // Custom selects with a size of zero causes the arrows to be hidden,
      // so dont render the size attribute in this case
      return !this.plain && this.selectSize === 0 ? null : this.selectSize;
    },
    inputClass: function inputClass() {
      return ['form-control', this.stateClass, this.sizeFormClass, // Awaiting for https://github.com/twbs/bootstrap/issues/23058
      this.plain ? null : 'custom-select', this.plain || !this.size ? null : 'custom-select-' + this.size];
    },
    computedAriaInvalid: function computedAriaInvalid() {
      if (this.ariaInvalid === true || this.ariaInvalid === 'true') {
        return 'true';
      }

      return this.stateClass === 'is-invalid' ? 'true' : null;
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/form-options":"node_modules/bootstrap-vue/es/mixins/form-options.js","../../mixins/form":"node_modules/bootstrap-vue/es/mixins/form.js","../../mixins/form-size":"node_modules/bootstrap-vue/es/mixins/form-size.js","../../mixins/form-state":"node_modules/bootstrap-vue/es/mixins/form-state.js","../../mixins/form-custom":"node_modules/bootstrap-vue/es/mixins/form-custom.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js"}],"node_modules/bootstrap-vue/es/components/form-select/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formSelect = _interopRequireDefault(require("./form-select"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bFormSelect: _formSelect.default,
  bSelect: _formSelect.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./form-select":"node_modules/bootstrap-vue/es/components/form-select/form-select.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/image/img-lazy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _img = _interopRequireDefault(require("./img"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var THROTTLE = 100;
var _default = {
  components: {
    bImg: _img.default
  },
  render: function render(h) {
    return h('b-img', {
      props: {
        src: this.computedSrc,
        alt: this.alt,
        blank: this.computedBlank,
        blankColor: this.blankColor,
        width: this.computedWidth,
        height: this.computedHeight,
        fluid: this.fluid,
        fluidGrow: this.fluidGrow,
        block: this.block,
        thumbnail: this.thumbnail,
        rounded: this.rounded,
        left: this.left,
        right: this.right,
        center: this.center
      }
    });
  },
  data: function data() {
    return {
      isShown: false,
      scrollTimeout: null
    };
  },
  props: {
    src: {
      type: String,
      default: null,
      required: true
    },
    alt: {
      type: String,
      default: null
    },
    width: {
      type: [Number, String],
      default: null
    },
    height: {
      type: [Number, String],
      default: null
    },
    blankSrc: {
      // If null, a blank image is generated
      type: String,
      default: null
    },
    blankColor: {
      type: String,
      default: 'transparent'
    },
    blankWidth: {
      type: [Number, String],
      default: null
    },
    blankHeight: {
      type: [Number, String],
      default: null
    },
    fluid: {
      type: Boolean,
      default: false
    },
    fluidGrow: {
      type: Boolean,
      default: false
    },
    block: {
      type: Boolean,
      default: false
    },
    thumbnail: {
      type: Boolean,
      default: false
    },
    rounded: {
      type: [Boolean, String],
      default: false
    },
    left: {
      type: Boolean,
      default: false
    },
    right: {
      type: Boolean,
      default: false
    },
    center: {
      type: Boolean,
      default: false
    },
    offset: {
      type: [Number, String],
      default: 360
    },
    throttle: {
      type: [Number, String],
      default: THROTTLE
    }
  },
  computed: {
    computedSrc: function computedSrc() {
      return !this.blankSrc || this.isShown ? this.src : this.blankSrc;
    },
    computedBlank: function computedBlank() {
      return !(this.isShown || this.blankSrc);
    },
    computedWidth: function computedWidth() {
      return this.isShown ? this.width : this.blankWidth || this.width;
    },
    computedHeight: function computedHeight() {
      return this.isShown ? this.height : this.blankHeight || this.height;
    }
  },
  mounted: function mounted() {
    this.setListeners(true);
    this.checkView();
  },
  activated: function activated() {
    this.setListeners(true);
    this.checkView();
  },
  deactivated: function deactivated() {
    this.setListeners(false);
  },
  beforeDdestroy: function beforeDdestroy() {
    this.setListeners(false);
  },
  methods: {
    setListeners: function setListeners(on) {
      clearTimeout(this.scrollTimer);
      this.scrollTimeout = null;
      var root = window;

      if (on) {
        (0, _dom.eventOn)(root, 'scroll', this.onScroll);
        (0, _dom.eventOn)(root, 'resize', this.onScroll);
        (0, _dom.eventOn)(root, 'orientationchange', this.onScroll);
      } else {
        (0, _dom.eventOff)(root, 'scroll', this.onScroll);
        (0, _dom.eventOff)(root, 'resize', this.onScroll);
        (0, _dom.eventOff)(root, 'orientationchange', this.onScroll);
      }
    },
    checkView: function checkView() {
      // check bounding box + offset to see if we should show
      if (!(0, _dom.isVisible)(this.$el)) {
        // Element is hidden, so skip for now
        return;
      }

      var offset = parseInt(this.offset, 10) || 0;
      var docElement = document.documentElement;
      var view = {
        l: 0 - offset,
        t: 0 - offset,
        b: docElement.clientHeight + offset,
        r: docElement.clientWidth + offset
      };
      var box = (0, _dom.getBCR)(this.$el);

      if (box.right >= view.l && box.bottom >= view.t && box.left <= view.r && box.top <= view.b) {
        // image is in view (or about to be in view)
        this.isShown = true;
        this.setListeners(false);
      }
    },
    onScroll: function onScroll() {
      if (this.isShown) {
        this.setListeners(false);
      } else {
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = setTimeout(this.checkView, parseInt(this.throttle, 10) || THROTTLE);
      }
    }
  }
};
exports.default = _default;
},{"./img":"node_modules/bootstrap-vue/es/components/image/img.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/components/image/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _img = _interopRequireDefault(require("./img"));

var _imgLazy = _interopRequireDefault(require("./img-lazy"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bImg: _img.default,
  bImgLazy: _imgLazy.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./img":"node_modules/bootstrap-vue/es/components/image/img.js","./img-lazy":"node_modules/bootstrap-vue/es/components/image/img-lazy.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/jumbotron/jumbotron.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _container = _interopRequireDefault(require("../layout/container"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  fluid: {
    type: Boolean,
    default: false
  },
  containerFluid: {
    type: Boolean,
    default: false
  },
  header: {
    type: String,
    default: null
  },
  headerTag: {
    type: String,
    default: 'h1'
  },
  headerLevel: {
    type: [Number, String],
    default: '3'
  },
  lead: {
    type: String,
    default: null
  },
  leadTag: {
    type: String,
    default: 'p'
  },
  tag: {
    type: String,
    default: 'div'
  },
  bgVariant: {
    type: String,
    default: null
  },
  borderVariant: {
    type: String,
    default: null
  },
  textVariant: {
    type: String,
    default: null
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class2;

    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots; // The order of the conditionals matter.
    // We are building the component markup in order.

    var childNodes = [];
    var $slots = slots(); // Header

    if (props.header || $slots.header) {
      childNodes.push(h(props.headerTag, {
        class: _defineProperty({}, 'display-' + props.headerLevel, Boolean(props.headerLevel))
      }, $slots.header || props.header));
    } // Lead


    if (props.lead || $slots.lead) {
      childNodes.push(h(props.leadTag, {
        staticClass: 'lead'
      }, $slots.lead || props.lead));
    } // Default slot


    if ($slots.default) {
      childNodes.push($slots.default);
    } // If fluid, wrap content in a container/container-fluid


    if (props.fluid) {
      // Children become a child of a container
      childNodes = [h(_container.default, {
        props: {
          'fluid': props.containerFluid
        }
      }, childNodes)];
    } // Return the jumbotron


    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'jumbotron',
      class: (_class2 = {
        'jumbotron-fluid': props.fluid
      }, _defineProperty(_class2, 'text-' + props.textVariant, Boolean(props.textVariant)), _defineProperty(_class2, 'bg-' + props.bgVariant, Boolean(props.bgVariant)), _defineProperty(_class2, 'border-' + props.borderVariant, Boolean(props.borderVariant)), _defineProperty(_class2, 'border', Boolean(props.borderVariant)), _class2)
    }), childNodes);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../layout/container":"node_modules/bootstrap-vue/es/components/layout/container.js"}],"node_modules/bootstrap-vue/es/components/jumbotron/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jumbotron = _interopRequireDefault(require("./jumbotron"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bJumbotron: _jumbotron.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./jumbotron":"node_modules/bootstrap-vue/es/components/jumbotron/jumbotron.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/link/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _link = _interopRequireDefault(require("./link"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bLink: _link.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./link":"node_modules/bootstrap-vue/es/components/link/link.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/list-group/list-group.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  },
  flush: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var componentData = {
      staticClass: 'list-group',
      class: {
        'list-group-flush': props.flush
      }
    };
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, componentData), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/list-group/list-group-item.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var actionTags = ['a', 'router-link', 'button', 'b-link'];
var linkProps = (0, _link.propsFactory)();
delete linkProps.href.default;
delete linkProps.to.default;
var props = (0, _object.assign)({
  tag: {
    type: String,
    default: 'div'
  },
  action: {
    type: Boolean,
    default: null
  },
  button: {
    type: Boolean,
    default: null
  },
  variant: {
    type: String,
    default: null
  }
}, linkProps);
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class;

    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var tag = props.button ? 'button' : !props.href && !props.to ? props.tag : _link.default;
    var isAction = Boolean(props.href || props.to || props.action || props.button || (0, _array.arrayIncludes)(actionTags, props.tag));
    var componentData = {
      staticClass: 'list-group-item',
      class: (_class = {}, _defineProperty(_class, 'list-group-item-' + props.variant, Boolean(props.variant)), _defineProperty(_class, 'list-group-item-action', isAction), _defineProperty(_class, 'active', props.active), _defineProperty(_class, 'disabled', props.disabled), _class),
      attrs: tag === 'button' && props.disabled ? {
        disabled: true
      } : {},
      props: props.button ? {} : (0, _pluckProps.default)(linkProps, props)
    };
    return h(tag, (0, _vueFunctionalDataMerge.mergeData)(data, componentData), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/list-group/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _listGroup = _interopRequireDefault(require("./list-group"));

var _listGroupItem = _interopRequireDefault(require("./list-group-item"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bListGroup: _listGroup.default,
  bListGroupItem: _listGroupItem.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./list-group":"node_modules/bootstrap-vue/es/components/list-group/list-group.js","./list-group-item":"node_modules/bootstrap-vue/es/components/list-group/list-group-item.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/media/media-body.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'div'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'media-body'
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/media/media-aside.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  tag: {
    type: String,
    default: 'div'
  },
  verticalAlign: {
    type: String,
    default: 'top'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'd-flex',
      class: _defineProperty({}, 'align-self-' + props.verticalAlign, props.verticalAlign)
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/media/media.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _mediaBody = _interopRequireDefault(require("./media-body"));

var _mediaAside = _interopRequireDefault(require("./media-aside"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var props = {
  tag: {
    type: String,
    default: 'div'
  },
  rightAlign: {
    type: Boolean,
    default: false
  },
  verticalAlign: {
    type: String,
    default: 'top'
  },
  noBody: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        slots = _ref.slots,
        children = _ref.children;
    var childNodes = props.noBody ? children : [];
    var $slots = slots();

    if (!props.noBody) {
      if ($slots.aside && !props.rightAlign) {
        childNodes.push(h(_mediaAside.default, {
          staticClass: 'mr-3',
          props: {
            verticalAlign: props.verticalAlign
          }
        }, $slots.aside));
      }

      childNodes.push(h(_mediaBody.default, $slots.default));

      if ($slots.aside && props.rightAlign) {
        childNodes.push(h(_mediaAside.default, {
          staticClass: 'ml-3',
          props: {
            verticalAlign: props.verticalAlign
          }
        }, $slots.aside));
      }
    }

    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'media'
    }), childNodes);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","./media-body":"node_modules/bootstrap-vue/es/components/media/media-body.js","./media-aside":"node_modules/bootstrap-vue/es/components/media/media-aside.js"}],"node_modules/bootstrap-vue/es/components/media/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _media = _interopRequireDefault(require("./media"));

var _mediaAside = _interopRequireDefault(require("./media-aside"));

var _mediaBody = _interopRequireDefault(require("./media-body"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bMedia: _media.default,
  bMediaAside: _mediaAside.default,
  bMediaBody: _mediaBody.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./media":"node_modules/bootstrap-vue/es/components/media/media.js","./media-aside":"node_modules/bootstrap-vue/es/components/media/media-aside.js","./media-body":"node_modules/bootstrap-vue/es/components/media/media-body.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/modal/modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _button = _interopRequireDefault(require("../button/button"));

var _buttonClose = _interopRequireDefault(require("../button/button-close"));

var _id = _interopRequireDefault(require("../../mixins/id"));

var _listenOnRoot = _interopRequireDefault(require("../../mixins/listen-on-root"));

var _observeDom = _interopRequireDefault(require("../../utils/observe-dom"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _keyCodes = _interopRequireDefault(require("../../utils/key-codes"));

var _bvEvent = _interopRequireDefault(require("../../utils/bv-event.class"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

// Selectors for padding/margin adjustments
var Selector = {
  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
  STICKY_CONTENT: '.sticky-top',
  NAVBAR_TOGGLER: '.navbar-toggler' // ObserveDom config

};
var OBSERVER_CONFIG = {
  subtree: true,
  childList: true,
  characterData: true,
  attributes: true,
  attributeFilter: ['style', 'class']
};
var _default = {
  mixins: [_id.default, _listenOnRoot.default],
  components: {
    bBtn: _button.default,
    bBtnClose: _buttonClose.default
  },
  render: function render(h) {
    var _this = this;

    var $slots = this.$slots; // Modal Header

    var header = h(false);

    if (!this.hideHeader) {
      var modalHeader = $slots['modal-header'];

      if (!modalHeader) {
        var closeButton = h(false);

        if (!this.hideHeaderClose) {
          closeButton = h('b-btn-close', {
            props: {
              disabled: this.is_transitioning,
              ariaLabel: this.headerCloseLabel,
              textVariant: this.headerTextVariant
            },
            on: {
              click: function click(evt) {
                _this.hide('header-close');
              }
            }
          }, [$slots['modal-header-close']]);
        }

        modalHeader = [h(this.titleTag, {
          class: ['modal-title']
        }, [$slots['modal-title'] || this.title]), closeButton];
      }

      header = h('header', {
        ref: 'header',
        class: this.headerClasses,
        attrs: {
          id: this.safeId('__BV_modal_header_')
        }
      }, [modalHeader]);
    } // Modal Body


    var body = h('div', {
      ref: 'body',
      class: this.bodyClasses,
      attrs: {
        id: this.safeId('__BV_modal_body_')
      }
    }, [$slots.default]); // Modal Footer

    var footer = h(false);

    if (!this.hideFooter) {
      var modalFooter = $slots['modal-footer'];

      if (!modalFooter) {
        var cancelButton = h(false);

        if (!this.okOnly) {
          cancelButton = h('b-btn', {
            props: {
              variant: this.cancelVariant,
              size: this.buttonSize,
              disabled: this.cancelDisabled || this.busy || this.is_transitioning
            },
            on: {
              click: function click(evt) {
                _this.hide('cancel');
              }
            }
          }, [$slots['modal-cancel'] || this.cancelTitle]);
        }

        var okButton = h('b-btn', {
          props: {
            variant: this.okVariant,
            size: this.buttonSize,
            disabled: this.okDisabled || this.busy || this.is_transitioning
          },
          on: {
            click: function click(evt) {
              _this.hide('ok');
            }
          }
        }, [$slots['modal-ok'] || this.okTitle]);
        modalFooter = [cancelButton, okButton];
      }

      footer = h('footer', {
        ref: 'footer',
        class: this.footerClasses,
        attrs: {
          id: this.safeId('__BV_modal_footer_')
        }
      }, [modalFooter]);
    } // Assemble Modal Content


    var modalContent = h('div', {
      ref: 'content',
      class: ['modal-content'],
      attrs: {
        tabindex: '-1',
        role: 'document',
        'aria-labelledby': this.hideHeader ? null : this.safeId('__BV_modal_header_'),
        'aria-describedby': this.safeId('__BV_modal_body_')
      },
      on: {
        focusout: this.onFocusout,
        click: function click(evt) {
          evt.stopPropagation(); // https://github.com/bootstrap-vue/bootstrap-vue/issues/1528

          _this.$root.$emit('bv::dropdown::shown');
        }
      }
    }, [header, body, footer]); // Modal Dialog wrapper

    var modalDialog = h('div', {
      class: this.dialogClasses
    }, [modalContent]); // Modal

    var modal = h('div', {
      ref: 'modal',
      class: this.modalClasses,
      directives: [{
        name: 'show',
        rawName: 'v-show',
        value: this.is_visible,
        expression: 'is_visible'
      }],
      attrs: {
        id: this.safeId(),
        role: 'dialog',
        'aria-hidden': this.is_visible ? null : 'true'
      },
      on: {
        click: this.onClickOut,
        keydown: this.onEsc
      }
    }, [modalDialog]); // Wrap modal in transition

    modal = h('transition', {
      props: {
        enterClass: '',
        enterToClass: '',
        enterActiveClass: '',
        leaveClass: '',
        leaveActiveClass: '',
        leaveToClass: ''
      },
      on: {
        'before-enter': this.onBeforeEnter,
        enter: this.onEnter,
        'after-enter': this.onAfterEnter,
        'before-leave': this.onBeforeLeave,
        leave: this.onLeave,
        'after-leave': this.onAfterLeave
      }
    }, [modal]); // Modal Backdrop

    var backdrop = h(false);

    if (!this.hideBackdrop && (this.is_visible || this.is_transitioning)) {
      backdrop = h('div', {
        class: this.backdropClasses,
        attrs: {
          id: this.safeId('__BV_modal_backdrop_')
        }
      });
    } // Assemble modal and backdrop


    var outer = h(false);

    if (!this.is_hidden) {
      outer = h('div', {
        attrs: {
          id: this.safeId('__BV_modal_outer_')
        }
      }, [modal, backdrop]);
    } // Wrap in DIV to maintain thi.$el reference for hide/show method aceess


    return h('div', {}, [outer]);
  },
  data: function data() {
    return {
      is_hidden: this.lazy || false,
      is_visible: false,
      is_transitioning: false,
      is_show: false,
      is_block: false,
      scrollbarWidth: 0,
      isBodyOverflowing: false,
      return_focus: this.returnFocus || null
    };
  },
  model: {
    prop: 'visible',
    event: 'change'
  },
  props: {
    title: {
      type: String,
      default: ''
    },
    titleTag: {
      type: String,
      default: 'h5'
    },
    size: {
      type: String,
      default: 'md'
    },
    centered: {
      type: Boolean,
      default: false
    },
    buttonSize: {
      type: String,
      default: ''
    },
    noFade: {
      type: Boolean,
      default: false
    },
    noCloseOnBackdrop: {
      type: Boolean,
      default: false
    },
    noCloseOnEsc: {
      type: Boolean,
      default: false
    },
    noEnforceFocus: {
      type: Boolean,
      default: false
    },
    headerBgVariant: {
      type: String,
      default: null
    },
    headerBorderVariant: {
      type: String,
      default: null
    },
    headerTextVariant: {
      type: String,
      default: null
    },
    headerClass: {
      type: [String, Array],
      default: null
    },
    bodyBgVariant: {
      type: String,
      default: null
    },
    bodyTextVariant: {
      type: String,
      default: null
    },
    modalClass: {
      type: [String, Array],
      default: null
    },
    bodyClass: {
      type: [String, Array],
      default: null
    },
    footerBgVariant: {
      type: String,
      default: null
    },
    footerBorderVariant: {
      type: String,
      default: null
    },
    footerTextVariant: {
      type: String,
      default: null
    },
    footerClass: {
      type: [String, Array],
      default: null
    },
    hideHeader: {
      type: Boolean,
      default: false
    },
    hideFooter: {
      type: Boolean,
      default: false
    },
    hideHeaderClose: {
      type: Boolean,
      default: false
    },
    hideBackdrop: {
      type: Boolean,
      default: false
    },
    okOnly: {
      type: Boolean,
      default: false
    },
    okDisabled: {
      type: Boolean,
      default: false
    },
    cancelDisabled: {
      type: Boolean,
      default: false
    },
    visible: {
      type: Boolean,
      default: false
    },
    returnFocus: {
      default: null
    },
    headerCloseLabel: {
      type: String,
      default: 'Close'
    },
    cancelTitle: {
      type: String,
      default: 'Cancel'
    },
    okTitle: {
      type: String,
      default: 'OK'
    },
    cancelVariant: {
      type: String,
      default: 'secondary'
    },
    okVariant: {
      type: String,
      default: 'primary'
    },
    lazy: {
      type: Boolean,
      default: false
    },
    busy: {
      type: Boolean,
      default: false
    }
  },
  computed: {
    modalClasses: function modalClasses() {
      return ['modal', {
        fade: !this.noFade,
        show: this.is_show,
        'd-block': this.is_block
      }, this.modalClass];
    },
    dialogClasses: function dialogClasses() {
      var _ref;

      return ['modal-dialog', (_ref = {}, _defineProperty(_ref, 'modal-' + this.size, Boolean(this.size)), _defineProperty(_ref, 'modal-dialog-centered', this.centered), _ref)];
    },
    backdropClasses: function backdropClasses() {
      return ['modal-backdrop', {
        fade: !this.noFade,
        show: this.is_show || this.noFade
      }];
    },
    headerClasses: function headerClasses() {
      var _ref2;

      return ['modal-header', (_ref2 = {}, _defineProperty(_ref2, 'bg-' + this.headerBgVariant, Boolean(this.headerBgVariant)), _defineProperty(_ref2, 'text-' + this.headerTextVariant, Boolean(this.headerTextVariant)), _defineProperty(_ref2, 'border-' + this.headerBorderVariant, Boolean(this.headerBorderVariant)), _ref2), this.headerClass];
    },
    bodyClasses: function bodyClasses() {
      var _ref3;

      return ['modal-body', (_ref3 = {}, _defineProperty(_ref3, 'bg-' + this.bodyBgVariant, Boolean(this.bodyBgVariant)), _defineProperty(_ref3, 'text-' + this.bodyTextVariant, Boolean(this.bodyTextVariant)), _ref3), this.bodyClass];
    },
    footerClasses: function footerClasses() {
      var _ref4;

      return ['modal-footer', (_ref4 = {}, _defineProperty(_ref4, 'bg-' + this.footerBgVariant, Boolean(this.footerBgVariant)), _defineProperty(_ref4, 'text-' + this.footerTextVariant, Boolean(this.footerTextVariant)), _defineProperty(_ref4, 'border-' + this.footerBorderVariant, Boolean(this.footerBorderVariant)), _ref4), this.footerClass];
    }
  },
  watch: {
    visible: function visible(newVal, oldVal) {
      if (newVal === oldVal) {
        return;
      }

      this[newVal ? 'show' : 'hide']();
    }
  },
  methods: {
    // Public Methods
    show: function show() {
      if (this.is_visible) {
        return;
      }

      var showEvt = new _bvEvent.default('show', {
        cancelable: true,
        vueTarget: this,
        target: this.$refs.modal,
        relatedTarget: null
      });
      this.emitEvent(showEvt);

      if (showEvt.defaultPrevented || this.is_visible) {
        // Don't show if canceled
        return;
      }

      if ((0, _dom.hasClass)(document.body, 'modal-open')) {
        // If another modal is already open, wait for it to close
        this.$root.$once('bv::modal::hidden', this.doShow);
      } else {
        // Show the modal
        this.doShow();
      }
    },
    hide: function hide(trigger) {
      if (!this.is_visible) {
        return;
      }

      var hideEvt = new _bvEvent.default('hide', {
        cancelable: true,
        vueTarget: this,
        target: this.$refs.modal,
        // this could be the trigger element/component reference
        relatedTarget: null,
        isOK: trigger || null,
        trigger: trigger || null,
        cancel: function cancel() {
          // Backwards compatibility
          (0, _warn.default)('b-modal: evt.cancel() is deprecated. Please use evt.preventDefault().');
          this.preventDefault();
        }
      });

      if (trigger === 'ok') {
        this.$emit('ok', hideEvt);
      } else if (trigger === 'cancel') {
        this.$emit('cancel', hideEvt);
      }

      this.emitEvent(hideEvt); // Hide if not canceled

      if (hideEvt.defaultPrevented || !this.is_visible) {
        return;
      } // stop observing for content changes


      if (this._observer) {
        this._observer.disconnect();

        this._observer = null;
      }

      this.is_visible = false;
      this.$emit('change', false);
    },
    // Private method to finish showing modal
    doShow: function doShow() {
      var _this2 = this; // Plce modal in DOM if lazy


      this.is_hidden = false;
      this.$nextTick(function () {
        // We do this in nextTick to ensure the modal is in DOM first before we show it
        _this2.is_visible = true;

        _this2.$emit('change', true); // Observe changes in modal content and adjust if necessary


        _this2._observer = (0, _observeDom.default)(_this2.$refs.content, _this2.adjustDialog.bind(_this2), OBSERVER_CONFIG);
      });
    },
    // Transition Handlers
    onBeforeEnter: function onBeforeEnter() {
      this.is_transitioning = true;
      this.checkScrollbar();
      this.setScrollbar();
      this.adjustDialog();
      (0, _dom.addClass)(document.body, 'modal-open');
      this.setResizeEvent(true);
    },
    onEnter: function onEnter() {
      this.is_block = true;
      this.$refs.modal.scrollTop = 0;
    },
    onAfterEnter: function onAfterEnter() {
      var _this3 = this;

      this.is_show = true;
      this.is_transitioning = false;
      this.$nextTick(function () {
        _this3.focusFirst();

        var shownEvt = new _bvEvent.default('shown', {
          cancelable: false,
          vueTarget: _this3,
          target: _this3.$refs.modal,
          relatedTarget: null
        });

        _this3.emitEvent(shownEvt);
      });
    },
    onBeforeLeave: function onBeforeLeave() {
      this.is_transitioning = true;
      this.setResizeEvent(false);
    },
    onLeave: function onLeave() {
      // Remove the 'show' class
      this.is_show = false;
    },
    onAfterLeave: function onAfterLeave() {
      var _this4 = this;

      this.is_block = false;
      this.resetAdjustments();
      this.resetScrollbar();
      this.is_transitioning = false;
      (0, _dom.removeClass)(document.body, 'modal-open');
      this.$nextTick(function () {
        _this4.is_hidden = _this4.lazy || false;

        _this4.returnFocusTo();

        var hiddenEvt = new _bvEvent.default('hidden', {
          cancelable: false,
          vueTarget: _this4,
          target: _this4.lazy ? null : _this4.$refs.modal,
          relatedTarget: null
        });

        _this4.emitEvent(hiddenEvt);
      });
    },
    // Event emitter
    emitEvent: function emitEvent(bvEvt) {
      var type = bvEvt.type;
      this.$emit(type, bvEvt);
      this.$root.$emit('bv::modal::' + type, bvEvt);
    },
    // UI Event Handlers
    onClickOut: function onClickOut(evt) {
      // If backdrop clicked, hide modal
      if (this.is_visible && !this.noCloseOnBackdrop) {
        this.hide('backdrop');
      }
    },
    onEsc: function onEsc(evt) {
      // If ESC pressed, hide modal
      if (evt.keyCode === _keyCodes.default.ESC && this.is_visible && !this.noCloseOnEsc) {
        this.hide('esc');
      }
    },
    onFocusout: function onFocusout(evt) {
      // If focus leaves modal, bring it back
      // 'focusout' Event Listener bound on content
      var content = this.$refs.content;

      if (!this.noEnforceFocus && this.is_visible && content && !content.contains(evt.relatedTarget)) {
        content.focus();
      }
    },
    // Resize Listener
    setResizeEvent: function setResizeEvent(on) {
      var _this5 = this;

      ;
      ['resize', 'orientationchange'].forEach(function (evtName) {
        if (on) {
          (0, _dom.eventOn)(window, evtName, _this5.adjustDialog);
        } else {
          (0, _dom.eventOff)(window, evtName, _this5.adjustDialog);
        }
      });
    },
    // Root Listener handlers
    showHandler: function showHandler(id, triggerEl) {
      if (id === this.id) {
        this.return_focus = triggerEl || null;
        this.show();
      }
    },
    hideHandler: function hideHandler(id) {
      if (id === this.id) {
        this.hide();
      }
    },
    modalListener: function modalListener(bvEvt) {
      // If another modal opens, close this one
      if (bvEvt.vueTarget !== this) {
        this.hide();
      }
    },
    // Focus control handlers
    focusFirst: function focusFirst() {
      // Don't try and focus if we are SSR
      if (typeof document === 'undefined') {
        return;
      }

      var content = this.$refs.content;
      var modal = this.$refs.modal;
      var activeElement = document.activeElement;

      if (activeElement && content && content.contains(activeElement)) {// If activeElement is child of content, no need to change focus
      } else if (content) {
        if (modal) {
          modal.scrollTop = 0;
        } // Focus the modal content wrapper


        content.focus();
      }
    },
    returnFocusTo: function returnFocusTo() {
      // Prefer returnFocus prop over event specified return_focus value
      var el = this.returnFocus || this.return_focus || null;

      if (typeof el === 'string') {
        // CSS Selector
        el = (0, _dom.select)(el);
      }

      if (el) {
        el = el.$el || el;

        if ((0, _dom.isVisible)(el)) {
          el.focus();
        }
      }
    },
    // Utility methods
    getScrollbarWidth: function getScrollbarWidth() {
      var scrollDiv = document.createElement('div');
      scrollDiv.className = 'modal-scrollbar-measure';
      document.body.appendChild(scrollDiv);
      this.scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    },
    adjustDialog: function adjustDialog() {
      if (!this.is_visible) {
        return;
      }

      var modal = this.$refs.modal;
      var isModalOverflowing = modal.scrollHeight > document.documentElement.clientHeight;

      if (!this.isBodyOverflowing && isModalOverflowing) {
        modal.style.paddingLeft = this.scrollbarWidth + 'px';
      }

      if (this.isBodyOverflowing && !isModalOverflowing) {
        modal.style.paddingRight = this.scrollbarWidth + 'px';
      }
    },
    resetAdjustments: function resetAdjustments() {
      var modal = this.$refs.modal;

      if (modal) {
        modal.style.paddingLeft = '';
        modal.style.paddingRight = '';
      }
    },
    checkScrollbar: function checkScrollbar() {
      var rect = (0, _dom.getBCR)(document.body);
      this.isBodyOverflowing = rect.left + rect.right < window.innerWidth;
    },
    setScrollbar: function setScrollbar() {
      if (this.isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var computedStyle = window.getComputedStyle;
        var body = document.body;
        var scrollbarWidth = this.scrollbarWidth; // Adjust fixed content padding

        (0, _dom.selectAll)(Selector.FIXED_CONTENT).forEach(function (el) {
          var actualPadding = el.style.paddingRight;
          var calculatedPadding = computedStyle(el).paddingRight || 0;
          (0, _dom.setAttr)(el, 'data-padding-right', actualPadding);
          el.style.paddingRight = parseFloat(calculatedPadding) + scrollbarWidth + 'px';
        }); // Adjust sticky content margin

        (0, _dom.selectAll)(Selector.STICKY_CONTENT).forEach(function (el) {
          var actualMargin = el.style.marginRight;
          var calculatedMargin = computedStyle(el).marginRight || 0;
          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);
          el.style.marginRight = parseFloat(calculatedMargin) - scrollbarWidth + 'px';
        }); // Adjust navbar-toggler margin

        (0, _dom.selectAll)(Selector.NAVBAR_TOGGLER).forEach(function (el) {
          var actualMargin = el.style.marginRight;
          var calculatedMargin = computedStyle(el).marginRight || 0;
          (0, _dom.setAttr)(el, 'data-margin-right', actualMargin);
          el.style.marginRight = parseFloat(calculatedMargin) + scrollbarWidth + 'px';
        }); // Adjust body padding

        var actualPadding = body.style.paddingRight;
        var calculatedPadding = computedStyle(body).paddingRight;
        (0, _dom.setAttr)(body, 'data-padding-right', actualPadding);
        body.style.paddingRight = parseFloat(calculatedPadding) + scrollbarWidth + 'px';
      }
    },
    resetScrollbar: function resetScrollbar() {
      // Restore fixed content padding
      (0, _dom.selectAll)(Selector.FIXED_CONTENT).forEach(function (el) {
        if ((0, _dom.hasAttr)(el, 'data-padding-right')) {
          el.style.paddingRight = (0, _dom.getAttr)(el, 'data-padding-right') || '';
          (0, _dom.removeAttr)(el, 'data-padding-right');
        }
      }); // Restore sticky content and navbar-toggler margin

      (0, _dom.selectAll)(Selector.STICKY_CONTENT + ', ' + Selector.NAVBAR_TOGGLER).forEach(function (el) {
        if ((0, _dom.hasAttr)(el, 'data-margin-right')) {
          el.style.marginRight = (0, _dom.getAttr)(el, 'data-margin-right') || '';
          (0, _dom.removeAttr)(el, 'data-margin-right');
        }
      }); // Restore body padding

      var body = document.body;

      if ((0, _dom.hasAttr)(body, 'data-padding-right')) {
        body.style.paddingRight = (0, _dom.getAttr)(body, 'data-padding-right') || '';
        (0, _dom.removeAttr)(body, 'data-padding-right');
      }
    }
  },
  created: function created() {
    // create non-reactive property
    this._observer = null;
  },
  mounted: function mounted() {
    // Measure scrollbar
    this.getScrollbarWidth(); // Listen for events from others to either open or close ourselves

    this.listenOnRoot('bv::show::modal', this.showHandler);
    this.listenOnRoot('bv::hide::modal', this.hideHandler); // Listen for bv:modal::show events, and close ourselves if the opening modal not us

    this.listenOnRoot('bv::modal::show', this.modalListener); // Initially show modal?

    if (this.visible === true) {
      this.show();
    }
  },
  beforeDestroy: function beforeDestroy() {
    // Ensure everything is back to normal
    if (this._observer) {
      this._observer.disconnect();

      this._observer = null;
    }

    this.setResizeEvent(false); // Re-adjust body/navbar/fixed padding/margins (if needed)

    (0, _dom.removeClass)(document.body, 'modal-open');
    this.resetAdjustments();
    this.resetScrollbar();
  }
};
exports.default = _default;
},{"../button/button":"node_modules/bootstrap-vue/es/components/button/button.js","../button/button-close":"node_modules/bootstrap-vue/es/components/button/button-close.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/listen-on-root":"node_modules/bootstrap-vue/es/mixins/listen-on-root.js","../../utils/observe-dom":"node_modules/bootstrap-vue/es/utils/observe-dom.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../../utils/bv-event.class":"node_modules/bootstrap-vue/es/utils/bv-event.class.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/directives/modal/modal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _target = require("../../utils/target");

var _dom = require("../../utils/dom");

var listenTypes = {
  click: true
};
var _default = {
  // eslint-disable-next-line no-shadow-restricted-names
  bind: function bind(el, binding, vnode) {
    (0, _target.bindTargets)(vnode, binding, listenTypes, function (_ref) {
      var targets = _ref.targets,
          vnode = _ref.vnode;
      targets.forEach(function (target) {
        vnode.context.$root.$emit('bv::show::modal', target, vnode.elm);
      });
    });

    if (el.tagName !== 'BUTTON') {
      // If element is not a button, we add `role="button"` for accessibility
      (0, _dom.setAttr)(el, 'role', 'button');
    }
  },
  unbind: function unbind(el, binding, vnode) {
    (0, _target.unbindTargets)(vnode, binding, listenTypes);

    if (el.tagName !== 'BUTTON') {
      // If element is not a button, we add `role="button"` for accessibility
      (0, _dom.removeAttr)(el, 'role', 'button');
    }
  }
};
exports.default = _default;
},{"../../utils/target":"node_modules/bootstrap-vue/es/utils/target.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/directives/modal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _modal = _interopRequireDefault(require("./modal"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directives = {
  bModal: _modal.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerDirectives)(Vue, directives);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./modal":"node_modules/bootstrap-vue/es/directives/modal/modal.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/modal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _modal = _interopRequireDefault(require("./modal"));

var _modal2 = _interopRequireDefault(require("../../directives/modal"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bModal: _modal.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
    Vue.use(_modal2.default);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./modal":"node_modules/bootstrap-vue/es/components/modal/modal.js","../../directives/modal":"node_modules/bootstrap-vue/es/directives/modal/index.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/nav/nav.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _warn = _interopRequireDefault(require("../../utils/warn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var props = {
  tag: {
    type: String,
    default: 'ul'
  },
  fill: {
    type: Boolean,
    default: false
  },
  justified: {
    type: Boolean,
    default: false
  },
  tabs: {
    type: Boolean,
    default: false
  },
  pills: {
    type: Boolean,
    default: false
  },
  vertical: {
    type: Boolean,
    default: false
  },
  isNavBar: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;

    if (props.isNavBar) {
      (0, _warn.default)("b-nav: Prop 'is-nav-bar' is deprecated. Please use component '<b-navbar-nav>' instead.");
    }

    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      class: {
        'nav': !props.isNavBar,
        'navbar-nav': props.isNavBar,
        'nav-tabs': props.tabs && !props.isNavBar,
        'nav-pills': props.pills && !props.isNavBar,
        'flex-column': props.vertical && !props.isNavBar,
        'nav-fill': props.fill,
        'nav-justified': props.justified
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js"}],"node_modules/bootstrap-vue/es/components/nav/nav-item.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _link = _interopRequireWildcard(require("../link/link"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var props = (0, _link.propsFactory)();
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h('li', (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'nav-item'
    }), [h(_link.default, {
      staticClass: 'nav-link',
      props: props
    }, children)]);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/nav/nav-text.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'span'
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'navbar-text'
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/nav/nav-form.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _form = _interopRequireDefault(require("../form/form"));

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  functional: true,
  props: {
    id: {
      type: String,
      default: null
    }
  },
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(_form.default, (0, _vueFunctionalDataMerge.mergeData)(data, {
      attrs: {
        id: props.id
      },
      props: {
        inline: true
      }
    }), children);
  }
};
exports.default = _default;
},{"../form/form":"node_modules/bootstrap-vue/es/components/form/form.js","vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/nav/nav-item-dropdown.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

var _dropdown = _interopRequireDefault(require("../../mixins/dropdown"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default, _dropdown.default],
  render: function render(h) {
    var button = h('a', {
      class: this.toggleClasses,
      ref: 'toggle',
      attrs: {
        href: '#',
        id: this.safeId('_BV_button_'),
        disabled: this.disabled,
        'aria-haspopup': 'true',
        'aria-expanded': this.visible ? 'true' : 'false'
      },
      on: {
        click: this.toggle,
        keydown: this.toggle // space, enter, down

      }
    }, [this.$slots['button-content'] || this.$slots.text || h('span', {
      domProps: {
        innerHTML: this.text
      }
    })]);
    var menu = h('div', {
      class: this.menuClasses,
      ref: 'menu',
      attrs: {
        'aria-labelledby': this.safeId('_BV_button_')
      },
      on: {
        mouseover: this.onMouseOver,
        keydown: this.onKeydown // tab, up, down, esc

      }
    }, [this.$slots.default]);
    return h('li', {
      attrs: {
        id: this.safeId()
      },
      class: this.dropdownClasses
    }, [button, menu]);
  },
  computed: {
    isNav: function isNav() {
      // Signal to dropdown mixin that we are in a navbar
      return true;
    },
    dropdownClasses: function dropdownClasses() {
      return ['nav-item', 'b-nav-dropdown', 'dropdown', this.dropup ? 'dropup' : '', this.visible ? 'show' : ''];
    },
    toggleClasses: function toggleClasses() {
      return ['nav-link', this.noCaret ? '' : 'dropdown-toggle', this.disabled ? 'disabled' : '', this.extraToggleClasses ? this.extraToggleClasses : ''];
    },
    menuClasses: function menuClasses() {
      return ['dropdown-menu', this.right ? 'dropdown-menu-right' : 'dropdown-menu-left', this.visible ? 'show' : '', this.extraMenuClasses ? this.extraMenuClasses : ''];
    }
  },
  props: {
    noCaret: {
      type: Boolean,
      default: false
    },
    extraToggleClasses: {
      // Extra Toggle classes
      type: String,
      default: ''
    },
    extraMenuClasses: {
      // Extra Menu classes
      type: String,
      default: ''
    },
    role: {
      type: String,
      default: 'menu'
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/dropdown":"node_modules/bootstrap-vue/es/mixins/dropdown.js"}],"node_modules/bootstrap-vue/es/components/nav/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nav = _interopRequireDefault(require("./nav"));

var _navItem = _interopRequireDefault(require("./nav-item"));

var _navText = _interopRequireDefault(require("./nav-text"));

var _navForm = _interopRequireDefault(require("./nav-form"));

var _navItemDropdown = _interopRequireDefault(require("./nav-item-dropdown"));

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bNav: _nav.default,
  bNavItem: _navItem.default,
  bNavText: _navText.default,
  bNavForm: _navForm.default,
  bNavItemDropdown: _navItemDropdown.default,
  bNavItemDd: _navItemDropdown.default,
  bNavDropdown: _navItemDropdown.default,
  bNavDd: _navItemDropdown.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
    Vue.use(_dropdown.default);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./nav":"node_modules/bootstrap-vue/es/components/nav/nav.js","./nav-item":"node_modules/bootstrap-vue/es/components/nav/nav-item.js","./nav-text":"node_modules/bootstrap-vue/es/components/nav/nav-text.js","./nav-form":"node_modules/bootstrap-vue/es/components/nav/nav-form.js","./nav-item-dropdown":"node_modules/bootstrap-vue/es/components/nav/nav-item-dropdown.js","../dropdown":"node_modules/bootstrap-vue/es/components/dropdown/index.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/navbar/navbar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var props = {
  tag: {
    type: String,
    default: 'nav'
  },
  type: {
    type: String,
    default: 'light'
  },
  variant: {
    type: String
  },
  toggleable: {
    type: [Boolean, String],
    default: false
  },
  toggleBreakpoint: {
    // Deprecated.  Set toggleable to a string breakpoint
    type: String,
    default: null
  },
  fixed: {
    type: String
  },
  sticky: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var _class;

    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var breakpoint = props.toggleBreakpoint || (props.toggleable === true ? 'sm' : props.toggleable) || 'sm';
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'navbar',
      class: (_class = {}, _defineProperty(_class, 'navbar-' + props.type, Boolean(props.type)), _defineProperty(_class, 'bg-' + props.variant, Boolean(props.variant)), _defineProperty(_class, 'fixed-' + props.fixed, Boolean(props.fixed)), _defineProperty(_class, 'sticky-top', props.sticky), _defineProperty(_class, 'navbar-expand-' + breakpoint, props.toggleable !== false), _class)
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/navbar/navbar-nav.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var props = {
  tag: {
    type: String,
    default: 'ul'
  },
  fill: {
    type: Boolean,
    default: false
  },
  justified: {
    type: Boolean,
    default: false
  }
};
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    return h(props.tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'navbar-nav',
      class: {
        'nav-fill': props.fill,
        'nav-justified': props.justified
      }
    }), children);
  }
};
exports.default = _default;
},{"vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js"}],"node_modules/bootstrap-vue/es/components/navbar/navbar-brand.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.props = void 0;

var _link = _interopRequireWildcard(require("../link/link"));

var _vueFunctionalDataMerge = require("vue-functional-data-merge");

var _pluckProps = _interopRequireDefault(require("../../utils/pluck-props"));

var _object = require("../../utils/object");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var linkProps = (0, _link.propsFactory)();
linkProps.href.default = undefined;
linkProps.to.default = undefined;
var props = (0, _object.assign)(linkProps, {
  tag: {
    type: String,
    default: 'div'
  }
});
exports.props = props;
var _default = {
  functional: true,
  props: props,
  render: function render(h, _ref) {
    var props = _ref.props,
        data = _ref.data,
        children = _ref.children;
    var isLink = Boolean(props.to || props.href);
    var tag = isLink ? _link.default : props.tag;
    return h(tag, (0, _vueFunctionalDataMerge.mergeData)(data, {
      staticClass: 'navbar-brand',
      props: isLink ? (0, _pluckProps.default)(linkProps, props) : {}
    }), children);
  }
};
exports.default = _default;
},{"../link/link":"node_modules/bootstrap-vue/es/components/link/link.js","vue-functional-data-merge":"node_modules/vue-functional-data-merge/dist/lib.esm.js","../../utils/pluck-props":"node_modules/bootstrap-vue/es/utils/pluck-props.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/components/navbar/navbar-toggle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _listenOnRoot = _interopRequireDefault(require("../../mixins/listen-on-root"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_listenOnRoot.default],
  render: function render(h) {
    return h('button', {
      class: ['navbar-toggler'],
      attrs: {
        type: 'button',
        'aria-label': this.label,
        'aria-controls': this.target,
        'aria-expanded': this.toggleState ? 'true' : 'false'
      },
      on: {
        click: this.onClick
      }
    }, [this.$slots.default || h('span', {
      class: ['navbar-toggler-icon']
    })]);
  },
  data: function data() {
    return {
      toggleState: false
    };
  },
  props: {
    label: {
      type: String,
      default: 'Toggle navigation'
    },
    target: {
      type: String,
      required: true
    }
  },
  methods: {
    onClick: function onClick() {
      this.$root.$emit('bv::toggle::collapse', this.target);
    },
    handleStateEvt: function handleStateEvt(id, state) {
      if (id === this.target) {
        this.toggleState = state;
      }
    }
  },
  created: function created() {
    this.listenOnRoot('bv::collapse::state', this.handleStateEvt);
  }
};
exports.default = _default;
},{"../../mixins/listen-on-root":"node_modules/bootstrap-vue/es/mixins/listen-on-root.js"}],"node_modules/bootstrap-vue/es/components/navbar/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _navbar = _interopRequireDefault(require("./navbar"));

var _navbarNav = _interopRequireDefault(require("./navbar-nav"));

var _navbarBrand = _interopRequireDefault(require("./navbar-brand"));

var _navbarToggle = _interopRequireDefault(require("./navbar-toggle"));

var _nav = _interopRequireDefault(require("../nav"));

var _collapse = _interopRequireDefault(require("../collapse"));

var _dropdown = _interopRequireDefault(require("../dropdown"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bNavbar: _navbar.default,
  bNavbarNav: _navbarNav.default,
  bNavbarBrand: _navbarBrand.default,
  bNavbarToggle: _navbarToggle.default,
  bNavToggle: _navbarToggle.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
    Vue.use(_nav.default);
    Vue.use(_collapse.default);
    Vue.use(_dropdown.default);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./navbar":"node_modules/bootstrap-vue/es/components/navbar/navbar.js","./navbar-nav":"node_modules/bootstrap-vue/es/components/navbar/navbar-nav.js","./navbar-brand":"node_modules/bootstrap-vue/es/components/navbar/navbar-brand.js","./navbar-toggle":"node_modules/bootstrap-vue/es/components/navbar/navbar-toggle.js","../nav":"node_modules/bootstrap-vue/es/components/nav/index.js","../collapse":"node_modules/bootstrap-vue/es/components/collapse/index.js","../dropdown":"node_modules/bootstrap-vue/es/components/dropdown/index.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/range.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * @param {number} length
 * @return {Array}
 */
var _default = function _default(length) {
  return Array.apply(null, {
    length: length
  });
};

exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/mixins/pagination.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _range = _interopRequireDefault(require("../utils/range"));

var _keyCodes = _interopRequireDefault(require("../utils/key-codes"));

var _dom = require("../utils/dom");

var _link = _interopRequireDefault(require("../components/link/link"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Comon props, computed, data, render function, and methods for b-pagination and b-pagination-nav
 */
// Make an array of N to N+X
function makePageArray(startNum, numPages) {
  return (0, _range.default)(numPages).map(function (value, index) {
    return {
      number: index + startNum,
      className: null
    };
  });
} // Threshold of limit size when we start/stop showing ellipsis


var ELLIPSIS_THRESHOLD = 3; // Props object

var props = {
  disabled: {
    type: Boolean,
    default: false
  },
  value: {
    type: Number,
    default: 1
  },
  limit: {
    type: Number,
    default: 5
  },
  size: {
    type: String,
    default: 'md'
  },
  align: {
    type: String,
    default: 'left'
  },
  hideGotoEndButtons: {
    type: Boolean,
    default: false
  },
  ariaLabel: {
    type: String,
    default: 'Pagination'
  },
  labelFirstPage: {
    type: String,
    default: 'Goto first page'
  },
  firstText: {
    type: String,
    default: '&laquo;'
  },
  labelPrevPage: {
    type: String,
    default: 'Goto previous page'
  },
  prevText: {
    type: String,
    default: '&lsaquo;'
  },
  labelNextPage: {
    type: String,
    default: 'Goto next page'
  },
  nextText: {
    type: String,
    default: '&rsaquo;'
  },
  labelLastPage: {
    type: String,
    default: 'Goto last page'
  },
  lastText: {
    type: String,
    default: '&raquo;'
  },
  labelPage: {
    type: String,
    default: 'Goto page'
  },
  hideEllipsis: {
    type: Boolean,
    default: false
  },
  ellipsisText: {
    type: String,
    default: '&hellip;'
  }
};
var _default = {
  components: {
    bLink: _link.default
  },
  data: function data() {
    return {
      showFirstDots: false,
      showLastDots: false,
      currentPage: this.value
    };
  },
  props: props,
  render: function render(h) {
    var _this = this;

    var buttons = []; // Factory function for prev/next/first/last buttons

    var makeEndBtns = function makeEndBtns(linkTo, ariaLabel, btnText, pageTest) {
      var button = void 0;
      pageTest = pageTest || linkTo; // Page # to test against to disable

      if (_this.disabled || _this.isActive(pageTest)) {
        button = h('li', {
          class: ['page-item', 'disabled'],
          attrs: {
            role: 'none presentation',
            'aria-hidden': 'true'
          }
        }, [h('span', {
          class: ['page-link'],
          domProps: {
            innerHTML: btnText
          }
        })]);
      } else {
        button = h('li', {
          class: ['page-item'],
          attrs: {
            role: 'none presentation'
          }
        }, [h('b-link', {
          class: ['page-link'],
          props: _this.linkProps(linkTo),
          attrs: {
            role: 'menuitem',
            tabindex: '-1',
            'aria-label': ariaLabel,
            'aria-controls': _this.ariaControls || null
          },
          on: {
            click: function click(evt) {
              _this.onClick(linkTo, evt);
            },
            keydown: function keydown(evt) {
              // Links don't normally respond to SPACE, so we add that functionality
              if (evt.keyCode === _keyCodes.default.SPACE) {
                evt.preventDefault();

                _this.onClick(linkTo, evt);
              }
            }
          }
        }, [h('span', {
          attrs: {
            'aria-hidden': 'true'
          },
          domProps: {
            innerHTML: btnText
          }
        })])]);
      }

      return button;
    }; // Ellipsis factory


    var makeEllipsis = function makeEllipsis() {
      return h('li', {
        class: ['page-item', 'disabled', 'd-none', 'd-sm-flex'],
        attrs: {
          role: 'separator'
        }
      }, [h('span', {
        class: ['page-link'],
        domProps: {
          innerHTML: _this.ellipsisText
        }
      })]);
    }; // Goto First Page button


    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtns(1, this.labelFirstPage, this.firstText)); // Goto Previous page button

    buttons.push(makeEndBtns(this.currentPage - 1, this.labelPrevPage, this.prevText, 1)); // First Ellipsis Bookend

    buttons.push(this.showFirstDots ? makeEllipsis() : h(false)); // Individual Page links

    this.pageList.forEach(function (page) {
      var inner = void 0;

      var pageNum = _this.makePage(page.number);

      if (_this.disabled) {
        inner = h('span', {
          class: ['page-link'],
          domProps: {
            innerHTML: pageNum
          }
        });
      } else {
        var active = _this.isActive(page.number);

        inner = h('b-link', {
          class: _this.pageLinkClasses(page),
          props: _this.linkProps(page.number),
          attrs: {
            role: 'menuitemradio',
            tabindex: active ? '0' : '-1',
            'aria-controls': _this.ariaControls || null,
            'aria-label': _this.labelPage + ' ' + page.number,
            'aria-checked': active ? 'true' : 'false',
            'aria-posinset': page.number,
            'aria-setsize': _this.numberOfPages
          },
          domProps: {
            innerHTML: pageNum
          },
          on: {
            click: function click(evt) {
              _this.onClick(page.number, evt);
            },
            keydown: function keydown(evt) {
              if (evt.keyCode === _keyCodes.default.SPACE) {
                evt.preventDefault();

                _this.onClick(page.number, evt);
              }
            }
          }
        });
      }

      buttons.push(h('li', {
        key: page.number,
        class: _this.pageItemClasses(page),
        attrs: {
          role: 'none presentation'
        }
      }, [inner]));
    }); // Last Ellipsis Bookend

    buttons.push(this.showLastDots ? makeEllipsis() : h(false)); // Goto Next page button

    buttons.push(makeEndBtns(this.currentPage + 1, this.labelNextPage, this.nextText, this.numberOfPages)); // Goto Last Page button

    buttons.push(this.hideGotoEndButtons ? h(false) : makeEndBtns(this.numberOfPages, this.labelLastPage, this.lastText)); // Assemble the paginatiom buttons

    var pagination = h('ul', {
      ref: 'ul',
      class: ['pagination', 'b-pagination', this.btnSize, this.alignment],
      attrs: {
        role: 'menubar',
        'aria-disabled': this.disabled ? 'true' : 'false',
        'aria-label': this.ariaLabel || null
      },
      on: {
        keydown: function keydown(evt) {
          var keyCode = evt.keyCode;
          var shift = evt.shiftKey;

          if (keyCode === _keyCodes.default.LEFT) {
            evt.preventDefault();
            shift ? _this.focusFirst() : _this.focusPrev();
          } else if (keyCode === _keyCodes.default.RIGHT) {
            evt.preventDefault();
            shift ? _this.focusLast() : _this.focusNext();
          }
        }
      }
    }, buttons); // if we are pagination-nav, wrap in '<nav>' wrapper

    return this.isNav ? h('nav', {}, [pagination]) : pagination;
  },
  watch: {
    currentPage: function currentPage(newPage, oldPage) {
      if (newPage !== oldPage) {
        this.$emit('input', newPage);
      }
    },
    value: function value(newValue, oldValue) {
      if (newValue !== oldValue) {
        this.currentPage = newValue;
      }
    }
  },
  computed: {
    btnSize: function btnSize() {
      return this.size ? 'pagination-' + this.size : '';
    },
    alignment: function alignment() {
      if (this.align === 'center') {
        return 'justify-content-center';
      } else if (this.align === 'end' || this.align === 'right') {
        return 'justify-content-end';
      }

      return '';
    },
    pageList: function pageList() {
      // Sanity checks
      if (this.currentPage > this.numberOfPages) {
        this.currentPage = this.numberOfPages;
      } else if (this.currentPage < 1) {
        this.currentPage = 1;
      } // - Hide first ellipsis marker


      this.showFirstDots = false; // - Hide last ellipsis marker

      this.showLastDots = false;
      var numLinks = this.limit;
      var startNum = 1;

      if (this.numberOfPages <= this.limit) {
        // Special Case: Less pages available than the limit of displayed pages
        numLinks = this.numberOfPages;
      } else if (this.currentPage < this.limit - 1 && this.limit > ELLIPSIS_THRESHOLD) {
        // We are near the beginning of the page list
        if (!this.hideEllipsis) {
          numLinks = this.limit - 1;
          this.showLastDots = true;
        }
      } else if (this.numberOfPages - this.currentPage + 2 < this.limit && this.limit > ELLIPSIS_THRESHOLD) {
        // We are near the end of the list
        if (!this.hideEllipsis) {
          this.showFirstDots = true;
          numLinks = this.limit - 1;
        }

        startNum = this.numberOfPages - numLinks + 1;
      } else {
        // We are somewhere in the middle of the page list
        if (this.limit > ELLIPSIS_THRESHOLD && !this.hideEllipsis) {
          this.showFirstDots = true;
          this.showLastDots = true;
          numLinks = this.limit - 2;
        }

        startNum = this.currentPage - Math.floor(numLinks / 2);
      } // Sanity checks


      if (startNum < 1) {
        startNum = 1;
      } else if (startNum > this.numberOfPages - numLinks) {
        startNum = this.numberOfPages - numLinks + 1;
      } // Generate list of page numbers


      var pages = makePageArray(startNum, numLinks); // We limit to a total of 3 page buttons on small screens
      // Ellipsis will also be hidden on small screens

      if (pages.length > 3) {
        var idx = this.currentPage - startNum;

        if (idx === 0) {
          // Keep leftmost 3 buttons visible
          for (var i = 3; i < pages.length; i++) {
            pages[i].className = 'd-none d-sm-flex';
          }
        } else if (idx === pages.length - 1) {
          // Keep rightmost 3 buttons visible
          for (var _i = 0; _i < pages.length - 3; _i++) {
            pages[_i].className = 'd-none d-sm-flex';
          }
        } else {
          // hide left button(s)
          for (var _i2 = 0; _i2 < idx - 1; _i2++) {
            pages[_i2].className = 'd-none d-sm-flex';
          } // hide right button(s)


          for (var _i3 = pages.length - 1; _i3 > idx + 1; _i3--) {
            pages[_i3].className = 'd-none d-sm-flex';
          }
        }
      }

      return pages;
    }
  },
  methods: {
    isActive: function isActive(pagenum) {
      return pagenum === this.currentPage;
    },
    pageItemClasses: function pageItemClasses(page) {
      return ['page-item', this.disabled ? 'disabled' : '', this.isActive(page.number) ? 'active' : '', page.className];
    },
    pageLinkClasses: function pageLinkClasses(page) {
      return ['page-link', this.disabled ? 'disabled' : '', // Interim workaround to get better focus styling of active button
      // See https://github.com/twbs/bootstrap/issues/24838
      this.isActive(page.number) ? 'btn-primary' : ''];
    },
    getButtons: function getButtons() {
      // Return only buttons that are visible
      return (0, _dom.selectAll)('a.page-link', this.$el).filter(function (btn) {
        return (0, _dom.isVisible)(btn);
      });
    },
    setBtnFocus: function setBtnFocus(btn) {
      this.$nextTick(function () {
        btn.focus();
      });
    },
    focusCurrent: function focusCurrent() {
      var _this2 = this;

      var btn = this.getButtons().find(function (el) {
        return parseInt((0, _dom.getAttr)(el, 'aria-posinset'), 10) === _this2.currentPage;
      });

      if (btn && btn.focus) {
        this.setBtnFocus(btn);
      } else {
        // Fallback if current page is not in button list
        this.focusFirst();
      }
    },
    focusFirst: function focusFirst() {
      var btn = this.getButtons().find(function (el) {
        return !(0, _dom.isDisabled)(el);
      });

      if (btn && btn.focus && btn !== document.activeElement) {
        this.setBtnFocus(btn);
      }
    },
    focusLast: function focusLast() {
      var btn = this.getButtons().reverse().find(function (el) {
        return !(0, _dom.isDisabled)(el);
      });

      if (btn && btn.focus && btn !== document.activeElement) {
        this.setBtnFocus(btn);
      }
    },
    focusPrev: function focusPrev() {
      var buttons = this.getButtons();
      var idx = buttons.indexOf(document.activeElement);

      if (idx > 0 && !(0, _dom.isDisabled)(buttons[idx - 1]) && buttons[idx - 1].focus) {
        this.setBtnFocus(buttons[idx - 1]);
      }
    },
    focusNext: function focusNext() {
      var buttons = this.getButtons();
      var idx = buttons.indexOf(document.activeElement);
      var cnt = buttons.length - 1;

      if (idx < cnt && !(0, _dom.isDisabled)(buttons[idx + 1]) && buttons[idx + 1].focus) {
        this.setBtnFocus(buttons[idx + 1]);
      }
    }
  }
};
exports.default = _default;
},{"../utils/range":"node_modules/bootstrap-vue/es/utils/range.js","../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../components/link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/pagination/pagination.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pagination = _interopRequireDefault(require("../../mixins/pagination"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var props = {
  perPage: {
    type: Number,
    default: 20
  },
  totalRows: {
    type: Number,
    default: 20
  },
  ariaControls: {
    type: String,
    default: null // Our render function is brought in from the pagination mixin

  }
};
var _default = {
  mixins: [_pagination.default],
  props: props,
  computed: {
    numberOfPages: function numberOfPages() {
      var result = Math.ceil(this.totalRows / this.perPage);
      return result < 1 ? 1 : result;
    }
  },
  methods: {
    // These methods are used by the render function
    onClick: function onClick(num, evt) {
      var _this = this; // Handle edge cases where number of pages has changed (i.e. if perPage changes)


      if (num > this.numberOfPages) {
        num = this.numberOfPages;
      } else if (num < 1) {
        num = 1;
      }

      this.currentPage = num;
      this.$nextTick(function () {
        // Keep the current button focused if possible
        var target = evt.target;

        if ((0, _dom.isVisible)(target) && _this.$el.contains(target) && target.focus) {
          target.focus();
        } else {
          _this.focusCurrent();
        }
      });
      this.$emit('change', this.currentPage);
    },
    makePage: function makePage(pagenum) {
      return pagenum;
    },
    linkProps: function linkProps(pagenum) {
      return {
        href: '#'
      };
    }
  }
};
exports.default = _default;
},{"../../mixins/pagination":"node_modules/bootstrap-vue/es/mixins/pagination.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/components/pagination/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _pagination = _interopRequireDefault(require("./pagination"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bPagination: _pagination.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./pagination":"node_modules/bootstrap-vue/es/components/pagination/pagination.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/pagination-nav/pagination-nav.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _object = require("../../utils/object");

var _pagination = _interopRequireDefault(require("../../mixins/pagination"));

var _link = require("../link/link");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

// Props needed for router links
var routerProps = (0, _link.pickLinkProps)('activeClass', 'exactActiveClass', 'append', 'exact', 'replace', 'target', 'rel'); // Props object

var props = (0, _object.assign)( // pagination-nav specific props
{
  numberOfPages: {
    type: Number,
    default: 1
  },
  baseUrl: {
    type: String,
    default: '/'
  },
  useRouter: {
    type: Boolean,
    default: false
  },
  linkGen: {
    type: Function,
    default: null
  },
  pageGen: {
    type: Function,
    default: null
  }
}, // Router specific props
routerProps); // Our render function is brought in via the pagination mixin

var _default = {
  mixins: [_pagination.default],
  props: props,
  computed: {
    // Used by render function to trigger wraping in '<nav>' element
    isNav: function isNav() {
      return true;
    }
  },
  methods: {
    onClick: function onClick(pageNum, evt) {
      this.currentPage = pageNum;
    },
    makePage: function makePage(pagenum) {
      if (this.pageGen && typeof this.pageGen === 'function') {
        return this.pageGen(pagenum);
      }

      return pagenum;
    },
    makeLink: function makeLink(pagenum) {
      if (this.linkGen && typeof this.linkGen === 'function') {
        return this.linkGen(pagenum);
      }

      var link = '' + this.baseUrl + pagenum;
      return this.useRouter ? {
        path: link
      } : link;
    },
    linkProps: function linkProps(pagenum) {
      var link = this.makeLink(pagenum);
      var props = {
        href: typeof link === 'string' ? link : void 0,
        target: this.target || null,
        rel: this.rel || null,
        disabled: this.disabled
      };

      if (this.useRouter || (typeof link === 'undefined' ? 'undefined' : _typeof(link)) === 'object') {
        props = (0, _object.assign)(props, {
          to: link,
          exact: this.exact,
          activeClass: this.activeClass,
          exactActiveClass: this.exactActiveClass,
          append: this.append,
          replace: this.replace
        });
      }

      return props;
    }
  }
};
exports.default = _default;
},{"../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../mixins/pagination":"node_modules/bootstrap-vue/es/mixins/pagination.js","../link/link":"node_modules/bootstrap-vue/es/components/link/link.js"}],"node_modules/bootstrap-vue/es/components/pagination-nav/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _paginationNav = _interopRequireDefault(require("./pagination-nav"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bPaginationNav: _paginationNav.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./pagination-nav":"node_modules/bootstrap-vue/es/components/pagination-nav/pagination-nav.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/utils/tooltip.class.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popper = _interopRequireDefault(require("popper.js"));

var _bvEvent = _interopRequireDefault(require("./bv-event.class"));

var _object = require("./object");

var _array = require("./array");

var _dom = require("./dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var NAME = 'tooltip';
var CLASS_PREFIX = 'bs-tooltip';
var BSCLS_PREFIX_REGEX = new RegExp('\\b' + CLASS_PREFIX + '\\S+', 'g');
var TRANSITION_DURATION = 150; // Modal $root hidden event

var MODAL_CLOSE_EVENT = 'bv::modal::hidden'; // Modal container for appending tip/popover

var MODAL_CLASS = '.modal-content';
var AttachmentMap = {
  AUTO: 'auto',
  TOP: 'top',
  RIGHT: 'right',
  BOTTOM: 'bottom',
  LEFT: 'left',
  TOPLEFT: 'top',
  TOPRIGHT: 'top',
  RIGHTTOP: 'right',
  RIGHTBOTTOM: 'right',
  BOTTOMLEFT: 'bottom',
  BOTTOMRIGHT: 'bottom',
  LEFTTOP: 'left',
  LEFTBOTTOM: 'left'
};
var OffsetMap = {
  AUTO: 0,
  TOPLEFT: -1,
  TOP: 0,
  TOPRIGHT: +1,
  RIGHTTOP: -1,
  RIGHT: 0,
  RIGHTBOTTOM: +1,
  BOTTOMLEFT: -1,
  BOTTOM: 0,
  BOTTOMRIGHT: +1,
  LEFTTOP: -1,
  LEFT: 0,
  LEFTBOTTOM: +1
};
var HoverState = {
  SHOW: 'show',
  OUT: 'out'
};
var ClassName = {
  FADE: 'fade',
  SHOW: 'show'
};
var Selector = {
  TOOLTIP: '.tooltip',
  TOOLTIP_INNER: '.tooltip-inner',
  ARROW: '.arrow' // ESLINT: Not used
  // const Trigger = {
  //   HOVER: 'hover',
  //   FOCUS: 'focus',
  //   CLICK: 'click',
  //   BLUR: 'blur',
  //   MANUAL: 'manual'
  // }

};
var Defaults = {
  animation: true,
  template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div>' + '</div>',
  trigger: 'hover focus',
  title: '',
  delay: 0,
  html: false,
  placement: 'top',
  offset: 0,
  arrowPadding: 6,
  container: false,
  fallbackPlacement: 'flip',
  callbacks: {},
  boundary: 'scrollParent' // Transition Event names

};
var TransitionEndEvents = {
  WebkitTransition: ['webkitTransitionEnd'],
  MozTransition: ['transitionend'],
  OTransition: ['otransitionend', 'oTransitionEnd'],
  transition: ['transitionend'] // Client Side Tip ID counter for aria-describedby attribute
  // Could use Alex's uid generator util
  // Each tooltip requires a unique client side ID

};
var NEXTID = 1;
/* istanbul ignore next */

function generateId(name) {
  return '__BV_' + name + '_' + NEXTID++ + '__';
}
/*
 * ToolTip Class definition
 */

/* istanbul ignore next: difficult to test in Jest/JSDOM environment */


var ToolTip = function () {
  // Main constructor
  function ToolTip(element, config, $root) {
    _classCallCheck(this, ToolTip); // New tooltip object


    this.$isEnabled = true;
    this.$fadeTimeout = null;
    this.$hoverTimeout = null;
    this.$visibleInterval = null;
    this.$hoverState = '';
    this.$activeTrigger = {};
    this.$popper = null;
    this.$element = element;
    this.$tip = null;
    this.$id = generateId(this.constructor.NAME);
    this.$root = $root || null;
    this.$routeWatcher = null; // We use a bound version of the following handlers for root/modal listeners to maintain the 'this' context

    this.$forceHide = this.forceHide.bind(this);
    this.$doHide = this.doHide.bind(this);
    this.$doShow = this.doShow.bind(this);
    this.$doDisable = this.doDisable.bind(this);
    this.$doEnable = this.doEnable.bind(this); // Set the configuration

    this.updateConfig(config);
  } // NOTE: Overridden by PopOver class


  _createClass(ToolTip, [{
    key: 'updateConfig',
    // Update config
    value: function updateConfig(config) {
      // Merge config into defaults. We use "this" here because PopOver overrides Default
      var updatedConfig = (0, _object.assign)({}, this.constructor.Default, config); // Sanitize delay

      if (config.delay && typeof config.delay === 'number') {
        updatedConfig.delay = {
          show: config.delay,
          hide: config.delay
        };
      } // Title for tooltip and popover


      if (config.title && typeof config.title === 'number') {
        updatedConfig.title = config.title.toString();
      } // Content only for popover


      if (config.content && typeof config.content === 'number') {
        updatedConfig.content = config.content.toString();
      } // Hide element original title if needed


      this.fixTitle(); // Update the config

      this.$config = updatedConfig; // Stop/Restart listening

      this.unListen();
      this.listen();
    } // Destroy this instance

  }, {
    key: 'destroy',
    value: function destroy() {
      // Stop listening to trigger events
      this.unListen(); // Disable while open listeners/watchers

      this.setWhileOpenListeners(false); // Clear any timeouts

      clearTimeout(this.$hoverTimeout);
      this.$hoverTimeout = null;
      clearTimeout(this.$fadeTimeout);
      this.$fadeTimeout = null; // Remove popper

      if (this.$popper) {
        this.$popper.destroy();
      }

      this.$popper = null; // Remove tip from document

      if (this.$tip && this.$tip.parentElement) {
        this.$tip.parentElement.removeChild(this.$tip);
      }

      this.$tip = null; // Null out other properties

      this.$id = null;
      this.$isEnabled = null;
      this.$root = null;
      this.$element = null;
      this.$config = null;
      this.$hoverState = null;
      this.$activeTrigger = null;
      this.$forceHide = null;
      this.$doHide = null;
      this.$doShow = null;
      this.$doDisable = null;
      this.$doEnable = null;
    }
  }, {
    key: 'enable',
    value: function enable() {
      // Create a non-cancelable BvEvent
      var enabledEvt = new _bvEvent.default('enabled', {
        cancelable: false,
        target: this.$element,
        relatedTarget: null
      });
      this.$isEnabled = true;
      this.emitEvent(enabledEvt);
    }
  }, {
    key: 'disable',
    value: function disable() {
      // Create a non-cancelable BvEvent
      var disabledEvt = new _bvEvent.default('disabled', {
        cancelable: false,
        target: this.$element,
        relatedTarget: null
      });
      this.$isEnabled = false;
      this.emitEvent(disabledEvt);
    } // Click toggler

  }, {
    key: 'toggle',
    value: function toggle(event) {
      if (!this.$isEnabled) {
        return;
      }

      if (event) {
        this.$activeTrigger.click = !this.$activeTrigger.click;

        if (this.isWithActiveTrigger()) {
          this.enter(null);
        } else {
          this.leave(null);
        }
      } else {
        if ((0, _dom.hasClass)(this.getTipElement(), ClassName.SHOW)) {
          this.leave(null);
        } else {
          this.enter(null);
        }
      }
    } // Show tooltip

  }, {
    key: 'show',
    value: function show() {
      var _this = this;

      if (!document.body.contains(this.$element) || !(0, _dom.isVisible)(this.$element)) {
        // If trigger element isn't in the DOM or is not visible
        return;
      } // Build tooltip element (also sets this.$tip)


      var tip = this.getTipElement();
      this.fixTitle();
      this.setContent(tip);

      if (!this.isWithContent(tip)) {
        // if No content, don't bother showing
        this.$tip = null;
        return;
      } // Set ID on tip and aria-describedby on element


      (0, _dom.setAttr)(tip, 'id', this.$id);
      this.addAriaDescribedby(); // Set animation on or off

      if (this.$config.animation) {
        (0, _dom.addClass)(tip, ClassName.FADE);
      } else {
        (0, _dom.removeClass)(tip, ClassName.FADE);
      }

      var placement = this.getPlacement();
      var attachment = this.constructor.getAttachment(placement);
      this.addAttachmentClass(attachment); // Create a cancelable BvEvent

      var showEvt = new _bvEvent.default('show', {
        cancelable: true,
        target: this.$element,
        relatedTarget: tip
      });
      this.emitEvent(showEvt);

      if (showEvt.defaultPrevented) {
        // Don't show if event cancelled
        this.$tip = null;
        return;
      } // Insert tooltip if needed


      var container = this.getContainer();

      if (!document.body.contains(tip)) {
        container.appendChild(tip);
      } // Refresh popper


      this.removePopper();
      this.$popper = new _popper.default(this.$element, tip, this.getPopperConfig(placement, tip)); // Transitionend Callback

      var complete = function complete() {
        if (_this.$config.animation) {
          _this.fixTransition(tip);
        }

        var prevHoverState = _this.$hoverState;
        _this.$hoverState = null;

        if (prevHoverState === HoverState.OUT) {
          _this.leave(null);
        } // Create a non-cancelable BvEvent


        var shownEvt = new _bvEvent.default('shown', {
          cancelable: false,
          target: _this.$element,
          relatedTarget: tip
        });

        _this.emitEvent(shownEvt);
      }; // Enable while open listeners/watchers


      this.setWhileOpenListeners(true); // Show tip

      (0, _dom.addClass)(tip, ClassName.SHOW); // Start the transition/animation

      this.transitionOnce(tip, complete);
    } // handler for periodic visibility check

  }, {
    key: 'visibleCheck',
    value: function visibleCheck(on) {
      var _this2 = this;

      clearInterval(this.$visibleInterval);
      this.$visibleInterval = null;

      if (on) {
        this.$visibleInterval = setInterval(function () {
          var tip = _this2.getTipElement();

          if (tip && !(0, _dom.isVisible)(_this2.$element) && (0, _dom.hasClass)(tip, ClassName.SHOW)) {
            // Element is no longer visible, so force-hide the tooltip
            _this2.forceHide();
          }
        }, 100);
      }
    }
  }, {
    key: 'setWhileOpenListeners',
    value: function setWhileOpenListeners(on) {
      // Modal close events
      this.setModalListener(on); // Periodic $element visibility check
      // For handling when tip is in <keepalive>, tabs, carousel, etc

      this.visibleCheck(on); // Route change events

      this.setRouteWatcher(on); // Ontouch start listeners

      this.setOnTouchStartListener(on);

      if (on && /(focus|blur)/.test(this.$config.trigger)) {
        // If focus moves between trigger element and tip container, dont close
        (0, _dom.eventOn)(this.$tip, 'focusout', this);
      } else {
        (0, _dom.eventOff)(this.$tip, 'focusout', this);
      }
    } // force hide of tip (internal method)

  }, {
    key: 'forceHide',
    value: function forceHide() {
      if (!this.$tip || !(0, _dom.hasClass)(this.$tip, ClassName.SHOW)) {
        return;
      } // Disable while open listeners/watchers


      this.setWhileOpenListeners(false); // Clear any hover enter/leave event

      clearTimeout(this.$hoverTimeout);
      this.$hoverTimeout = null;
      this.$hoverState = ''; // Hide the tip

      this.hide(null, true);
    } // Hide tooltip

  }, {
    key: 'hide',
    value: function hide(callback, force) {
      var _this3 = this;

      var tip = this.$tip;

      if (!tip) {
        return;
      } // Create a canelable BvEvent


      var hideEvt = new _bvEvent.default('hide', {
        // We disable cancelling if force is true
        cancelable: !force,
        target: this.$element,
        relatedTarget: tip
      });
      this.emitEvent(hideEvt);

      if (hideEvt.defaultPrevented) {
        // Don't hide if event cancelled
        return;
      } // Transitionend Callback

      /* istanbul ignore next */


      var complete = function complete() {
        if (_this3.$hoverState !== HoverState.SHOW && tip.parentNode) {
          // Remove tip from dom, and force recompile on next show
          tip.parentNode.removeChild(tip);

          _this3.removeAriaDescribedby();

          _this3.removePopper();

          _this3.$tip = null;
        }

        if (callback) {
          callback();
        } // Create a non-cancelable BvEvent


        var hiddenEvt = new _bvEvent.default('hidden', {
          cancelable: false,
          target: _this3.$element,
          relatedTarget: null
        });

        _this3.emitEvent(hiddenEvt);
      }; // Disable while open listeners/watchers


      this.setWhileOpenListeners(false); // If forced close, disable animation

      if (force) {
        (0, _dom.removeClass)(tip, ClassName.FADE);
      } // Hide tip


      (0, _dom.removeClass)(tip, ClassName.SHOW);
      this.$activeTrigger.click = false;
      this.$activeTrigger.focus = false;
      this.$activeTrigger.hover = false; // Start the hide transition

      this.transitionOnce(tip, complete);
      this.$hoverState = '';
    }
  }, {
    key: 'emitEvent',
    value: function emitEvent(evt) {
      var evtName = evt.type;

      if (this.$root && this.$root.$emit) {
        // Emit an event on $root
        this.$root.$emit('bv::' + this.constructor.NAME + '::' + evtName, evt);
      }

      var callbacks = this.$config.callbacks || {};

      if (typeof callbacks[evtName] === 'function') {
        callbacks[evtName](evt);
      }
    }
  }, {
    key: 'getContainer',
    value: function getContainer() {
      var container = this.$config.container;
      var body = document.body; // If we are in a modal, we append to the modal instead of body, unless a container is specified

      return container === false ? (0, _dom.closest)(MODAL_CLASS, this.$element) || body : (0, _dom.select)(container, body) || body;
    } // Will be overritten by popover if needed

  }, {
    key: 'addAriaDescribedby',
    value: function addAriaDescribedby() {
      // Add aria-describedby on trigger element, without removing any other IDs
      var desc = (0, _dom.getAttr)(this.$element, 'aria-describedby') || '';
      desc = desc.split(/\s+/).concat(this.$id).join(' ').trim();
      (0, _dom.setAttr)(this.$element, 'aria-describedby', desc);
    } // Will be overritten by popover if needed

  }, {
    key: 'removeAriaDescribedby',
    value: function removeAriaDescribedby() {
      var _this4 = this;

      var desc = (0, _dom.getAttr)(this.$element, 'aria-describedby') || '';
      desc = desc.split(/\s+/).filter(function (d) {
        return d !== _this4.$id;
      }).join(' ').trim();

      if (desc) {
        (0, _dom.setAttr)(this.$element, 'aria-describedby', desc);
      } else {
        (0, _dom.removeAttr)(this.$element, 'aria-describedby');
      }
    }
  }, {
    key: 'removePopper',
    value: function removePopper() {
      if (this.$popper) {
        this.$popper.destroy();
      }

      this.$popper = null;
    }
    /* istanbul ignore next */

  }, {
    key: 'transitionOnce',
    value: function transitionOnce(tip, complete) {
      var _this5 = this;

      var transEvents = this.getTransitionEndEvents();
      var called = false;
      clearTimeout(this.$fadeTimeout);
      this.$fadeTimeout = null;

      var fnOnce = function fnOnce() {
        if (called) {
          return;
        }

        called = true;
        clearTimeout(_this5.$fadeTimeout);
        _this5.$fadeTimeout = null;
        transEvents.forEach(function (evtName) {
          (0, _dom.eventOff)(tip, evtName, fnOnce);
        }); // Call complete callback

        complete();
      };

      if ((0, _dom.hasClass)(tip, ClassName.FADE)) {
        transEvents.forEach(function (evtName) {
          (0, _dom.eventOn)(tip, evtName, fnOnce);
        }); // Fallback to setTimeout

        this.$fadeTimeout = setTimeout(fnOnce, TRANSITION_DURATION);
      } else {
        fnOnce();
      }
    } // What transitionend event(s) to use? (returns array of event names)

  }, {
    key: 'getTransitionEndEvents',
    value: function getTransitionEndEvents() {
      for (var name in TransitionEndEvents) {
        if (this.$element.style[name] !== undefined) {
          return TransitionEndEvents[name];
        }
      } // fallback


      return [];
    }
  }, {
    key: 'update',
    value: function update() {
      if (this.$popper !== null) {
        this.$popper.scheduleUpdate();
      }
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'isWithContent',
    value: function isWithContent(tip) {
      tip = tip || this.$tip;

      if (!tip) {
        return false;
      }

      return Boolean(((0, _dom.select)(Selector.TOOLTIP_INNER, tip) || {}).innerHTML);
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'addAttachmentClass',
    value: function addAttachmentClass(attachment) {
      (0, _dom.addClass)(this.getTipElement(), CLASS_PREFIX + '-' + attachment);
    }
  }, {
    key: 'getTipElement',
    value: function getTipElement() {
      if (!this.$tip) {
        // Try and compile user supplied template, or fallback to default template
        this.$tip = this.compileTemplate(this.$config.template) || this.compileTemplate(this.constructor.Default.template);
      } // Add tab index so tip can be focused, and to allow it to be set as relatedTargt in focusin/out events


      this.$tip.tabIndex = -1;
      return this.$tip;
    }
  }, {
    key: 'compileTemplate',
    value: function compileTemplate(html) {
      if (!html || typeof html !== 'string') {
        return null;
      }

      var div = document.createElement('div');
      div.innerHTML = html.trim();
      var node = div.firstElementChild ? div.removeChild(div.firstElementChild) : null;
      div = null;
      return node;
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'setContent',
    value: function setContent(tip) {
      this.setElementContent((0, _dom.select)(Selector.TOOLTIP_INNER, tip), this.getTitle());
      (0, _dom.removeClass)(tip, ClassName.FADE);
      (0, _dom.removeClass)(tip, ClassName.SHOW);
    }
  }, {
    key: 'setElementContent',
    value: function setElementContent(container, content) {
      if (!container) {
        // If container element doesn't exist, just return
        return;
      }

      var allowHtml = this.$config.html;

      if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && content.nodeType) {
        // content is a DOM node
        if (allowHtml) {
          if (content.parentElement !== container) {
            container.innerHtml = '';
            container.appendChild(content);
          }
        } else {
          container.innerText = content.innerText;
        }
      } else {
        // We have a plain HTML string or Text
        container[allowHtml ? 'innerHTML' : 'innerText'] = content;
      }
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'getTitle',
    value: function getTitle() {
      var title = this.$config.title || '';

      if (typeof title === 'function') {
        // Call the function to get the title value
        title = title(this.$element);
      }

      if ((typeof title === 'undefined' ? 'undefined' : _typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {
        // We have a DOM node, but without inner content, so just return empty string
        title = '';
      }

      if (typeof title === 'string') {
        title = title.trim();
      }

      if (!title) {
        // If an explicit title is not given, try element's title atributes
        title = (0, _dom.getAttr)(this.$element, 'title') || (0, _dom.getAttr)(this.$element, 'data-original-title') || '';
        title = title.trim();
      }

      return title;
    }
  }, {
    key: 'listen',
    value: function listen() {
      var _this6 = this;

      var triggers = this.$config.trigger.trim().split(/\s+/);
      var el = this.$element; // Listen for global show/hide events

      this.setRootListener(true); // Using 'this' as the handler will get automagically directed to this.handleEvent
      // And maintain our binding to 'this'

      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          (0, _dom.eventOn)(el, 'click', _this6);
        } else if (trigger === 'focus') {
          (0, _dom.eventOn)(el, 'focusin', _this6);
          (0, _dom.eventOn)(el, 'focusout', _this6);
        } else if (trigger === 'blur') {
          // Used to close $tip when element looses focus
          (0, _dom.eventOn)(el, 'focusout', _this6);
        } else if (trigger === 'hover') {
          (0, _dom.eventOn)(el, 'mouseenter', _this6);
          (0, _dom.eventOn)(el, 'mouseleave', _this6);
        }
      }, this);
    }
  }, {
    key: 'unListen',
    value: function unListen() {
      var _this7 = this;

      var events = ['click', 'focusin', 'focusout', 'mouseenter', 'mouseleave']; // Using "this" as the handler will get automagically directed to this.handleEvent

      events.forEach(function (evt) {
        (0, _dom.eventOff)(_this7.$element, evt, _this7);
      }, this); // Stop listening for global show/hide/enable/disable events

      this.setRootListener(false);
    }
  }, {
    key: 'handleEvent',
    value: function handleEvent(e) {
      // This special method allows us to use "this" as the event handlers
      if ((0, _dom.isDisabled)(this.$element)) {
        // If disabled, don't do anything. Note: if tip is shown before element gets
        // disabled, then tip not close until no longer disabled or forcefully closed.
        return;
      }

      if (!this.$isEnabled) {
        // If not enable
        return;
      }

      var type = e.type;
      var target = e.target;
      var relatedTarget = e.relatedTarget;
      var $element = this.$element;
      var $tip = this.$tip;

      if (type === 'click') {
        this.toggle(e);
      } else if (type === 'focusin' || type === 'mouseenter') {
        this.enter(e);
      } else if (type === 'focusout') {
        // target is the element which is loosing focus
        // And relatedTarget is the element gaining focus
        if ($tip && $element && $element.contains(target) && $tip.contains(relatedTarget)) {
          // If focus moves from $element to $tip, don't trigger a leave
          return;
        }

        if ($tip && $element && $tip.contains(target) && $element.contains(relatedTarget)) {
          // If focus moves from $tip to $element, don't trigger a leave
          return;
        }

        if ($tip && $tip.contains(target) && $tip.contains(relatedTarget)) {
          // If focus moves within $tip, don't trigger a leave
          return;
        }

        if ($element && $element.contains(target) && $element.contains(relatedTarget)) {
          // If focus moves within $element, don't trigger a leave
          return;
        } // Otherwise trigger a leave


        this.leave(e);
      } else if (type === 'mouseleave') {
        this.leave(e);
      }
    }
    /* istanbul ignore next */

  }, {
    key: 'setRouteWatcher',
    value: function setRouteWatcher(on) {
      var _this8 = this;

      if (on) {
        this.setRouteWatcher(false);

        if (this.$root && Boolean(this.$root.$route)) {
          this.$routeWatcher = this.$root.$watch('$route', function (newVal, oldVal) {
            if (newVal === oldVal) {
              return;
            } // If route has changed, we force hide the tooltip/popover


            _this8.forceHide();
          });
        }
      } else {
        if (this.$routeWatcher) {
          // cancel the route watcher by calling hte stored reference
          this.$routeWatcher();
          this.$routeWatcher = null;
        }
      }
    }
    /* istanbul ignore next */

  }, {
    key: 'setModalListener',
    value: function setModalListener(on) {
      var modal = (0, _dom.closest)(MODAL_CLASS, this.$element);

      if (!modal) {
        // If we are not in a modal, don't worry. be happy
        return;
      } // We can listen for modal hidden events on $root


      if (this.$root) {
        this.$root[on ? '$on' : '$off'](MODAL_CLOSE_EVENT, this.$forceHide);
      }
    }
    /* istanbul ignore next */

  }, {
    key: 'setRootListener',
    value: function setRootListener(on) {
      // Listen for global 'bv::{hide|show}::{tooltip|popover}' hide request event
      if (this.$root) {
        this.$root[on ? '$on' : '$off']('bv::hide::' + this.constructor.NAME, this.$doHide);
        this.$root[on ? '$on' : '$off']('bv::show::' + this.constructor.NAME, this.$doShow);
        this.$root[on ? '$on' : '$off']('bv::disable::' + this.constructor.NAME, this.$doDisable);
        this.$root[on ? '$on' : '$off']('bv::enable::' + this.constructor.NAME, this.$doEnable);
      }
    }
  }, {
    key: 'doHide',
    value: function doHide(id) {
      // Programmatically hide tooltip or popover
      if (!id) {
        // Close all tooltips or popovers
        this.forceHide();
      } else if (this.$element && this.$element.id && this.$element.id === id) {
        // Close this specific tooltip or popover
        this.hide();
      }
    }
  }, {
    key: 'doShow',
    value: function doShow(id) {
      // Programmatically show tooltip or popover
      if (!id) {
        // Open all tooltips or popovers
        this.show();
      } else if (id && this.$element && this.$element.id && this.$element.id === id) {
        // Show this specific tooltip or popover
        this.show();
      }
    }
  }, {
    key: 'doDisable',
    value: function doDisable(id) {
      // Programmatically disable tooltip or popover
      if (!id) {
        // Disable all tooltips or popovers
        this.disable();
      } else if (this.$element && this.$element.id && this.$element.id === id) {
        // Disable this specific tooltip or popover
        this.disable();
      }
    }
  }, {
    key: 'doEnable',
    value: function doEnable(id) {
      // Programmatically enable tooltip or popover
      if (!id) {
        // Enable all tooltips or popovers
        this.enable();
      } else if (this.$element && this.$element.id && this.$element.id === id) {
        // Enable this specific tooltip or popover
        this.enable();
      }
    }
    /* istanbul ignore next */

  }, {
    key: 'setOnTouchStartListener',
    value: function setOnTouchStartListener(on) {
      var _this9 = this; // if this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement) {
        (0, _array.from)(document.body.children).forEach(function (el) {
          if (on) {
            (0, _dom.eventOn)(el, 'mouseover', _this9._noop);
          } else {
            (0, _dom.eventOff)(el, 'mouseover', _this9._noop);
          }
        });
      }
    }
    /* istanbul ignore next */

  }, {
    key: '_noop',
    value: function _noop() {// Empty noop handler for ontouchstart devices
    }
  }, {
    key: 'fixTitle',
    value: function fixTitle() {
      var el = this.$element;

      var titleType = _typeof((0, _dom.getAttr)(el, 'data-original-title'));

      if ((0, _dom.getAttr)(el, 'title') || titleType !== 'string') {
        (0, _dom.setAttr)(el, 'data-original-title', (0, _dom.getAttr)(el, 'title') || '');
        (0, _dom.setAttr)(el, 'title', '');
      }
    } // Enter handler

    /* istanbul ignore next */

  }, {
    key: 'enter',
    value: function enter(e) {
      var _this10 = this;

      if (e) {
        this.$activeTrigger[e.type === 'focusin' ? 'focus' : 'hover'] = true;
      }

      if ((0, _dom.hasClass)(this.getTipElement(), ClassName.SHOW) || this.$hoverState === HoverState.SHOW) {
        this.$hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(this.$hoverTimeout);
      this.$hoverState = HoverState.SHOW;

      if (!this.$config.delay || !this.$config.delay.show) {
        this.show();
        return;
      }

      this.$hoverTimeout = setTimeout(function () {
        if (_this10.$hoverState === HoverState.SHOW) {
          _this10.show();
        }
      }, this.$config.delay.show);
    } // Leave handler

    /* istanbul ignore next */

  }, {
    key: 'leave',
    value: function leave(e) {
      var _this11 = this;

      if (e) {
        this.$activeTrigger[e.type === 'focusout' ? 'focus' : 'hover'] = false;

        if (e.type === 'focusout' && /blur/.test(this.$config.trigger)) {
          // Special case for `blur`: we clear out the other triggers
          this.$activeTrigger.click = false;
          this.$activeTrigger.hover = false;
        }
      }

      if (this.isWithActiveTrigger()) {
        return;
      }

      clearTimeout(this.$hoverTimeout);
      this.$hoverState = HoverState.OUT;

      if (!this.$config.delay || !this.$config.delay.hide) {
        this.hide();
        return;
      }

      this.$hoverTimeout = setTimeout(function () {
        if (_this11.$hoverState === HoverState.OUT) {
          _this11.hide();
        }
      }, this.$config.delay.hide);
    }
  }, {
    key: 'getPopperConfig',
    value: function getPopperConfig(placement, tip) {
      var _this12 = this;

      return {
        placement: this.constructor.getAttachment(placement),
        modifiers: {
          offset: {
            offset: this.getOffset(placement, tip)
          },
          flip: {
            behavior: this.$config.fallbackPlacement
          },
          arrow: {
            element: '.arrow'
          },
          preventOverflow: {
            boundariesElement: this.$config.boundary
          }
        },
        onCreate: function onCreate(data) {
          // Handle flipping arrow classes
          if (data.originalPlacement !== data.placement) {
            _this12.handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          // Handle flipping arrow classes
          _this12.handlePopperPlacementChange(data);
        }
      };
    }
  }, {
    key: 'getOffset',
    value: function getOffset(placement, tip) {
      if (!this.$config.offset) {
        var arrow = (0, _dom.select)(Selector.ARROW, tip);
        var arrowOffset = parseFloat((0, _dom.getCS)(arrow).width) + parseFloat(this.$config.arrowPadding);

        switch (OffsetMap[placement.toUpperCase()]) {
          case +1:
            return '+50%p - ' + arrowOffset + 'px';

          case -1:
            return '-50%p + ' + arrowOffset + 'px';

          default:
            return 0;
        }
      }

      return this.$config.offset;
    }
  }, {
    key: 'getPlacement',
    value: function getPlacement() {
      var placement = this.$config.placement;

      if (typeof placement === 'function') {
        return placement.call(this, this.$tip, this.$element);
      }

      return placement;
    }
  }, {
    key: 'isWithActiveTrigger',
    value: function isWithActiveTrigger() {
      for (var trigger in this.$activeTrigger) {
        if (this.$activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'cleanTipClass',
    value: function cleanTipClass() {
      var tip = this.getTipElement();
      var tabClass = tip.className.match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        tabClass.forEach(function (cls) {
          (0, _dom.removeClass)(tip, cls);
        });
      }
    }
  }, {
    key: 'handlePopperPlacementChange',
    value: function handlePopperPlacementChange(data) {
      this.cleanTipClass();
      this.addAttachmentClass(this.constructor.getAttachment(data.placement));
    }
  }, {
    key: 'fixTransition',
    value: function fixTransition(tip) {
      var initConfigAnimation = this.$config.animation || false;

      if ((0, _dom.getAttr)(tip, 'x-placement') !== null) {
        return;
      }

      (0, _dom.removeClass)(tip, ClassName.FADE);
      this.$config.animation = false;
      this.hide();
      this.show();
      this.$config.animation = initConfigAnimation;
    }
  }], [{
    key: 'getAttachment',
    value: function getAttachment(placement) {
      return AttachmentMap[placement.toUpperCase()];
    }
  }, {
    key: 'Default',
    get: function get() {
      return Defaults;
    } // NOTE: Overridden by PopOver class

  }, {
    key: 'NAME',
    get: function get() {
      return NAME;
    }
  }]);

  return ToolTip;
}();

var _default = ToolTip;
exports.default = _default;
},{"popper.js":"node_modules/popper.js/dist/esm/popper.js","./bv-event.class":"node_modules/bootstrap-vue/es/utils/bv-event.class.js","./object":"node_modules/bootstrap-vue/es/utils/object.js","./array":"node_modules/bootstrap-vue/es/utils/array.js","./dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/utils/popover.class.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tooltip = _interopRequireDefault(require("./tooltip.class"));

var _object = require("./object");

var _dom = require("./dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var NAME = 'popover';
var CLASS_PREFIX = 'bs-popover';
var BSCLS_PREFIX_REGEX = new RegExp('\\b' + CLASS_PREFIX + '\\S+', 'g');
var Defaults = (0, _object.assign)({}, _tooltip.default.Default, {
  placement: 'right',
  trigger: 'click',
  content: '',
  template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
});
var ClassName = {
  FADE: 'fade',
  SHOW: 'show'
};
var Selector = {
  TITLE: '.popover-header',
  CONTENT: '.popover-body'
  /* istanbul ignore next: dificult to test in Jest/JSDOM environment */

};

var PopOver = function (_ToolTip) {
  _inherits(PopOver, _ToolTip);

  function PopOver() {
    _classCallCheck(this, PopOver);

    return _possibleConstructorReturn(this, (PopOver.__proto__ || Object.getPrototypeOf(PopOver)).apply(this, arguments));
  }

  _createClass(PopOver, [{
    key: 'isWithContent',
    // Method overrides
    value: function isWithContent(tip) {
      tip = tip || this.$tip;

      if (!tip) {
        return false;
      }

      var hasTitle = Boolean(((0, _dom.select)(Selector.TITLE, tip) || {}).innerHTML);
      var hasContent = Boolean(((0, _dom.select)(Selector.CONTENT, tip) || {}).innerHTML);
      return hasTitle || hasContent;
    }
  }, {
    key: 'addAttachmentClass',
    value: function addAttachmentClass(attachment) {
      (0, _dom.addClass)(this.getTipElement(), CLASS_PREFIX + '-' + attachment);
    }
  }, {
    key: 'setContent',
    value: function setContent(tip) {
      // we use append for html objects to maintain js events/components
      this.setElementContent((0, _dom.select)(Selector.TITLE, tip), this.getTitle());
      this.setElementContent((0, _dom.select)(Selector.CONTENT, tip), this.getContent());
      (0, _dom.removeClass)(tip, ClassName.FADE);
      (0, _dom.removeClass)(tip, ClassName.SHOW);
    } // This method may look identical to ToolTip version, but it uses a different RegEx defined above

  }, {
    key: 'cleanTipClass',
    value: function cleanTipClass() {
      var tip = this.getTipElement();
      var tabClass = tip.className.match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length > 0) {
        tabClass.forEach(function (cls) {
          (0, _dom.removeClass)(tip, cls);
        });
      }
    }
  }, {
    key: 'getTitle',
    value: function getTitle() {
      var title = this.$config.title || '';

      if (typeof title === 'function') {
        title = title(this.$element);
      }

      if ((typeof title === 'undefined' ? 'undefined' : _typeof(title)) === 'object' && title.nodeType && !title.innerHTML.trim()) {
        // We have a dom node, but without inner content, so just return an empty string
        title = '';
      }

      if (typeof title === 'string') {
        title = title.trim();
      }

      if (!title) {
        // Try and grab element's title attribute
        title = (0, _dom.getAttr)(this.$element, 'title') || (0, _dom.getAttr)(this.$element, 'data-original-title') || '';
        title = title.trim();
      }

      return title;
    } // New methods

  }, {
    key: 'getContent',
    value: function getContent() {
      var content = this.$config.content || '';

      if (typeof content === 'function') {
        content = content(this.$element);
      }

      if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && content.nodeType && !content.innerHTML.trim()) {
        // We have a dom node, but without inner content, so just return an empty string
        content = '';
      }

      if (typeof content === 'string') {
        content = content.trim();
      }

      return content;
    }
  }], [{
    key: 'Default',
    // Getter overrides
    get: function get() {
      return Defaults;
    }
  }, {
    key: 'NAME',
    get: function get() {
      return NAME;
    }
  }]);

  return PopOver;
}(_tooltip.default);

var _default = PopOver;
exports.default = _default;
},{"./tooltip.class":"node_modules/bootstrap-vue/es/utils/tooltip.class.js","./object":"node_modules/bootstrap-vue/es/utils/object.js","./dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/utils/ssr.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HTMLElement = void 0;
// Polyfills for SSR
var isSSR = typeof window === 'undefined';
var HTMLElement = isSSR ? Object : window.HTMLElement;
exports.HTMLElement = HTMLElement;
},{}],"node_modules/bootstrap-vue/es/mixins/toolpop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _array = require("../utils/array");

var _object = require("../utils/object");

var _dom = require("../utils/dom");

var _ssr = require("../utils/ssr");

var _observeDom = _interopRequireDefault(require("../utils/observe-dom"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
/*
 * Tooltip/Popover component mixin
 * Common props
 */


var PLACEMENTS = {
  top: 'top',
  topleft: 'topleft',
  topright: 'topright',
  right: 'right',
  righttop: 'righttop',
  rightbottom: 'rightbottom',
  bottom: 'bottom',
  bottomleft: 'bottomleft',
  bottomright: 'bottomright',
  left: 'left',
  lefttop: 'lefttop',
  leftbottom: 'leftbottom',
  auto: 'auto'
};
var OBSERVER_CONFIG = {
  subtree: true,
  childList: true,
  characterData: true,
  attributes: true,
  attributeFilter: ['class', 'style']
};
var _default = {
  props: {
    target: {
      // String ID of element, or element/component reference
      type: [String, Object, _ssr.HTMLElement, Function]
    },
    delay: {
      type: [Number, Object, String],
      default: 0
    },
    offset: {
      type: [Number, String],
      default: 0
    },
    noFade: {
      type: Boolean,
      default: false
    },
    container: {
      // String ID of container, if null body is used (default)
      type: String,
      default: null
    },
    boundary: {
      // String: scrollParent, window, or viewport
      // Element: element reference
      type: [String, Object],
      default: 'scrollParent'
    },
    show: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    }
  },
  watch: {
    show: function show(_show, old) {
      if (_show === old) {
        return;
      }

      _show ? this.onOpen() : this.onClose();
    },
    disabled: function disabled(_disabled, old) {
      if (_disabled === old) {
        return;
      }

      _disabled ? this.onDisable() : this.onEnable();
    }
  },
  created: function created() {
    // Create non-reactive property
    this._toolpop = null;
    this._obs_title = null;
    this._obs_content = null;
  },
  mounted: function mounted() {
    var _this = this; // We do this in a next tick to ensure DOM has rendered first


    this.$nextTick(function () {
      // Instantiate ToolTip/PopOver on target
      // The createToolpop method must exist in main component
      if (_this.createToolpop()) {
        if (_this.disabled) {
          // Initially disabled
          _this.onDisable();
        } // Listen to open signals from others


        _this.$on('open', _this.onOpen); // Listen to close signals from others


        _this.$on('close', _this.onClose); // Listen to disable signals from others


        _this.$on('disable', _this.onDisable); // Listen to disable signals from others


        _this.$on('enable', _this.onEnable); // Observe content Child changes so we can notify popper of possible size change


        _this.setObservers(true); // Set intially open state


        if (_this.show) {
          _this.onOpen();
        }
      }
    });
  },
  updated: function updated() {
    // If content/props changes, etc
    if (this._toolpop) {
      this._toolpop.updateConfig(this.getConfig());
    }
  },

  /* istanbul ignore next: not easy to test */
  activated: function activated() {
    // Called when component is inside a <keep-alive> and component brought offline
    this.setObservers(true);
  },

  /* istanbul ignore next: not easy to test */
  deactivated: function deactivated() {
    // Called when component is inside a <keep-alive> and component taken offline
    if (this._toolpop) {
      this.setObservers(false);

      this._toolpop.hide();
    }
  },

  /* istanbul ignore next: not easy to test */
  beforeDestroy: function beforeDestroy() {
    // Shutdown our local event listeners
    this.$off('open', this.onOpen);
    this.$off('close', this.onClose);
    this.$off('disable', this.onDisable);
    this.$off('enable', this.onEnable);
    this.setObservers(false); // bring our content back if needed

    this.bringItBack();

    if (this._toolpop) {
      this._toolpop.destroy();

      this._toolpop = null;
    }
  },
  computed: {
    baseConfig: function baseConfig() {
      var cont = this.container;
      var delay = _typeof(this.delay) === 'object' ? this.delay : parseInt(this.delay, 10) || 0;
      return {
        // Title prop
        title: (this.title || '').trim() || '',
        // Contnt prop (if popover)
        content: (this.content || '').trim() || '',
        // Tooltip/Popover placement
        placement: PLACEMENTS[this.placement] || 'auto',
        // Container curently needs to be an ID with '#' prepended, if null then body is used
        container: cont ? /^#/.test(cont) ? cont : '#' + cont : false,
        // boundariesElement passed to popper
        boundary: this.boundary,
        // Show/Hide delay
        delay: delay || 0,
        // Offset can be css distance. if no units, pixels are assumed
        offset: this.offset || 0,
        // Disable fade Animation?
        animation: !this.noFade,
        // Open/Close Trigger(s)
        trigger: (0, _array.isArray)(this.triggers) ? this.triggers.join(' ') : this.triggers,
        // Callbacks so we can trigger events on component
        callbacks: {
          show: this.onShow,
          shown: this.onShown,
          hide: this.onHide,
          hidden: this.onHidden,
          enabled: this.onEnabled,
          disabled: this.onDisabled
        }
      };
    }
  },
  methods: {
    getConfig: function getConfig() {
      var cfg = (0, _object.assign)({}, this.baseConfig);

      if (this.$refs.title && this.$refs.title.innerHTML.trim()) {
        // If slot has content, it overrides 'title' prop
        // We use the DOM node as content to allow components!
        cfg.title = this.$refs.title;
        cfg.html = true;
      }

      if (this.$refs.content && this.$refs.content.innerHTML.trim()) {
        // If slot has content, it overrides 'content' prop
        // We use the DOM node as content to allow components!
        cfg.content = this.$refs.content;
        cfg.html = true;
      }

      return cfg;
    },
    onOpen: function onOpen() {
      if (this._toolpop) {
        this._toolpop.show();
      }
    },
    onClose: function onClose(callback) {
      if (this._toolpop) {
        this._toolpop.hide(callback);
      } else if (typeof callback === 'function') {
        callback();
      }
    },
    onDisable: function onDisable() {
      if (this._toolpop) {
        this._toolpop.disable();
      }
    },
    onEnable: function onEnable() {
      if (this._toolpop) {
        this._toolpop.enable();
      }
    },
    updatePosition: function updatePosition() {
      if (this._toolpop) {
        // Instruct popper to reposition popover if necessary
        this._toolpop.update();
      }
    },
    getTarget: function getTarget() {
      var target = this.target;

      if (typeof target === 'function') {
        target = target();
      }

      if (typeof target === 'string') {
        // Assume ID of element
        return (0, _dom.getById)(target);
      } else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && (0, _dom.isElement)(target.$el)) {
        // Component reference
        return target.$el;
      } else if ((typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && (0, _dom.isElement)(target)) {
        // Element reference
        return target;
      }

      return null;
    },
    onShow: function onShow(evt) {
      this.$emit('show', evt);
    },
    onShown: function onShown(evt) {
      this.setObservers(true);
      this.$emit('update:show', true);
      this.$emit('shown', evt);
    },
    onHide: function onHide(evt) {
      this.$emit('hide', evt);
    },
    onHidden: function onHidden(evt) {
      this.setObservers(false); // bring our content back if needed to keep Vue happy
      // Tooltip class will move it back to tip when shown again

      this.bringItBack();
      this.$emit('update:show', false);
      this.$emit('hidden', evt);
    },
    onEnabled: function onEnabled(evt) {
      if (!evt || evt.type !== 'enabled') {
        // Prevent possible endless loop if user mistakienly fires enabled instead of enable
        return;
      }

      this.$emit('update:disabled', false);
      this.$emit('disabled');
    },
    onDisabled: function onDisabled(evt) {
      if (!evt || evt.type !== 'disabled') {
        // Prevent possible endless loop if user mistakienly fires disabled instead of disable
        return;
      }

      this.$emit('update:disabled', true);
      this.$emit('enabled');
    },
    bringItBack: function bringItBack() {
      // bring our content back if needed to keep Vue happy
      if (this.$el && this.$refs.title) {
        this.$el.appendChild(this.$refs.title);
      }

      if (this.$el && this.$refs.content) {
        this.$el.appendChild(this.$refs.content);
      }
    },

    /* istanbul ignore next: not easy to test */
    setObservers: function setObservers(on) {
      if (on) {
        if (this.$refs.title) {
          this._obs_title = (0, _observeDom.default)(this.$refs.title, this.updatePosition.bind(this), OBSERVER_CONFIG);
        }

        if (this.$refs.content) {
          this._obs_content = (0, _observeDom.default)(this.$refs.content, this.updatePosition.bind(this), OBSERVER_CONFIG);
        }
      } else {
        if (this._obs_title) {
          this._obs_title.disconnect();

          this._obs_title = null;
        }

        if (this._obs_content) {
          this._obs_content.disconnect();

          this._obs_content = null;
        }
      }
    }
  }
};
exports.default = _default;
},{"../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js","../utils/ssr":"node_modules/bootstrap-vue/es/utils/ssr.js","../utils/observe-dom":"node_modules/bootstrap-vue/es/utils/observe-dom.js"}],"node_modules/bootstrap-vue/es/components/popover/popover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popover = _interopRequireDefault(require("../../utils/popover.class"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _toolpop = _interopRequireDefault(require("../../mixins/toolpop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_toolpop.default],
  render: function render(h) {
    return h('div', {
      class: ['d-none'],
      style: {
        display: 'none'
      },
      attrs: {
        'aria-hidden': true
      }
    }, [h('div', {
      ref: 'title'
    }, this.$slots.title), h('div', {
      ref: 'content'
    }, this.$slots.default)]);
  },
  data: function data() {
    return {};
  },
  props: {
    title: {
      type: String,
      default: ''
    },
    content: {
      type: String,
      default: ''
    },
    triggers: {
      type: [String, Array],
      default: 'click'
    },
    placement: {
      type: String,
      default: 'right'
    }
  },
  methods: {
    createToolpop: function createToolpop() {
      // getTarget is in toolpop mixin
      var target = this.getTarget();

      if (target) {
        this._toolpop = new _popover.default(target, this.getConfig(), this.$root);
      } else {
        this._toolpop = null;
        (0, _warn.default)("b-popover: 'target' element not found!");
      }

      return this._toolpop;
    }
  }
};
exports.default = _default;
},{"../../utils/popover.class":"node_modules/bootstrap-vue/es/utils/popover.class.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../mixins/toolpop":"node_modules/bootstrap-vue/es/mixins/toolpop.js"}],"node_modules/bootstrap-vue/es/components/popover/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popover = _interopRequireDefault(require("./popover"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bPopover: _popover.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./popover":"node_modules/bootstrap-vue/es/components/popover/popover.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/progress/progress-bar.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  render: function render(h) {
    var childNodes = h(false);

    if (this.$slots.default) {
      childNodes = this.$slots.default;
    } else if (this.label) {
      childNodes = h('span', {
        domProps: {
          innerHTML: this.label
        }
      });
    } else if (this.computedShowProgress) {
      childNodes = this.progress.toFixed(this.computedPrecision);
    } else if (this.computedShowValue) {
      childNodes = this.value.toFixed(this.computedPrecision);
    }

    return h('div', {
      class: this.progressBarClasses,
      style: this.progressBarStyles,
      attrs: {
        role: 'progressbar',
        'aria-valuemin': '0',
        'aria-valuemax': this.computedMax.toString(),
        'aria-valuenow': this.value.toFixed(this.computedPrecision)
      }
    }, [childNodes]);
  },
  computed: {
    progressBarClasses: function progressBarClasses() {
      return ['progress-bar', this.computedVariant ? 'bg-' + this.computedVariant : '', this.computedStriped || this.computedAnimated ? 'progress-bar-striped' : '', this.computedAnimated ? 'progress-bar-animated' : ''];
    },
    progressBarStyles: function progressBarStyles() {
      return {
        width: 100 * (this.value / this.computedMax) + '%'
      };
    },
    progress: function progress() {
      var p = Math.pow(10, this.computedPrecision);
      return Math.round(100 * p * this.value / this.computedMax) / p;
    },
    computedMax: function computedMax() {
      // Prefer our max over parent setting
      return typeof this.max === 'number' ? this.max : this.$parent.max || 100;
    },
    computedVariant: function computedVariant() {
      // Prefer our variant over parent setting
      return this.variant || this.$parent.variant;
    },
    computedPrecision: function computedPrecision() {
      // Prefer our precision over parent setting
      return typeof this.precision === 'number' ? this.precision : this.$parent.precision || 0;
    },
    computedStriped: function computedStriped() {
      // Prefer our striped over parent setting
      return typeof this.striped === 'boolean' ? this.striped : this.$parent.striped || false;
    },
    computedAnimated: function computedAnimated() {
      // Prefer our animated over parent setting
      return typeof this.animated === 'boolean' ? this.animated : this.$parent.animated || false;
    },
    computedShowProgress: function computedShowProgress() {
      // Prefer our showProgress over parent setting
      return typeof this.showProgress === 'boolean' ? this.showProgress : this.$parent.showProgress || false;
    },
    computedShowValue: function computedShowValue() {
      // Prefer our showValue over parent setting
      return typeof this.showValue === 'boolean' ? this.showValue : this.$parent.showValue || false;
    }
  },
  props: {
    value: {
      type: Number,
      default: 0
    },
    label: {
      type: String,
      default: null
    },
    // $parent prop values take precedence over the following props
    // Which is why they are defaulted to null
    max: {
      type: Number,
      default: null
    },
    precision: {
      type: Number,
      default: null
    },
    variant: {
      type: String,
      default: null
    },
    striped: {
      type: Boolean,
      default: null
    },
    animated: {
      type: Boolean,
      default: null
    },
    showProgress: {
      type: Boolean,
      default: null
    },
    showValue: {
      type: Boolean,
      default: null
    }
  }
};
exports.default = _default;
},{}],"node_modules/bootstrap-vue/es/components/progress/progress.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _progressBar = _interopRequireDefault(require("./progress-bar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  components: {
    bProgressBar: _progressBar.default
  },
  render: function render(h) {
    var childNodes = this.$slots.default;

    if (!childNodes) {
      childNodes = h('b-progress-bar', {
        props: {
          value: this.value,
          max: this.max,
          precision: this.precision,
          variant: this.variant,
          animated: this.animated,
          striped: this.striped,
          showProgress: this.showProgress,
          showValue: this.showValue
        }
      });
    }

    return h('div', {
      class: ['progress'],
      style: this.progressHeight
    }, [childNodes]);
  },
  props: {
    // These props can be inherited via the child b-progress-bar(s)
    variant: {
      type: String,
      default: null
    },
    striped: {
      type: Boolean,
      default: false
    },
    animated: {
      type: Boolean,
      default: false
    },
    height: {
      type: String,
      default: null
    },
    precision: {
      type: Number,
      default: 0
    },
    showProgress: {
      type: Boolean,
      default: false
    },
    showValue: {
      type: Boolean,
      default: false
    },
    max: {
      type: Number,
      default: 100
    },
    // This prop is not inherited by child b-progress-bar(s)
    value: {
      type: Number,
      default: 0
    }
  },
  computed: {
    progressHeight: function progressHeight() {
      return {
        height: this.height || null
      };
    }
  }
};
exports.default = _default;
},{"./progress-bar":"node_modules/bootstrap-vue/es/components/progress/progress-bar.js"}],"node_modules/bootstrap-vue/es/components/progress/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _progress = _interopRequireDefault(require("./progress"));

var _progressBar = _interopRequireDefault(require("./progress-bar"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bProgress: _progress.default,
  bProgressBar: _progressBar.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./progress":"node_modules/bootstrap-vue/es/components/progress/progress.js","./progress-bar":"node_modules/bootstrap-vue/es/components/progress/progress-bar.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/lodash.startcase/index.js":[function(require,module,exports) {
var global = arguments[3];
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
    rsComboSymbolsRange = '\\u20d0-\\u20f0',
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsAstral = '[' + rsAstralRange + ']',
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',
    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',
  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,
  rsUpper + '+' + rsOptUpperContr,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 'ss'
};

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array ? array.length : 0;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Built-in value references. */
var Symbol = root.Symbol;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

/**
 * Converts `string` to
 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * @static
 * @memberOf _
 * @since 3.1.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the start cased string.
 * @example
 *
 * _.startCase('--foo-bar--');
 * // => 'Foo Bar'
 *
 * _.startCase('fooBar');
 * // => 'Foo Bar'
 *
 * _.startCase('__FOO_BAR__');
 * // => 'FOO BAR'
 */
var startCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + upperFirst(word);
});

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = startCase;

},{}],"node_modules/lodash.get/index.js":[function(require,module,exports) {
var global = arguments[3];
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** `Object#toString` result references. */
var funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    symbolTag = '[object Symbol]';

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/,
    reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Checks if `value` is a host object in IE < 9.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
 */
function isHostObject(value) {
  // Many host objects are `Object` objects that can coerce to strings
  // despite having improperly defined `toString` methods.
  var result = false;
  if (value != null && typeof value.toString != 'function') {
    try {
      result = !!(value + '');
    } catch (e) {}
  }
  return result;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var objectToString = objectProto.toString;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/** Built-in value references. */
var Symbol = root.Symbol,
    splice = arrayProto.splice;

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map'),
    nativeCreate = getNative(Object, 'create');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  return this.has(key) && delete this.__data__[key];
}

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
}

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries ? entries.length : 0;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  return getMapData(this, key)['delete'](key);
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  getMapData(this, key).set(key, value);
  return this;
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = isKey(path, object) ? [path] : castPath(path);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value) {
  return isArray(value) ? value : stringToPath(value);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoize(function(string) {
  string = toString(string);

  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to process.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result);
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Assign cache to `_.memoize`.
memoize.Cache = MapCache;

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 8-9 which returns 'object' for typed array and other constructors.
  var tag = isObject(value) ? objectToString.call(value) : '';
  return tag == funcTag || tag == genTag;
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && objectToString.call(value) == symbolTag);
}

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{}],"node_modules/bootstrap-vue/es/utils/stable-sort.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = stableSort;

/*
 * Consitant and stable sort function across JavsaScript platforms
 *
 * Inconsistant sorts can cause SSR problems between client and server
 * such as in <b-table> if sortBy is applied to the data on server side render.
 * Chrome and V8 native sorts are inconsistant/unstable
 *
 * This function uses native sort with fallback to index compare when the a and b
 * compare returns 0
 *
 * Algorithm bsaed on:
 * https://stackoverflow.com/questions/1427608/fast-stable-sorting-algorithm-implementation-in-javascript/45422645#45422645
 *
 * @param {array} array to sort
 * @param {function} sortcompare function
 * @return {array}
 */
function stableSort(array, compareFn) {
  // Using `.bind(compareFn)` on the wrapped anonymous function improves
  // performance by avoiding the function call setup. We don't use an arrow
  // function here as it binds `this` to the `stableSort` context rather than
  // the `compareFn` context, which wouldn't give us the performance increase.
  return array.map(function (a, index) {
    return [index, a];
  }).sort(function (a, b) {
    return this(a[1], b[1]) || a[0] - b[0];
  }.bind(compareFn)).map(function (e) {
    return e[1];
  });
}
},{}],"node_modules/bootstrap-vue/es/components/table/table.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/bootstrap-vue/es/components/table/table.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash.startcase"));

var _lodash2 = _interopRequireDefault(require("lodash.get"));

var _looseEqual = _interopRequireDefault(require("../../utils/loose-equal"));

var _stableSort = _interopRequireDefault(require("../../utils/stable-sort"));

var _keyCodes = _interopRequireDefault(require("../../utils/key-codes"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _object = require("../../utils/object");

var _array = require("../../utils/array");

var _id = _interopRequireDefault(require("../../mixins/id"));

var _listenOnRoot = _interopRequireDefault(require("../../mixins/listen-on-root"));

require("./table.css");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function toString(v) {
  if (!v) {
    return '';
  }

  if (v instanceof Object) {
    return (0, _object.keys)(v).map(function (k) {
      return toString(v[k]);
    }).join(' ');
  }

  return String(v);
}

function recToString(obj) {
  if (!(obj instanceof Object)) {
    return '';
  }

  return toString((0, _object.keys)(obj).reduce(function (o, k) {
    // Ignore fields that start with _
    if (!/^_/.test(k)) {
      o[k] = obj[k];
    }

    return o;
  }, {}));
}

function defaultSortCompare(a, b, sortBy) {
  if (typeof a[sortBy] === 'number' && typeof b[sortBy] === 'number') {
    return a[sortBy] < b[sortBy] && -1 || a[sortBy] > b[sortBy] && 1 || 0;
  }

  return toString(a[sortBy]).localeCompare(toString(b[sortBy]), undefined, {
    numeric: true
  });
}

function processField(key, value) {
  var field = null;

  if (typeof value === 'string') {
    // Label shortcut
    field = {
      key: key,
      label: value
    };
  } else if (typeof value === 'function') {
    // Formatter shortcut
    field = {
      key: key,
      formatter: value
    };
  } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
    field = (0, _object.assign)({}, value);
    field.key = field.key || key;
  } else if (value !== false) {
    // Fallback to just key
    field = {
      key: key
    };
  }

  return field;
}

var _default2 = {
  mixins: [_id.default, _listenOnRoot.default],
  render: function render(h) {
    var _this = this;

    var $slots = this.$slots;
    var $scoped = this.$scopedSlots;
    var fields = this.computedFields;
    var items = this.computedItems; // Build the caption

    var caption = h(false);

    if (this.caption || $slots['table-caption']) {
      var data = {
        style: this.captionStyles
      };

      if (!$slots['table-caption']) {
        data.domProps = {
          innerHTML: this.caption
        };
      }

      caption = h('caption', data, $slots['table-caption']);
    } // Build the colgroup


    var colgroup = $slots['table-colgroup'] ? h('colgroup', {}, $slots['table-colgroup']) : h(false); // factory function for thead and tfoot cells (th's)

    var makeHeadCells = function makeHeadCells() {
      var isFoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return fields.map(function (field, colIndex) {
        var data = {
          key: field.key,
          class: _this.fieldClasses(field),
          style: field.thStyle || {},
          attrs: {
            tabindex: field.sortable ? '0' : null,
            abbr: field.headerAbbr || null,
            title: field.headerTitle || null,
            'aria-colindex': String(colIndex + 1),
            'aria-label': field.sortable ? _this.localSortDesc && _this.localSortBy === field.key ? _this.labelSortAsc : _this.labelSortDesc : null,
            'aria-sort': field.sortable && _this.localSortBy === field.key ? _this.localSortDesc ? 'descending' : 'ascending' : null
          },
          on: {
            click: function click(evt) {
              evt.stopPropagation();
              evt.preventDefault();

              _this.headClicked(evt, field);
            },
            keydown: function keydown(evt) {
              var keyCode = evt.keyCode;

              if (keyCode === _keyCodes.default.ENTER || keyCode === _keyCodes.default.SPACE) {
                evt.stopPropagation();
                evt.preventDefault();

                _this.headClicked(evt, field);
              }
            }
          }
        };
        var slot = isFoot && $scoped['FOOT_' + field.key] ? $scoped['FOOT_' + field.key] : $scoped['HEAD_' + field.key];

        if (slot) {
          slot = [slot({
            label: field.label,
            column: field.key,
            field: field
          })];
        } else {
          data.domProps = {
            innerHTML: field.label
          };
        }

        return h('th', data, slot);
      });
    }; // Build the thead


    var thead = h(false);

    if (this.isStacked !== true) {
      // If in always stacked mode (this.isStacked === true), then we don't bother rendering the thead
      thead = h('thead', {
        class: this.headClasses
      }, [h('tr', {
        class: this.theadTrClass
      }, makeHeadCells(false))]);
    } // Build the tfoot


    var tfoot = h(false);

    if (this.footClone && this.isStacked !== true) {
      // If in always stacked mode (this.isStacked === true), then we don't bother rendering the tfoot
      tfoot = h('tfoot', {
        class: this.footClasses
      }, [h('tr', {
        class: this.tfootTrClass
      }, makeHeadCells(true))]);
    } // Prepare the tbody rows


    var rows = []; // Add static Top Row slot (hidden in visibly stacked mode as we can't control the data-label)
    // If in always stacked mode, we don't bother rendering the row

    if ($scoped['top-row'] && this.isStacked !== true) {
      rows.push(h('tr', {
        key: 'top-row',
        class: ['b-table-top-row', this.tbodyTrClass]
      }, [$scoped['top-row']({
        columns: fields.length,
        fields: fields
      })]));
    } else {
      rows.push(h(false));
    } // Add the item data rows


    items.forEach(function (item, rowIndex) {
      var detailsSlot = $scoped['row-details'];
      var rowShowDetails = Boolean(item._showDetails && detailsSlot);
      var detailsId = rowShowDetails ? _this.safeId('_details_' + rowIndex + '_') : null;

      var toggleDetailsFn = function toggleDetailsFn() {
        if (detailsSlot) {
          _this.$set(item, '_showDetails', !item._showDetails);
        }
      }; // For each item data field in row


      var tds = fields.map(function (field, colIndex) {
        var data = {
          key: 'row-' + rowIndex + '-cell-' + colIndex,
          class: _this.tdClasses(field, item),
          attrs: _this.tdAttrs(field, item, colIndex),
          domProps: {}
        };
        var childNodes = void 0;

        if ($scoped[field.key]) {
          childNodes = [$scoped[field.key]({
            item: item,
            index: rowIndex,
            field: field,
            unformatted: (0, _lodash2.default)(item, field.key),
            value: _this.getFormattedValue(item, field),
            toggleDetails: toggleDetailsFn,
            detailsShowing: Boolean(item._showDetails)
          })];

          if (_this.isStacked) {
            // We wrap in a DIV to ensure rendered as a single cell when visually stacked!
            childNodes = [h('div', {}, [childNodes])];
          }
        } else {
          var formatted = _this.getFormattedValue(item, field);

          if (_this.isStacked) {
            // We innerHTML a DIV to ensure rendered as a single cell when visually stacked!
            childNodes = [h('div', formatted)];
          } else {
            // Non stacked
            childNodes = formatted;
          }
        } // Render either a td or th cell


        return h(field.isRowHeader ? 'th' : 'td', data, childNodes);
      }); // Calculate the row number in the dataset (indexed from 1)

      var ariaRowIndex = null;

      if (_this.currentPage && _this.perPage && _this.perPage > 0) {
        ariaRowIndex = (_this.currentPage - 1) * _this.perPage + rowIndex + 1;
      } // Assemble and add the row


      rows.push(h('tr', {
        key: 'row-' + rowIndex,
        class: [_this.rowClasses(item), {
          'b-table-has-details': rowShowDetails
        }],
        attrs: {
          'aria-describedby': detailsId,
          'aria-rowindex': ariaRowIndex,
          role: _this.isStacked ? 'row' : null
        },
        on: {
          click: function click(evt) {
            _this.rowClicked(evt, item, rowIndex);
          },
          dblclick: function dblclick(evt) {
            _this.rowDblClicked(evt, item, rowIndex);
          },
          mouseenter: function mouseenter(evt) {
            _this.rowHovered(evt, item, rowIndex);
          }
        }
      }, tds)); // Row Details slot

      if (rowShowDetails) {
        var tdAttrs = {
          colspan: String(fields.length)
        };
        var trAttrs = {
          id: detailsId
        };

        if (_this.isStacked) {
          tdAttrs['role'] = 'cell';
          trAttrs['role'] = 'row';
        }

        var details = h('td', {
          attrs: tdAttrs
        }, [detailsSlot({
          item: item,
          index: rowIndex,
          fields: fields,
          toggleDetails: toggleDetailsFn
        })]);
        rows.push(h('tr', {
          key: 'details-' + rowIndex,
          class: ['b-table-details', _this.tbodyTrClass],
          attrs: trAttrs
        }, [details]));
      } else if (detailsSlot) {
        // Only add the placeholder if a the table has a row-details slot defined (but not shown)
        rows.push(h(false));
      }
    }); // Empty Items / Empty Filtered Row slot

    if (this.showEmpty && (!items || items.length === 0)) {
      var empty = this.filter ? $slots['emptyfiltered'] : $slots['empty'];

      if (!empty) {
        empty = h('div', {
          class: ['text-center', 'my-2'],
          domProps: {
            innerHTML: this.filter ? this.emptyFilteredText : this.emptyText
          }
        });
      }

      empty = h('td', {
        attrs: {
          colspan: String(fields.length),
          role: this.isStacked ? 'cell' : null
        }
      }, [h('div', {
        attrs: {
          role: 'alert',
          'aria-live': 'polite'
        }
      }, [empty])]);
      rows.push(h('tr', {
        key: 'empty-row',
        class: ['b-table-empty-row', this.tbodyTrClass],
        attrs: this.isStacked ? {
          role: 'row'
        } : {}
      }, [empty]));
    } else {
      rows.push(h(false));
    } // Static bottom row slot (hidden in visibly stacked mode as we can't control the data-label)
    // If in always stacked mode, we don't bother rendering the row


    if ($scoped['bottom-row'] && this.isStacked !== true) {
      rows.push(h('tr', {
        key: 'bottom-row',
        class: ['b-table-bottom-row', this.tbodyTrClass]
      }, [$scoped['bottom-row']({
        columns: fields.length,
        fields: fields
      })]));
    } else {
      rows.push(h(false));
    } // Assemble the rows into the tbody


    var tbody = h('tbody', {
      class: this.bodyClasses,
      attrs: this.isStacked ? {
        role: 'rowgroup'
      } : {}
    }, rows); // Assemble table

    var table = h('table', {
      class: this.tableClasses,
      attrs: {
        id: this.safeId(),
        role: this.isStacked ? 'table' : null,
        'aria-busy': this.computedBusy ? 'true' : 'false',
        'aria-colcount': String(fields.length),
        'aria-rowcount': this.$attrs['aria-rowcount'] || this.items.length > this.perPage ? this.items.length : null
      }
    }, [caption, colgroup, thead, tfoot, tbody]); // Add responsive wrapper if needed and return table

    return this.isResponsive ? h('div', {
      class: this.responsiveClass
    }, [table]) : table;
  },
  data: function data() {
    return {
      localSortBy: this.sortBy || '',
      localSortDesc: this.sortDesc || false,
      localItems: [],
      // Note: filteredItems only used to determine if # of items changed
      filteredItems: [],
      localBusy: false
    };
  },
  props: {
    items: {
      type: [Array, Function],
      default: function _default() {
        return [];
      }
    },
    fields: {
      type: [Object, Array],
      default: null
    },
    sortBy: {
      type: String,
      default: null
    },
    sortDesc: {
      type: Boolean,
      default: false
    },
    sortDirection: {
      type: String,
      default: 'asc',
      validator: function validator(direction) {
        return (0, _array.arrayIncludes)(['asc', 'desc', 'last'], direction);
      }
    },
    caption: {
      type: String,
      default: null
    },
    captionTop: {
      type: Boolean,
      default: false
    },
    striped: {
      type: Boolean,
      default: false
    },
    bordered: {
      type: Boolean,
      default: false
    },
    outlined: {
      type: Boolean,
      default: false
    },
    dark: {
      type: Boolean,
      default: function _default() {
        if (this && typeof this.inverse === 'boolean') {
          // Deprecate inverse
          (0, _warn.default)("b-table: prop 'inverse' has been deprecated. Use 'dark' instead");
          return this.dark;
        }

        return false;
      }
    },
    inverse: {
      // Deprecated in v1.0.0 in favor of `dark`
      type: Boolean,
      default: null
    },
    hover: {
      type: Boolean,
      default: false
    },
    small: {
      type: Boolean,
      default: false
    },
    fixed: {
      type: Boolean,
      default: false
    },
    footClone: {
      type: Boolean,
      default: false
    },
    responsive: {
      type: [Boolean, String],
      default: false
    },
    stacked: {
      type: [Boolean, String],
      default: false
    },
    headVariant: {
      type: String,
      default: ''
    },
    footVariant: {
      type: String,
      default: ''
    },
    theadClass: {
      type: [String, Array],
      default: null
    },
    theadTrClass: {
      type: [String, Array],
      default: null
    },
    tbodyClass: {
      type: [String, Array],
      default: null
    },
    tbodyTrClass: {
      type: [String, Array],
      default: null
    },
    tfootClass: {
      type: [String, Array],
      default: null
    },
    tfootTrClass: {
      type: [String, Array],
      default: null
    },
    perPage: {
      type: Number,
      default: 0
    },
    currentPage: {
      type: Number,
      default: 1
    },
    filter: {
      type: [String, RegExp, Function],
      default: null
    },
    sortCompare: {
      type: Function,
      default: null
    },
    noLocalSorting: {
      type: Boolean,
      default: false
    },
    noProviderPaging: {
      type: Boolean,
      default: false
    },
    noProviderSorting: {
      type: Boolean,
      default: false
    },
    noProviderFiltering: {
      type: Boolean,
      default: false
    },
    noSortReset: {
      type: Boolean,
      default: false
    },
    busy: {
      type: Boolean,
      default: false
    },
    value: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    labelSortAsc: {
      type: String,
      default: 'Click to sort Ascending'
    },
    labelSortDesc: {
      type: String,
      default: 'Click to sort Descending'
    },
    showEmpty: {
      type: Boolean,
      default: false
    },
    emptyText: {
      type: String,
      default: 'There are no records to show'
    },
    emptyFilteredText: {
      type: String,
      default: 'There are no records matching your request'
    },
    apiUrl: {
      // Passthrough prop. Passed to the context object. Not used by b-table directly
      type: String,
      default: ''
    }
  },
  watch: {
    items: function items(newVal, oldVal) {
      if (oldVal !== newVal) {
        this._providerUpdate();
      }
    },
    context: function context(newVal, oldVal) {
      if (!(0, _looseEqual.default)(newVal, oldVal)) {
        this.$emit('context-changed', newVal);
      }
    },
    filteredItems: function filteredItems(newVal, oldVal) {
      if (this.localFiltering && newVal.length !== oldVal.length) {
        // Emit a filtered notification event, as number of filtered items has changed
        this.$emit('filtered', newVal);
      }
    },
    sortDesc: function sortDesc(newVal, oldVal) {
      if (newVal === this.localSortDesc) {
        return;
      }

      this.localSortDesc = newVal || false;
    },
    localSortDesc: function localSortDesc(newVal, oldVal) {
      // Emit update to sort-desc.sync
      if (newVal !== oldVal) {
        this.$emit('update:sortDesc', newVal);

        if (!this.noProviderSorting) {
          this._providerUpdate();
        }
      }
    },
    sortBy: function sortBy(newVal, oldVal) {
      if (newVal === this.localSortBy) {
        return;
      }

      this.localSortBy = newVal || null;
    },
    localSortBy: function localSortBy(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$emit('update:sortBy', newVal);

        if (!this.noProviderSorting) {
          this._providerUpdate();
        }
      }
    },
    perPage: function perPage(newVal, oldVal) {
      if (oldVal !== newVal && !this.noProviderPaging) {
        this._providerUpdate();
      }
    },
    currentPage: function currentPage(newVal, oldVal) {
      if (oldVal !== newVal && !this.noProviderPaging) {
        this._providerUpdate();
      }
    },
    filter: function filter(newVal, oldVal) {
      if (oldVal !== newVal && !this.noProviderFiltering) {
        this._providerUpdate();
      }
    },
    localBusy: function localBusy(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$emit('update:busy', newVal);
      }
    }
  },
  mounted: function mounted() {
    var _this2 = this;

    this.localSortBy = this.sortBy;
    this.localSortDesc = this.sortDesc;

    if (this.hasProvider) {
      this._providerUpdate();
    }

    this.listenOnRoot('bv::refresh::table', function (id) {
      if (id === _this2.id || id === _this2) {
        _this2._providerUpdate();
      }
    });
  },
  computed: {
    isStacked: function isStacked() {
      return this.stacked === '' ? true : this.stacked;
    },
    isResponsive: function isResponsive() {
      var responsive = this.responsive === '' ? true : this.responsive;
      return this.isStacked ? false : responsive;
    },
    responsiveClass: function responsiveClass() {
      return this.isResponsive === true ? 'table-responsive' : this.isResponsive ? 'table-responsive-' + this.responsive : '';
    },
    tableClasses: function tableClasses() {
      return ['table', 'b-table', this.striped ? 'table-striped' : '', this.hover ? 'table-hover' : '', this.dark ? 'table-dark' : '', this.bordered ? 'table-bordered' : '', this.small ? 'table-sm' : '', this.outlined ? 'border' : '', this.fixed ? 'b-table-fixed' : '', this.isStacked === true ? 'b-table-stacked' : this.isStacked ? 'b-table-stacked-' + this.stacked : ''];
    },
    headClasses: function headClasses() {
      return [this.headVariant ? 'thead-' + this.headVariant : '', this.theadClass];
    },
    bodyClasses: function bodyClasses() {
      return [this.tbodyClass];
    },
    footClasses: function footClasses() {
      var variant = this.footVariant || this.headVariant || null;
      return [variant ? 'thead-' + variant : '', this.tfootClass];
    },
    captionStyles: function captionStyles() {
      // Move caption to top
      return this.captionTop ? {
        captionSide: 'top'
      } : {};
    },
    hasProvider: function hasProvider() {
      return this.items instanceof Function;
    },
    localFiltering: function localFiltering() {
      return this.hasProvider ? this.noProviderFiltering : true;
    },
    localSorting: function localSorting() {
      return this.hasProvider ? this.noProviderSorting : !this.noLocalSorting;
    },
    localPaging: function localPaging() {
      return this.hasProvider ? this.noProviderPaging : true;
    },
    context: function context() {
      return {
        perPage: this.perPage,
        currentPage: this.currentPage,
        filter: this.filter,
        sortBy: this.localSortBy,
        sortDesc: this.localSortDesc,
        apiUrl: this.apiUrl
      };
    },
    computedFields: function computedFields() {
      var _this3 = this; // We normalize fields into an array of objects
      // [ { key:..., label:..., ...}, {...}, ..., {..}]


      var fields = [];

      if ((0, _array.isArray)(this.fields)) {
        // Normalize array Form
        this.fields.filter(function (f) {
          return f;
        }).forEach(function (f) {
          if (typeof f === 'string') {
            fields.push({
              key: f,
              label: (0, _lodash.default)(f)
            });
          } else if ((typeof f === 'undefined' ? 'undefined' : _typeof(f)) === 'object' && f.key && typeof f.key === 'string') {
            // Full object definition. We use assign so that we don't mutate the original
            fields.push((0, _object.assign)({}, f));
          } else if ((typeof f === 'undefined' ? 'undefined' : _typeof(f)) === 'object' && (0, _object.keys)(f).length === 1) {
            // Shortcut object (i.e. { 'foo_bar': 'This is Foo Bar' }
            var key = (0, _object.keys)(f)[0];
            var field = processField(key, f[key]);

            if (field) {
              fields.push(field);
            }
          }
        });
      } else if (this.fields && _typeof(this.fields) === 'object' && (0, _object.keys)(this.fields).length > 0) {
        // Normalize object Form
        (0, _object.keys)(this.fields).forEach(function (key) {
          var field = processField(key, _this3.fields[key]);

          if (field) {
            fields.push(field);
          }
        });
      } // If no field provided, take a sample from first record (if exits)


      if (fields.length === 0 && this.computedItems.length > 0) {
        var sample = this.computedItems[0];
        var ignoredKeys = ['_rowVariant', '_cellVariants', '_showDetails'];
        (0, _object.keys)(sample).forEach(function (k) {
          if (!ignoredKeys.includes(k)) {
            fields.push({
              key: k,
              label: (0, _lodash.default)(k)
            });
          }
        });
      } // Ensure we have a unique array of fields and that they have String labels


      var memo = {};
      return fields.filter(function (f) {
        if (!memo[f.key]) {
          memo[f.key] = true;
          f.label = typeof f.label === 'string' ? f.label : (0, _lodash.default)(f.key);
          return true;
        }

        return false;
      });
    },
    computedItems: function computedItems() {
      // Grab some props/data to ensure reactivity
      var perPage = this.perPage;
      var currentPage = this.currentPage;
      var filter = this.filter;
      var sortBy = this.localSortBy;
      var sortDesc = this.localSortDesc;
      var sortCompare = this.sortCompare;
      var localFiltering = this.localFiltering;
      var localSorting = this.localSorting;
      var localPaging = this.localPaging;
      var items = this.hasProvider ? this.localItems : this.items;

      if (!items) {
        this.$nextTick(this._providerUpdate);
        return [];
      } // Array copy for sorting, filtering, etc.


      items = items.slice(); // Apply local filter

      if (filter && localFiltering) {
        if (filter instanceof Function) {
          items = items.filter(filter);
        } else {
          var regex = void 0;

          if (filter instanceof RegExp) {
            regex = filter;
          } else {
            regex = new RegExp('.*' + filter + '.*', 'ig');
          }

          items = items.filter(function (item) {
            var test = regex.test(recToString(item));
            regex.lastIndex = 0;
            return test;
          });
        }
      }

      if (localFiltering) {
        // Make a local copy of filtered items to trigger filtered event
        this.filteredItems = items.slice();
      } // Apply local Sort


      if (sortBy && localSorting) {
        items = (0, _stableSort.default)(items, function (a, b) {
          var ret = null;

          if (typeof sortCompare === 'function') {
            // Call user provided sortCompare routine
            ret = sortCompare(a, b, sortBy);
          }

          if (ret === null || ret === undefined) {
            // Fallback to defaultSortCompare if sortCompare not defined or returns null
            ret = defaultSortCompare(a, b, sortBy);
          } // Handle sorting direction


          return (ret || 0) * (sortDesc ? -1 : 1);
        });
      } // Apply local pagination


      if (Boolean(perPage) && localPaging) {
        // Grab the current page of data (which may be past filtered items)
        items = items.slice((currentPage - 1) * perPage, currentPage * perPage);
      } // Update the value model with the filtered/sorted/paginated data set


      this.$emit('input', items);
      return items;
    },
    computedBusy: function computedBusy() {
      return this.busy || this.localBusy;
    }
  },
  methods: {
    keys: _object.keys,
    fieldClasses: function fieldClasses(field) {
      return [field.sortable ? 'sorting' : '', field.sortable && this.localSortBy === field.key ? 'sorting_' + (this.localSortDesc ? 'desc' : 'asc') : '', field.variant ? 'table-' + field.variant : '', field.class ? field.class : '', field.thClass ? field.thClass : ''];
    },
    tdClasses: function tdClasses(field, item) {
      var cellVariant = '';

      if (item._cellVariants && item._cellVariants[field.key]) {
        cellVariant = (this.dark ? 'bg' : 'table') + '-' + item._cellVariants[field.key];
      }

      return [field.variant && !cellVariant ? (this.dark ? 'bg' : 'table') + '-' + field.variant : '', cellVariant, field.class ? field.class : '', this.getTdValues(item, field.key, field.tdClass, '')];
    },
    tdAttrs: function tdAttrs(field, item, colIndex) {
      var attrs = {};
      attrs['aria-colindex'] = String(colIndex + 1);

      if (this.isStacked) {
        // Generate the "header cell" label content in stacked mode
        attrs['data-label'] = field.label;

        if (field.isRowHeader) {
          attrs['role'] = 'rowheader';
        } else {
          attrs['role'] = 'cell';
        }
      }

      return (0, _object.assign)({}, attrs, this.getTdValues(item, field.key, field.tdAttr, {}));
    },
    rowClasses: function rowClasses(item) {
      return [item._rowVariant ? (this.dark ? 'bg' : 'table') + '-' + item._rowVariant : '', this.tbodyTrClass];
    },
    rowClicked: function rowClicked(e, item, index) {
      if (this.stopIfBusy(e)) {
        // If table is busy (via provider) then don't propagate
        return;
      }

      this.$emit('row-clicked', item, index, e);
    },
    rowDblClicked: function rowDblClicked(e, item, index) {
      if (this.stopIfBusy(e)) {
        // If table is busy (via provider) then don't propagate
        return;
      }

      this.$emit('row-dblclicked', item, index, e);
    },
    rowHovered: function rowHovered(e, item, index) {
      if (this.stopIfBusy(e)) {
        // If table is busy (via provider) then don't propagate
        return;
      }

      this.$emit('row-hovered', item, index, e);
    },
    headClicked: function headClicked(e, field) {
      var _this4 = this;

      if (this.stopIfBusy(e)) {
        // If table is busy (via provider) then don't propagate
        return;
      }

      var sortChanged = false;

      var toggleLocalSortDesc = function toggleLocalSortDesc() {
        var sortDirection = field.sortDirection || _this4.sortDirection;

        if (sortDirection === 'asc') {
          _this4.localSortDesc = false;
        } else if (sortDirection === 'desc') {
          _this4.localSortDesc = true;
        }
      };

      if (field.sortable) {
        if (field.key === this.localSortBy) {
          // Change sorting direction on current column
          this.localSortDesc = !this.localSortDesc;
        } else {
          // Start sorting this column ascending
          this.localSortBy = field.key;
          toggleLocalSortDesc();
        }

        sortChanged = true;
      } else if (this.localSortBy && !this.noSortReset) {
        this.localSortBy = null;
        toggleLocalSortDesc();
        sortChanged = true;
      }

      this.$emit('head-clicked', field.key, field, e);

      if (sortChanged) {
        // Sorting parameters changed
        this.$emit('sort-changed', this.context);
      }
    },
    stopIfBusy: function stopIfBusy(evt) {
      if (this.computedBusy) {
        // If table is busy (via provider) then don't propagate
        evt.preventDefault();
        evt.stopPropagation();
        return true;
      }

      return false;
    },
    refresh: function refresh() {
      // Expose refresh method
      if (this.hasProvider) {
        this._providerUpdate();
      }
    },
    _providerSetLocal: function _providerSetLocal(items) {
      this.localItems = items && items.length > 0 ? items.slice() : [];
      this.localBusy = false;
      this.$emit('refreshed'); // Deprecated root emit

      this.emitOnRoot('table::refreshed', this.id); // New root emit

      if (this.id) {
        this.emitOnRoot('bv::table::refreshed', this.id);
      }
    },
    _providerUpdate: function _providerUpdate() {
      var _this5 = this; // Refresh the provider items


      if (this.computedBusy || !this.hasProvider) {
        // Don't refresh remote data if we are 'busy' or if no provider
        return;
      } // Set internal busy state


      this.localBusy = true; // Call provider function with context and optional callback

      var data = this.items(this.context, this._providerSetLocal);

      if (data && data.then && typeof data.then === 'function') {
        // Provider returned Promise
        data.then(function (items) {
          _this5._providerSetLocal(items);
        });
      } else {
        // Provider returned Array data
        this._providerSetLocal(data);
      }
    },
    getTdValues: function getTdValues(item, key, tdValue, defValue) {
      var parent = this.$parent;

      if (tdValue) {
        if (typeof tdValue === 'function') {
          var value = (0, _lodash2.default)(item, key);
          return tdValue(value, key, item);
        } else if (typeof tdValue === 'string' && typeof parent[tdValue] === 'function') {
          var _value = (0, _lodash2.default)(item, key);

          return parent[tdValue](_value, key, item);
        }

        return tdValue;
      }

      return defValue;
    },
    getFormattedValue: function getFormattedValue(item, field) {
      var key = field.key;
      var formatter = field.formatter;
      var parent = this.$parent;
      var value = (0, _lodash2.default)(item, key);

      if (formatter) {
        if (typeof formatter === 'function') {
          value = formatter(value, key, item);
        } else if (typeof formatter === 'string' && typeof parent[formatter] === 'function') {
          value = parent[formatter](value, key, item);
        }
      }

      return value;
    }
  }
};
exports.default = _default2;
},{"lodash.startcase":"node_modules/lodash.startcase/index.js","lodash.get":"node_modules/lodash.get/index.js","../../utils/loose-equal":"node_modules/bootstrap-vue/es/utils/loose-equal.js","../../utils/stable-sort":"node_modules/bootstrap-vue/es/utils/stable-sort.js","../../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/array":"node_modules/bootstrap-vue/es/utils/array.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js","../../mixins/listen-on-root":"node_modules/bootstrap-vue/es/mixins/listen-on-root.js","./table.css":"node_modules/bootstrap-vue/es/components/table/table.css"}],"node_modules/bootstrap-vue/es/components/table/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _table = _interopRequireDefault(require("./table"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bTable: _table.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./table":"node_modules/bootstrap-vue/es/components/table/table.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/tabs/tabs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _keyCodes = _interopRequireDefault(require("../../utils/key-codes"));

var _observeDom = _interopRequireDefault(require("../../utils/observe-dom"));

var _id = _interopRequireDefault(require("../../mixins/id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

// Helper component
var bTabButtonHelper = {
  name: 'bTabButtonHelper',
  props: {
    content: {
      type: [String, Array],
      default: ''
    },
    href: {
      type: String,
      default: '#'
    },
    posInSet: {
      type: Number,
      default: null
    },
    setSize: {
      type: Number,
      default: null
    },
    controls: {
      type: String,
      default: null
    },
    id: {
      type: String,
      default: null
    },
    active: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    linkClass: {
      default: null
    },
    itemClass: {
      default: null
    },
    noKeyNav: {
      type: Boolean,
      default: false
    }
  },
  render: function render(h) {
    var link = h('a', {
      class: ['nav-link', {
        active: this.active,
        disabled: this.disabled
      }, this.linkClass],
      attrs: {
        role: 'tab',
        tabindex: this.noKeyNav ? null : '-1',
        href: this.href,
        id: this.id,
        disabled: this.disabled,
        'aria-selected': this.active ? 'true' : 'false',
        'aria-setsize': this.setSize,
        'aria-posinset': this.posInSet,
        'aria-controls': this.controls
      },
      on: {
        click: this.handleClick,
        keydown: this.handleClick
      }
    }, this.content);
    return h('li', {
      class: ['nav-item', this.itemClass],
      attrs: {
        role: 'presentation'
      }
    }, [link]);
  },
  methods: {
    handleClick: function handleClick(evt) {
      function stop() {
        evt.preventDefault();
        evt.stopPropagation();
      }

      if (evt.type !== 'click' && this.noKeyNav) {
        return;
      }

      if (this.disabled) {
        stop();
        return;
      }

      if (evt.type === 'click' || evt.keyCode === _keyCodes.default.ENTER || evt.keyCode === _keyCodes.default.SPACE) {
        stop();
        this.$emit('click', evt);
      }
    }
  }
};
var _default = {
  mixins: [_id.default],
  render: function render(h) {
    var _this = this,
        _ref;

    var tabs = this.tabs; // Navigation 'buttons'

    var buttons = tabs.map(function (tab, index) {
      return h(bTabButtonHelper, {
        key: index,
        props: {
          content: tab.$slots.title || tab.title,
          href: tab.href,
          id: tab.controlledBy || _this.safeId('_BV_tab_' + (index + 1) + '_'),
          active: tab.localActive,
          disabled: tab.disabled,
          setSize: tabs.length,
          posInSet: index + 1,
          controls: _this.safeId('_BV_tab_container_'),
          linkClass: tab.titleLinkClass,
          itemClass: tab.titleItemClass,
          noKeyNav: _this.noKeyNav
        },
        on: {
          click: function click(evt) {
            _this.setTab(index);
          }
        }
      });
    }); // Nav 'button' wrapper

    var navs = h('ul', {
      class: ['nav', (_ref = {}, _defineProperty(_ref, 'nav-' + this.navStyle, !this.noNavStyle), _defineProperty(_ref, 'card-header-' + this.navStyle, this.card && !this.vertical), _defineProperty(_ref, 'card-header', this.card && this.vertical), _defineProperty(_ref, 'h-100', this.card && this.vertical), _defineProperty(_ref, 'flex-column', this.vertical), _defineProperty(_ref, 'border-bottom-0', this.vertical), _defineProperty(_ref, 'rounded-0', this.vertical), _defineProperty(_ref, 'small', this.small), _ref), this.navClass],
      attrs: {
        role: 'tablist',
        tabindex: this.noKeyNav ? null : '0',
        id: this.safeId('_BV_tab_controls_')
      },
      on: {
        keydown: this.onKeynav
      }
    }, [buttons, this.$slots.tabs]);
    navs = h('div', {
      class: [{
        'card-header': this.card && !this.vertical && !(this.end || this.bottom),
        'card-footer': this.card && !this.vertical && (this.end || this.bottom),
        'col-auto': this.vertical
      }, this.navWrapperClass]
    }, [navs]);
    var empty = void 0;

    if (tabs && tabs.length) {
      empty = h(false);
    } else {
      empty = h('div', {
        class: ['tab-pane', 'active', {
          'card-body': this.card
        }]
      }, this.$slots.empty);
    } // Main content section


    var content = h('div', {
      ref: 'tabsContainer',
      class: ['tab-content', {
        col: this.vertical
      }, this.contentClass],
      attrs: {
        id: this.safeId('_BV_tab_container_')
      }
    }, [this.$slots.default, empty]); // Render final output

    return h(this.tag, {
      class: ['tabs', {
        row: this.vertical,
        'no-gutters': this.vertical && this.card
      }],
      attrs: {
        id: this.safeId()
      }
    }, [this.end || this.bottom ? content : h(false), [navs], this.end || this.bottom ? h(false) : content]);
  },
  data: function data() {
    return {
      currentTab: this.value,
      tabs: []
    };
  },
  props: {
    tag: {
      type: String,
      default: 'div'
    },
    card: {
      type: Boolean,
      default: false
    },
    small: {
      type: Boolean,
      default: false
    },
    value: {
      type: Number,
      default: null
    },
    pills: {
      type: Boolean,
      default: false
    },
    vertical: {
      type: Boolean,
      default: false
    },
    bottom: {
      type: Boolean,
      default: false
    },
    end: {
      // Synonym for 'bottom'
      type: Boolean,
      default: false
    },
    noFade: {
      type: Boolean,
      default: false
    },
    noNavStyle: {
      type: Boolean,
      default: false
    },
    noKeyNav: {
      type: Boolean,
      default: false
    },
    lazy: {
      // This prop is sniffed by the tab child
      type: Boolean,
      default: false
    },
    contentClass: {
      type: [String, Array, Object],
      default: null
    },
    navClass: {
      type: [String, Array, Object],
      default: null
    },
    navWrapperClass: {
      type: [String, Array, Object],
      default: null
    }
  },
  watch: {
    currentTab: function currentTab(val, old) {
      if (val === old) {
        return;
      }

      this.$root.$emit('changed::tab', this, val, this.tabs[val]);
      this.$emit('input', val);
      this.tabs[val].$emit('click');
    },
    value: function value(val, old) {
      if (val === old) {
        return;
      }

      if (typeof old !== 'number') {
        old = 0;
      } // Moving left or right?


      var direction = val < old ? -1 : 1;
      this.setTab(val, false, direction);
    }
  },
  computed: {
    fade: function fade() {
      // This computed prop is sniffed by the tab child
      return !this.noFade;
    },
    navStyle: function navStyle() {
      return this.pills ? 'pills' : 'tabs';
    }
  },
  methods: {
    /**
     * Util: Return the sign of a number (as -1, 0, or 1)
     */
    sign: function sign(x) {
      return x === 0 ? 0 : x > 0 ? 1 : -1;
    },

    /*
         * handle keyboard navigation
         */
    onKeynav: function onKeynav(evt) {
      if (this.noKeyNav) {
        return;
      }

      var key = evt.keyCode;
      var shift = evt.shiftKey;

      function stop() {
        evt.preventDefault();
        evt.stopPropagation();
      }

      if (key === _keyCodes.default.UP || key === _keyCodes.default.LEFT) {
        stop();

        if (shift) {
          this.setTab(0, false, 1);
        } else {
          this.previousTab();
        }
      } else if (key === _keyCodes.default.DOWN || key === _keyCodes.default.RIGHT) {
        stop();

        if (shift) {
          this.setTab(this.tabs.length - 1, false, -1);
        } else {
          this.nextTab();
        }
      }
    },

    /**
     * Move to next tab
     */
    nextTab: function nextTab() {
      this.setTab(this.currentTab + 1, false, 1);
    },

    /**
     * Move to previous tab
     */
    previousTab: function previousTab() {
      this.setTab(this.currentTab - 1, false, -1);
    },

    /**
     * Set active tab on the tabs collection and the child 'tab' component
     * Index is the tab we want to activate. Direction is the direction we are moving
     * so if the tab we requested is disabled, we can skip over it.
     * Force is used by updateTabs to ensure we have cleared any previous active tabs.
     */
    setTab: function setTab(index, force, direction) {
      var _this2 = this;

      direction = this.sign(direction || 0);
      index = index || 0; // Prevent setting same tab and infinite loops!

      if (!force && index === this.currentTab) {
        return;
      }

      var tab = this.tabs[index]; // Don't go beyond indexes!

      if (!tab) {
        // Reset the v-model to the current Tab
        this.$emit('input', this.currentTab);
        return;
      } // Ignore or Skip disabled


      if (tab.disabled) {
        if (direction) {
          // Skip to next non disabled tab in specified direction (recursive)
          this.setTab(index + direction, force, direction);
        }

        return;
      } // Activate requested current tab, and deactivte any old tabs


      this.tabs.forEach(function (t) {
        if (t === tab) {
          // Set new tab as active
          _this2.$set(t, 'localActive', true);
        } else {
          // Ensure non current tabs are not active
          _this2.$set(t, 'localActive', false);
        }
      }); // Update currentTab

      this.currentTab = index;
    },

    /**
     * Dynamically update tabs list
     */
    updateTabs: function updateTabs() {
      // Probe tabs
      this.tabs = this.$children.filter(function (child) {
        return child._isTab;
      }); // Set initial active tab

      var tabIndex = null; // Find *last* active non-dsabled tab in current tabs
      // We trust tab state over currentTab

      this.tabs.forEach(function (tab, index) {
        if (tab.localActive && !tab.disabled) {
          tabIndex = index;
        }
      }); // Else try setting to currentTab

      if (tabIndex === null) {
        if (this.currentTab >= this.tabs.length) {
          // Handle last tab being removed
          this.setTab(this.tabs.length - 1, true, -1);
          return;
        } else if (this.tabs[this.currentTab] && !this.tabs[this.currentTab].disabled) {
          tabIndex = this.currentTab;
        }
      } // Else find *first* non-disabled tab in current tabs


      if (tabIndex === null) {
        this.tabs.forEach(function (tab, index) {
          if (!tab.disabled && tabIndex === null) {
            tabIndex = index;
          }
        });
      }

      this.setTab(tabIndex || 0, true, 0);
    }
  },
  mounted: function mounted() {
    this.updateTabs(); // Observe Child changes so we can notify tabs change

    (0, _observeDom.default)(this.$refs.tabsContainer, this.updateTabs.bind(this), {
      subtree: false
    });
  }
};
exports.default = _default;
},{"../../utils/key-codes":"node_modules/bootstrap-vue/es/utils/key-codes.js","../../utils/observe-dom":"node_modules/bootstrap-vue/es/utils/observe-dom.js","../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js"}],"node_modules/bootstrap-vue/es/components/tabs/tab.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _id = _interopRequireDefault(require("../../mixins/id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_id.default],
  render: function render(h) {
    var content = h(false);

    if (this.localActive || !this.computedLazy) {
      content = h(this.tag, {
        ref: 'panel',
        class: this.tabClasses,
        directives: [{
          name: 'show',
          value: this.localActive
        }],
        attrs: {
          role: 'tabpanel',
          id: this.safeId(),
          'aria-hidden': this.localActive ? 'false' : 'true',
          'aria-expanded': this.localActive ? 'true' : 'false',
          'aria-lablelledby': this.controlledBy || null
        }
      }, [this.$slots.default]);
    }

    return h('transition', {
      props: {
        mode: 'out-in'
      },
      on: {
        beforeEnter: this.beforeEnter,
        beforeLeave: this.beforeLeave
      }
    }, [content]);
  },
  methods: {
    beforeEnter: function beforeEnter() {
      var _this = this; // change opacity 1 frame after display
      // otherwise css transition won't happen


      window.requestAnimationFrame(function () {
        _this.show = true;
      });
    },
    beforeLeave: function beforeLeave() {
      this.show = false;
    }
  },
  data: function data() {
    return {
      localActive: this.active && !this.disabled,
      show: false
    };
  },
  mounted: function mounted() {
    this.show = this.localActive;
  },
  computed: {
    tabClasses: function tabClasses() {
      return ['tab-pane', this.$parent && this.$parent.card && !this.noBody ? 'card-body' : '', this.show ? 'show' : '', this.computedFade ? 'fade' : '', this.disabled ? 'disabled' : '', this.localActive ? 'active' : ''];
    },
    controlledBy: function controlledBy() {
      return this.buttonId || this.safeId('__BV_tab_button__');
    },
    computedFade: function computedFade() {
      return this.$parent.fade;
    },
    computedLazy: function computedLazy() {
      return this.$parent.lazy;
    },
    _isTab: function _isTab() {
      // For parent sniffing of child
      return true;
    }
  },
  props: {
    active: {
      type: Boolean,
      default: false
    },
    tag: {
      type: String,
      default: 'div'
    },
    buttonId: {
      type: String,
      default: ''
    },
    title: {
      type: String,
      default: ''
    },
    titleItemClass: {
      // Sniffed by tabs.vue and added to nav 'li.nav-item'
      type: [String, Array, Object],
      default: null
    },
    titleLinkClass: {
      // Sniffed by tabs.vue and added to nav 'a.nav-link'
      type: [String, Array, Object],
      default: null
    },
    headHtml: {
      // Is this actually ever used?
      type: String,
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    noBody: {
      type: Boolean,
      default: false
    },
    href: {
      type: String,
      default: '#'
    }
  }
};
exports.default = _default;
},{"../../mixins/id":"node_modules/bootstrap-vue/es/mixins/id.js"}],"node_modules/bootstrap-vue/es/components/tabs/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tabs = _interopRequireDefault(require("./tabs"));

var _tab = _interopRequireDefault(require("./tab"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bTabs: _tabs.default,
  bTab: _tab.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./tabs":"node_modules/bootstrap-vue/es/components/tabs/tabs.js","./tab":"node_modules/bootstrap-vue/es/components/tabs/tab.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/tooltip/tooltip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tooltip = _interopRequireDefault(require("../../utils/tooltip.class"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _toolpop = _interopRequireDefault(require("../../mixins/toolpop"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  mixins: [_toolpop.default],
  render: function render(h) {
    return h('div', {
      class: ['d-none'],
      style: {
        display: 'none'
      },
      attrs: {
        'aria-hidden': true
      }
    }, [h('div', {
      ref: 'title'
    }, this.$slots.default)]);
  },
  data: function data() {
    return {};
  },
  props: {
    title: {
      type: String,
      default: ''
    },
    triggers: {
      type: [String, Array],
      default: 'hover focus'
    },
    placement: {
      type: String,
      default: 'top'
    }
  },
  methods: {
    createToolpop: function createToolpop() {
      // getTarget is in toolpop mixin
      var target = this.getTarget();

      if (target) {
        this._toolpop = new _tooltip.default(target, this.getConfig(), this.$root);
      } else {
        this._toolpop = null;
        (0, _warn.default)("b-tooltip: 'target' element not found!");
      }

      return this._toolpop;
    }
  }
};
exports.default = _default;
},{"../../utils/tooltip.class":"node_modules/bootstrap-vue/es/utils/tooltip.class.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../mixins/toolpop":"node_modules/bootstrap-vue/es/mixins/toolpop.js"}],"node_modules/bootstrap-vue/es/components/tooltip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tooltip = _interopRequireDefault(require("./tooltip"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var components = {
  bTooltip: _tooltip.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerComponents)(Vue, components);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./tooltip":"node_modules/bootstrap-vue/es/components/tooltip/tooltip.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/components/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Alert", {
  enumerable: true,
  get: function () {
    return _alert.default;
  }
});
Object.defineProperty(exports, "Badge", {
  enumerable: true,
  get: function () {
    return _badge.default;
  }
});
Object.defineProperty(exports, "Breadcrumb", {
  enumerable: true,
  get: function () {
    return _breadcrumb.default;
  }
});
Object.defineProperty(exports, "Button", {
  enumerable: true,
  get: function () {
    return _button.default;
  }
});
Object.defineProperty(exports, "ButtonGroup", {
  enumerable: true,
  get: function () {
    return _buttonGroup.default;
  }
});
Object.defineProperty(exports, "ButtonToolbar", {
  enumerable: true,
  get: function () {
    return _buttonToolbar.default;
  }
});
Object.defineProperty(exports, "InputGroup", {
  enumerable: true,
  get: function () {
    return _inputGroup.default;
  }
});
Object.defineProperty(exports, "Card", {
  enumerable: true,
  get: function () {
    return _card.default;
  }
});
Object.defineProperty(exports, "Carousel", {
  enumerable: true,
  get: function () {
    return _carousel.default;
  }
});
Object.defineProperty(exports, "Layout", {
  enumerable: true,
  get: function () {
    return _layout.default;
  }
});
Object.defineProperty(exports, "Collapse", {
  enumerable: true,
  get: function () {
    return _collapse.default;
  }
});
Object.defineProperty(exports, "Dropdown", {
  enumerable: true,
  get: function () {
    return _dropdown.default;
  }
});
Object.defineProperty(exports, "Embed", {
  enumerable: true,
  get: function () {
    return _embed.default;
  }
});
Object.defineProperty(exports, "Form", {
  enumerable: true,
  get: function () {
    return _form.default;
  }
});
Object.defineProperty(exports, "FormGroup", {
  enumerable: true,
  get: function () {
    return _formGroup.default;
  }
});
Object.defineProperty(exports, "FormCheckbox", {
  enumerable: true,
  get: function () {
    return _formCheckbox.default;
  }
});
Object.defineProperty(exports, "FormRadio", {
  enumerable: true,
  get: function () {
    return _formRadio.default;
  }
});
Object.defineProperty(exports, "FormInput", {
  enumerable: true,
  get: function () {
    return _formInput.default;
  }
});
Object.defineProperty(exports, "FormTextarea", {
  enumerable: true,
  get: function () {
    return _formTextarea.default;
  }
});
Object.defineProperty(exports, "FormFile", {
  enumerable: true,
  get: function () {
    return _formFile.default;
  }
});
Object.defineProperty(exports, "FormSelect", {
  enumerable: true,
  get: function () {
    return _formSelect.default;
  }
});
Object.defineProperty(exports, "Image", {
  enumerable: true,
  get: function () {
    return _image.default;
  }
});
Object.defineProperty(exports, "Jumbotron", {
  enumerable: true,
  get: function () {
    return _jumbotron.default;
  }
});
Object.defineProperty(exports, "Link", {
  enumerable: true,
  get: function () {
    return _link.default;
  }
});
Object.defineProperty(exports, "ListGroup", {
  enumerable: true,
  get: function () {
    return _listGroup.default;
  }
});
Object.defineProperty(exports, "Media", {
  enumerable: true,
  get: function () {
    return _media.default;
  }
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
Object.defineProperty(exports, "Nav", {
  enumerable: true,
  get: function () {
    return _nav.default;
  }
});
Object.defineProperty(exports, "Navbar", {
  enumerable: true,
  get: function () {
    return _navbar.default;
  }
});
Object.defineProperty(exports, "Pagination", {
  enumerable: true,
  get: function () {
    return _pagination.default;
  }
});
Object.defineProperty(exports, "PaginationNav", {
  enumerable: true,
  get: function () {
    return _paginationNav.default;
  }
});
Object.defineProperty(exports, "Popover", {
  enumerable: true,
  get: function () {
    return _popover.default;
  }
});
Object.defineProperty(exports, "Progress", {
  enumerable: true,
  get: function () {
    return _progress.default;
  }
});
Object.defineProperty(exports, "Table", {
  enumerable: true,
  get: function () {
    return _table.default;
  }
});
Object.defineProperty(exports, "Tabs", {
  enumerable: true,
  get: function () {
    return _tabs.default;
  }
});
Object.defineProperty(exports, "Tooltip", {
  enumerable: true,
  get: function () {
    return _tooltip.default;
  }
});

var _alert = _interopRequireDefault(require("./alert"));

var _badge = _interopRequireDefault(require("./badge"));

var _breadcrumb = _interopRequireDefault(require("./breadcrumb"));

var _button = _interopRequireDefault(require("./button"));

var _buttonGroup = _interopRequireDefault(require("./button-group"));

var _buttonToolbar = _interopRequireDefault(require("./button-toolbar"));

var _inputGroup = _interopRequireDefault(require("./input-group"));

var _card = _interopRequireDefault(require("./card"));

var _carousel = _interopRequireDefault(require("./carousel"));

var _layout = _interopRequireDefault(require("./layout"));

var _collapse = _interopRequireDefault(require("./collapse"));

var _dropdown = _interopRequireDefault(require("./dropdown"));

var _embed = _interopRequireDefault(require("./embed"));

var _form = _interopRequireDefault(require("./form"));

var _formGroup = _interopRequireDefault(require("./form-group"));

var _formCheckbox = _interopRequireDefault(require("./form-checkbox"));

var _formRadio = _interopRequireDefault(require("./form-radio"));

var _formInput = _interopRequireDefault(require("./form-input"));

var _formTextarea = _interopRequireDefault(require("./form-textarea"));

var _formFile = _interopRequireDefault(require("./form-file"));

var _formSelect = _interopRequireDefault(require("./form-select"));

var _image = _interopRequireDefault(require("./image"));

var _jumbotron = _interopRequireDefault(require("./jumbotron"));

var _link = _interopRequireDefault(require("./link"));

var _listGroup = _interopRequireDefault(require("./list-group"));

var _media = _interopRequireDefault(require("./media"));

var _modal = _interopRequireDefault(require("./modal"));

var _nav = _interopRequireDefault(require("./nav"));

var _navbar = _interopRequireDefault(require("./navbar"));

var _pagination = _interopRequireDefault(require("./pagination"));

var _paginationNav = _interopRequireDefault(require("./pagination-nav"));

var _popover = _interopRequireDefault(require("./popover"));

var _progress = _interopRequireDefault(require("./progress"));

var _table = _interopRequireDefault(require("./table"));

var _tabs = _interopRequireDefault(require("./tabs"));

var _tooltip = _interopRequireDefault(require("./tooltip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./alert":"node_modules/bootstrap-vue/es/components/alert/index.js","./badge":"node_modules/bootstrap-vue/es/components/badge/index.js","./breadcrumb":"node_modules/bootstrap-vue/es/components/breadcrumb/index.js","./button":"node_modules/bootstrap-vue/es/components/button/index.js","./button-group":"node_modules/bootstrap-vue/es/components/button-group/index.js","./button-toolbar":"node_modules/bootstrap-vue/es/components/button-toolbar/index.js","./input-group":"node_modules/bootstrap-vue/es/components/input-group/index.js","./card":"node_modules/bootstrap-vue/es/components/card/index.js","./carousel":"node_modules/bootstrap-vue/es/components/carousel/index.js","./layout":"node_modules/bootstrap-vue/es/components/layout/index.js","./collapse":"node_modules/bootstrap-vue/es/components/collapse/index.js","./dropdown":"node_modules/bootstrap-vue/es/components/dropdown/index.js","./embed":"node_modules/bootstrap-vue/es/components/embed/index.js","./form":"node_modules/bootstrap-vue/es/components/form/index.js","./form-group":"node_modules/bootstrap-vue/es/components/form-group/index.js","./form-checkbox":"node_modules/bootstrap-vue/es/components/form-checkbox/index.js","./form-radio":"node_modules/bootstrap-vue/es/components/form-radio/index.js","./form-input":"node_modules/bootstrap-vue/es/components/form-input/index.js","./form-textarea":"node_modules/bootstrap-vue/es/components/form-textarea/index.js","./form-file":"node_modules/bootstrap-vue/es/components/form-file/index.js","./form-select":"node_modules/bootstrap-vue/es/components/form-select/index.js","./image":"node_modules/bootstrap-vue/es/components/image/index.js","./jumbotron":"node_modules/bootstrap-vue/es/components/jumbotron/index.js","./link":"node_modules/bootstrap-vue/es/components/link/index.js","./list-group":"node_modules/bootstrap-vue/es/components/list-group/index.js","./media":"node_modules/bootstrap-vue/es/components/media/index.js","./modal":"node_modules/bootstrap-vue/es/components/modal/index.js","./nav":"node_modules/bootstrap-vue/es/components/nav/index.js","./navbar":"node_modules/bootstrap-vue/es/components/navbar/index.js","./pagination":"node_modules/bootstrap-vue/es/components/pagination/index.js","./pagination-nav":"node_modules/bootstrap-vue/es/components/pagination-nav/index.js","./popover":"node_modules/bootstrap-vue/es/components/popover/index.js","./progress":"node_modules/bootstrap-vue/es/components/progress/index.js","./table":"node_modules/bootstrap-vue/es/components/table/index.js","./tabs":"node_modules/bootstrap-vue/es/components/tabs/index.js","./tooltip":"node_modules/bootstrap-vue/es/components/tooltip/index.js"}],"node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.class.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _object = require("../../utils/object");

var _observeDom = _interopRequireDefault(require("../../utils/observe-dom"));

var _warn = _interopRequireDefault(require("../../utils/warn"));

var _dom = require("../../utils/dom");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
/*
 * ScrollSpy class definition
 */


/*
 * Constants / Defaults
 */
var NAME = 'v-b-scrollspy';
var ACTIVATE_EVENT = 'bv::scrollspy::activate';
var Default = {
  element: 'body',
  offset: 10,
  method: 'auto',
  throttle: 75
};
var DefaultType = {
  element: '(string|element|component)',
  offset: 'number',
  method: 'string',
  throttle: 'number'
};
var ClassName = {
  DROPDOWN_ITEM: 'dropdown-item',
  ACTIVE: 'active'
};
var Selector = {
  ACTIVE: '.active',
  NAV_LIST_GROUP: '.nav, .list-group',
  NAV_LINKS: '.nav-link',
  NAV_ITEMS: '.nav-item',
  LIST_ITEMS: '.list-group-item',
  DROPDOWN: '.dropdown, .dropup',
  DROPDOWN_ITEMS: '.dropdown-item',
  DROPDOWN_TOGGLE: '.dropdown-toggle'
};
var OffsetMethod = {
  OFFSET: 'offset',
  POSITION: 'position' // HREFs must start with # but can be === '#', or start with '#/' or '#!' (which can be router links)

};
var HREF_REGEX = /^#[^/!]+/; // Transition Events

var TransitionEndEvents = ['webkitTransitionEnd', 'transitionend', 'otransitionend', 'oTransitionEnd'];
/*
 * Utility Methods
 */
// Better var type detection

/* istanbul ignore next: not easy to test */

function toType(obj) {
  return {}.toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
} // Check config properties for expected types

/* istanbul ignore next: not easy to test */


function typeCheckConfig(componentName, config, configTypes) {
  for (var property in configTypes) {
    if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
      var expectedTypes = configTypes[property];
      var value = config[property];
      var valueType = value && (0, _dom.isElement)(value) ? 'element' : toType(value); // handle Vue instances

      valueType = value && value._isVue ? 'component' : valueType;

      if (!new RegExp(expectedTypes).test(valueType)) {
        (0, _warn.default)(componentName + ': Option "' + property + '" provided type "' + valueType + '", but expected type "' + expectedTypes + '"');
      }
    }
  }
}
/*
 * ------------------------------------------------------------------------
 * Class Definition
 * ------------------------------------------------------------------------
 */

/* istanbul ignore next: not easy to test */


var ScrollSpy = function () {
  function ScrollSpy(element, config, $root) {
    _classCallCheck(this, ScrollSpy); // The element we activate links in


    this.$el = element;
    this.$scroller = null;
    this.$selector = [Selector.NAV_LINKS, Selector.LIST_ITEMS, Selector.DROPDOWN_ITEMS].join(',');
    this.$offsets = [];
    this.$targets = [];
    this.$activeTarget = null;
    this.$scrollHeight = 0;
    this.$resizeTimeout = null;
    this.$obs_scroller = null;
    this.$obs_targets = null;
    this.$root = $root || null;
    this.$config = null;
    this.updateConfig(config);
  }

  _createClass(ScrollSpy, [{
    key: 'updateConfig',
    value: function updateConfig(config, $root) {
      if (this.$scroller) {
        // Just in case out scroll element has changed
        this.unlisten();
        this.$scroller = null;
      }

      var cfg = (0, _object.assign)({}, this.constructor.Default, config);

      if ($root) {
        this.$root = $root;
      }

      typeCheckConfig(this.constructor.Name, cfg, this.constructor.DefaultType);
      this.$config = cfg;

      if (this.$root) {
        var self = this;
        this.$root.$nextTick(function () {
          self.listen();
        });
      } else {
        this.listen();
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this.unlisten();
      clearTimeout(this.$resizeTimeout);
      this.$resizeTimeout = null;
      this.$el = null;
      this.$config = null;
      this.$scroller = null;
      this.$selector = null;
      this.$offsets = null;
      this.$targets = null;
      this.$activeTarget = null;
      this.$scrollHeight = null;
    }
  }, {
    key: 'listen',
    value: function listen() {
      var _this = this;

      var scroller = this.getScroller();

      if (scroller && scroller.tagName !== 'BODY') {
        (0, _dom.eventOn)(scroller, 'scroll', this);
      }

      (0, _dom.eventOn)(window, 'scroll', this);
      (0, _dom.eventOn)(window, 'resize', this);
      (0, _dom.eventOn)(window, 'orientationchange', this);
      TransitionEndEvents.forEach(function (evtName) {
        (0, _dom.eventOn)(window, evtName, _this);
      });
      this.setObservers(true); // Scedule a refresh

      this.handleEvent('refresh');
    }
  }, {
    key: 'unlisten',
    value: function unlisten() {
      var _this2 = this;

      var scroller = this.getScroller();
      this.setObservers(false);

      if (scroller && scroller.tagName !== 'BODY') {
        (0, _dom.eventOff)(scroller, 'scroll', this);
      }

      (0, _dom.eventOff)(window, 'scroll', this);
      (0, _dom.eventOff)(window, 'resize', this);
      (0, _dom.eventOff)(window, 'orientationchange', this);
      TransitionEndEvents.forEach(function (evtName) {
        (0, _dom.eventOff)(window, evtName, _this2);
      });
    }
  }, {
    key: 'setObservers',
    value: function setObservers(on) {
      var _this3 = this; // We observe both the scroller for content changes, and the target links


      if (this.$obs_scroller) {
        this.$obs_scroller.disconnect();
        this.$obs_scroller = null;
      }

      if (this.$obs_targets) {
        this.$obs_targets.disconnect();
        this.$obs_targets = null;
      }

      if (on) {
        this.$obs_targets = (0, _observeDom.default)(this.$el, function () {
          _this3.handleEvent('mutation');
        }, {
          subtree: true,
          childList: true,
          attributes: true,
          attributeFilter: ['href']
        });
        this.$obs_scroller = (0, _observeDom.default)(this.getScroller(), function () {
          _this3.handleEvent('mutation');
        }, {
          subtree: true,
          childList: true,
          characterData: true,
          attributes: true,
          attributeFilter: ['id', 'style', 'class']
        });
      }
    } // general event handler

  }, {
    key: 'handleEvent',
    value: function handleEvent(evt) {
      var type = typeof evt === 'string' ? evt : evt.type;
      var self = this;

      function resizeThrottle() {
        if (!self.$resizeTimeout) {
          self.$resizeTimeout = setTimeout(function () {
            self.refresh();
            self.process();
            self.$resizeTimeout = null;
          }, self.$config.throttle);
        }
      }

      if (type === 'scroll') {
        if (!this.$obs_scroller) {
          // Just in case we are added to the DOM before the scroll target is
          // We re-instantiate our listeners, just in case
          this.listen();
        }

        this.process();
      } else if (/(resize|orientationchange|mutation|refresh)/.test(type)) {
        // Postpone these events by throttle time
        resizeThrottle();
      }
    } // Refresh the list of target links on the element we are applied to

  }, {
    key: 'refresh',
    value: function refresh() {
      var _this4 = this;

      var scroller = this.getScroller();

      if (!scroller) {
        return;
      }

      var autoMethod = scroller !== scroller.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;
      var method = this.$config.method === 'auto' ? autoMethod : this.$config.method;
      var methodFn = method === OffsetMethod.POSITION ? _dom.position : _dom.offset;
      var offsetBase = method === OffsetMethod.POSITION ? this.getScrollTop() : 0;
      this.$offsets = [];
      this.$targets = [];
      this.$scrollHeight = this.getScrollHeight(); // Find all the unique link href's

      (0, _dom.selectAll)(this.$selector, this.$el).map(function (link) {
        return (0, _dom.getAttr)(link, 'href');
      }).filter(function (href) {
        return HREF_REGEX.test(href || '');
      }).map(function (href) {
        var el = (0, _dom.select)(href, scroller);

        if ((0, _dom.isVisible)(el)) {
          return {
            offset: parseInt(methodFn(el).top, 10) + offsetBase,
            target: href
          };
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a.offset - b.offset;
      }).reduce(function (memo, item) {
        // record only unique targets/offfsets
        if (!memo[item.target]) {
          _this4.$offsets.push(item.offset);

          _this4.$targets.push(item.target);

          memo[item.target] = true;
        }

        return memo;
      }, {});
      return this;
    } // Handle activating/clearing

  }, {
    key: 'process',
    value: function process() {
      var scrollTop = this.getScrollTop() + this.$config.offset;
      var scrollHeight = this.getScrollHeight();
      var maxScroll = this.$config.offset + scrollHeight - this.getOffsetHeight();

      if (this.$scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this.$targets[this.$targets.length - 1];

        if (this.$activeTarget !== target) {
          this.activate(target);
        }

        return;
      }

      if (this.$activeTarget && scrollTop < this.$offsets[0] && this.$offsets[0] > 0) {
        this.$activeTarget = null;
        this.clear();
        return;
      }

      for (var i = this.$offsets.length; i--;) {
        var isActiveTarget = this.$activeTarget !== this.$targets[i] && scrollTop >= this.$offsets[i] && (typeof this.$offsets[i + 1] === 'undefined' || scrollTop < this.$offsets[i + 1]);

        if (isActiveTarget) {
          this.activate(this.$targets[i]);
        }
      }
    }
  }, {
    key: 'getScroller',
    value: function getScroller() {
      if (this.$scroller) {
        return this.$scroller;
      }

      var scroller = this.$config.element;

      if (!scroller) {
        return null;
      } else if ((0, _dom.isElement)(scroller.$el)) {
        scroller = scroller.$el;
      } else if (typeof scroller === 'string') {
        scroller = (0, _dom.select)(scroller);
      }

      if (!scroller) {
        return null;
      }

      this.$scroller = scroller.tagName === 'BODY' ? window : scroller;
      return this.$scroller;
    }
  }, {
    key: 'getScrollTop',
    value: function getScrollTop() {
      var scroller = this.getScroller();
      return scroller === window ? scroller.pageYOffset : scroller.scrollTop;
    }
  }, {
    key: 'getScrollHeight',
    value: function getScrollHeight() {
      return this.getScroller().scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    }
  }, {
    key: 'getOffsetHeight',
    value: function getOffsetHeight() {
      var scroller = this.getScroller();
      return scroller === window ? window.innerHeight : (0, _dom.getBCR)(scroller).height;
    }
  }, {
    key: 'activate',
    value: function activate(target) {
      var _this5 = this;

      this.$activeTarget = target;
      this.clear(); // Grab the list of target links (<a href="{$target}">)

      var links = (0, _dom.selectAll)(this.$selector.split(',').map(function (selector) {
        return selector + '[href="' + target + '"]';
      }).join(','), this.$el);
      links.forEach(function (link) {
        if ((0, _dom.hasClass)(link, ClassName.DROPDOWN_ITEM)) {
          // This is a dropdown item, so find the .dropdown-toggle and set it's state
          var dropdown = (0, _dom.closest)(Selector.DROPDOWN, link);

          if (dropdown) {
            _this5.setActiveState((0, _dom.select)(Selector.DROPDOWN_TOGGLE, dropdown), true);
          } // Also set this link's state


          _this5.setActiveState(link, true);
        } else {
          // Set triggered link as active
          _this5.setActiveState(link, true);

          if ((0, _dom.matches)(link.parentElement, Selector.NAV_ITEMS)) {
            // Handle nav-link inside nav-item, and set nav-item active
            _this5.setActiveState(link.parentElement, true);
          } // Set triggered links parents as active
          // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor


          var el = link;

          while (el) {
            el = (0, _dom.closest)(Selector.NAV_LIST_GROUP, el);
            var sibling = el ? el.previousElementSibling : null;

            if ((0, _dom.matches)(sibling, Selector.NAV_LINKS + ', ' + Selector.LIST_ITEMS)) {
              _this5.setActiveState(sibling, true);
            } // Handle special case where nav-link is inside a nav-item


            if ((0, _dom.matches)(sibling, Selector.NAV_ITEMS)) {
              _this5.setActiveState((0, _dom.select)(Selector.NAV_LINKS, sibling), true); // Add active state to nav-item as well


              _this5.setActiveState(sibling, true);
            }
          }
        }
      }); // Signal event to via $root, passing ID of activaed target and reference to array of links

      if (links && links.length > 0 && this.$root) {
        this.$root.$emit(ACTIVATE_EVENT, target, links);
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      var _this6 = this;

      (0, _dom.selectAll)(this.$selector + ', ' + Selector.NAV_ITEMS, this.$el).filter(function (el) {
        return (0, _dom.hasClass)(el, ClassName.ACTIVE);
      }).forEach(function (el) {
        return _this6.setActiveState(el, false);
      });
    }
  }, {
    key: 'setActiveState',
    value: function setActiveState(el, active) {
      if (!el) {
        return;
      }

      if (active) {
        (0, _dom.addClass)(el, ClassName.ACTIVE);
      } else {
        (0, _dom.removeClass)(el, ClassName.ACTIVE);
      }
    }
  }], [{
    key: 'Name',
    get: function get() {
      return NAME;
    }
  }, {
    key: 'Default',
    get: function get() {
      return Default;
    }
  }, {
    key: 'DefaultType',
    get: function get() {
      return DefaultType;
    }
  }]);

  return ScrollSpy;
}();

var _default = ScrollSpy;
exports.default = _default;
},{"../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/observe-dom":"node_modules/bootstrap-vue/es/utils/observe-dom.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js","../../utils/dom":"node_modules/bootstrap-vue/es/utils/dom.js"}],"node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _scrollspy = _interopRequireDefault(require("./scrollspy.class"));

var _object = require("../../utils/object");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
/*
 * ScrollSpy directive v-b-scrollspy
 */


var inBrowser = typeof window !== 'undefined';
var isServer = !inBrowser; // Key we use to store our Instance

var BVSS = '__BV_ScrollSpy__'; // Generate config from bindings

/* istanbul ignore next: not easy to test */

function makeConfig(binding) {
  var config = {}; // If Argument, assume element ID

  if (binding.arg) {
    // Element ID specified as arg. We must pre-pend #
    config.element = '#' + binding.arg;
  } // Process modifiers


  (0, _object.keys)(binding.modifiers).forEach(function (mod) {
    if (/^\d+$/.test(mod)) {
      // Offest value
      config.offset = parseInt(mod, 10);
    } else if (/^(auto|position|offset)$/.test(mod)) {
      // Offset method
      config.method = mod;
    }
  }); // Process value

  if (typeof binding.value === 'string') {
    // Value is a CSS ID or selector
    config.element = binding.value;
  } else if (typeof binding.value === 'number') {
    // Value is offset
    config.offset = Math.round(binding.value);
  } else if (_typeof(binding.value) === 'object') {
    // Value is config object
    // Filter the object based on our supported config options
    (0, _object.keys)(binding.value).filter(function (k) {
      return Boolean(_scrollspy.default.DefaultType[k]);
    }).forEach(function (k) {
      config[k] = binding.value[k];
    });
  }

  return config;
}
/* istanbul ignore next: not easy to test */


function addBVSS(el, binding, vnode) {
  if (isServer) {
    return;
  }

  var cfg = makeConfig(binding);

  if (!el[BVSS]) {
    el[BVSS] = new _scrollspy.default(el, cfg, vnode.context.$root);
  } else {
    el[BVSS].updateConfig(cfg, vnode.context.$root);
  }

  return el[BVSS];
}
/* istanbul ignore next: not easy to test */


function removeBVSS(el) {
  if (el[BVSS]) {
    el[BVSS].dispose();
    el[BVSS] = null;
  }
}
/*
 * Export our directive
 */

/* istanbul ignore next: not easy to test */


var _default = {
  bind: function bind(el, binding, vnode) {
    addBVSS(el, binding, vnode);
  },
  inserted: function inserted(el, binding, vnode) {
    addBVSS(el, binding, vnode);
  },
  update: function update(el, binding, vnode) {
    addBVSS(el, binding, vnode);
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    addBVSS(el, binding, vnode);
  },
  unbind: function unbind(el) {
    if (isServer) {
      return;
    } // Remove scroll event listener on scrollElId


    removeBVSS(el);
  }
};
exports.default = _default;
},{"./scrollspy.class":"node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.class.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js"}],"node_modules/bootstrap-vue/es/directives/scrollspy/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _scrollspy = _interopRequireDefault(require("./scrollspy"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directives = {
  bScrollspy: _scrollspy.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerDirectives)(Vue, directives);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./scrollspy":"node_modules/bootstrap-vue/es/directives/scrollspy/scrollspy.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/directives/tooltip/tooltip.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popper = _interopRequireDefault(require("popper.js"));

var _tooltip = _interopRequireDefault(require("../../utils/tooltip.class"));

var _object = require("../../utils/object");

var _warn = _interopRequireDefault(require("../../utils/warn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var inBrowser = typeof window !== 'undefined' && typeof document !== 'undefined'; // Key which we use to store tooltip object on element

var BVTT = '__BV_ToolTip__'; // Valid event triggers

var validTriggers = {
  'focus': true,
  'hover': true,
  'click': true,
  'blur': true // Build a ToolTip config based on bindings (if any)
  // Arguments and modifiers take precedence over passed value config object

  /* istanbul ignore next: not easy to test */

};

function parseBindings(bindings) {
  // We start out with a blank config
  var config = {}; // Process bindings.value

  if (typeof bindings.value === 'string') {
    // Value is tooltip content (html optionally supported)
    config.title = bindings.value;
  } else if (typeof bindings.value === 'function') {
    // Title generator function
    config.title = bindings.value;
  } else if (_typeof(bindings.value) === 'object') {
    // Value is config object, so merge
    config = (0, _object.assign)(bindings.value);
  } // If Argument, assume element ID of container element


  if (bindings.arg) {
    // Element ID specified as arg. We must prepend '#' to become a CSS selector
    config.container = '#' + bindings.arg;
  } // Process modifiers


  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {
    if (/^html$/.test(mod)) {
      // Title allows HTML
      config.html = true;
    } else if (/^nofade$/.test(mod)) {
      // no animation
      config.animation = false;
    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {
      // placement of tooltip
      config.placement = mod;
    } else if (/^(window|viewport)$/.test(mod)) {
      // bounday of tooltip
      config.boundary = mod;
    } else if (/^d\d+$/.test(mod)) {
      // delay value
      var delay = parseInt(mod.slice(1), 10) || 0;

      if (delay) {
        config.delay = delay;
      }
    } else if (/^o-?\d+$/.test(mod)) {
      // offset value. Negative allowed
      var offset = parseInt(mod.slice(1), 10) || 0;

      if (offset) {
        config.offset = offset;
      }
    }
  }); // Special handling of event trigger modifiers Trigger is a space separated list

  var selectedTriggers = {}; // parse current config object trigger

  var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\s+/) : [];
  triggers.forEach(function (trigger) {
    if (validTriggers[trigger]) {
      selectedTriggers[trigger] = true;
    }
  }); // Parse Modifiers for triggers

  (0, _object.keys)(validTriggers).forEach(function (trigger) {
    if (bindings.modifiers[trigger]) {
      selectedTriggers[trigger] = true;
    }
  }); // Sanitize triggers

  config.trigger = (0, _object.keys)(selectedTriggers).join(' ');

  if (config.trigger === 'blur') {
    // Blur by itself is useless, so convert it to 'focus'
    config.trigger = 'focus';
  }

  if (!config.trigger) {
    // remove trigger config
    delete config.trigger;
  }

  return config;
} //
// Add or Update tooltip on our element
//

/* istanbul ignore next: not easy to test */


function applyBVTT(el, bindings, vnode) {
  if (!inBrowser) {
    return;
  }

  if (!_popper.default) {
    // Popper is required for tooltips to work
    (0, _warn.default)('v-b-tooltip: Popper.js is required for tooltips to work');
    return;
  }

  if (el[BVTT]) {
    el[BVTT].updateConfig(parseBindings(bindings));
  } else {
    el[BVTT] = new _tooltip.default(el, parseBindings(bindings), vnode.context.$root);
  }
} //
// Remove tooltip on our element
//

/* istanbul ignore next: not easy to test */


function removeBVTT(el) {
  if (!inBrowser) {
    return;
  }

  if (el[BVTT]) {
    el[BVTT].destroy();
    el[BVTT] = null;
    delete el[BVTT];
  }
}
/*
 * Export our directive
 */

/* istanbul ignore next: not easy to test */


var _default = {
  bind: function bind(el, bindings, vnode) {
    applyBVTT(el, bindings, vnode);
  },
  inserted: function inserted(el, bindings, vnode) {
    applyBVTT(el, bindings, vnode);
  },
  update: function update(el, bindings, vnode) {
    if (bindings.value !== bindings.oldValue) {
      applyBVTT(el, bindings, vnode);
    }
  },
  componentUpdated: function componentUpdated(el, bindings, vnode) {
    if (bindings.value !== bindings.oldValue) {
      applyBVTT(el, bindings, vnode);
    }
  },
  unbind: function unbind(el) {
    removeBVTT(el);
  }
};
exports.default = _default;
},{"popper.js":"node_modules/popper.js/dist/esm/popper.js","../../utils/tooltip.class":"node_modules/bootstrap-vue/es/utils/tooltip.class.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js"}],"node_modules/bootstrap-vue/es/directives/tooltip/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tooltip = _interopRequireDefault(require("./tooltip"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directives = {
  bTooltip: _tooltip.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerDirectives)(Vue, directives);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./tooltip":"node_modules/bootstrap-vue/es/directives/tooltip/tooltip.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/directives/popover/popover.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popper = _interopRequireDefault(require("popper.js"));

var _popover = _interopRequireDefault(require("../../utils/popover.class"));

var _object = require("../../utils/object");

var _warn = _interopRequireDefault(require("../../utils/warn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var inBrowser = typeof window !== 'undefined' && typeof document !== 'undefined'; // Key which we use to store tooltip object on element

var BVPO = '__BV_PopOver__'; // Valid event triggers

var validTriggers = {
  'focus': true,
  'hover': true,
  'click': true,
  'blur': true // Build a PopOver config based on bindings (if any)
  // Arguments and modifiers take precedence over pased value config object

  /* istanbul ignore next: not easy to test */

};

function parseBindings(bindings) {
  // We start out with a blank config
  var config = {}; // Process bindings.value

  if (typeof bindings.value === 'string') {
    // Value is popover content (html optionally supported)
    config.content = bindings.value;
  } else if (typeof bindings.value === 'function') {
    // Content generator function
    config.content = bindings.value;
  } else if (_typeof(bindings.value) === 'object') {
    // Value is config object, so merge
    config = (0, _object.assign)(bindings.value);
  } // If Argument, assume element ID of container element


  if (bindings.arg) {
    // Element ID specified as arg. We must prepend '#' to become a CSS selector
    config.container = '#' + bindings.arg;
  } // Process modifiers


  (0, _object.keys)(bindings.modifiers).forEach(function (mod) {
    if (/^html$/.test(mod)) {
      // Title allows HTML
      config.html = true;
    } else if (/^nofade$/.test(mod)) {
      // no animation
      config.animation = false;
    } else if (/^(auto|top(left|right)?|bottom(left|right)?|left(top|bottom)?|right(top|bottom)?)$/.test(mod)) {
      // placement of popover
      config.placement = mod;
    } else if (/^(window|viewport)$/.test(mod)) {
      // bounday of popover
      config.boundary = mod;
    } else if (/^d\d+$/.test(mod)) {
      // delay value
      var delay = parseInt(mod.slice(1), 10) || 0;

      if (delay) {
        config.delay = delay;
      }
    } else if (/^o-?\d+$/.test(mod)) {
      // offset value (negative allowed)
      var offset = parseInt(mod.slice(1), 10) || 0;

      if (offset) {
        config.offset = offset;
      }
    }
  }); // Special handling of event trigger modifiers Trigger is a space separated list

  var selectedTriggers = {}; // parse current config object trigger

  var triggers = typeof config.trigger === 'string' ? config.trigger.trim().split(/\s+/) : [];
  triggers.forEach(function (trigger) {
    if (validTriggers[trigger]) {
      selectedTriggers[trigger] = true;
    }
  }); // Parse Modifiers for triggers

  (0, _object.keys)(validTriggers).forEach(function (trigger) {
    if (bindings.modifiers[trigger]) {
      selectedTriggers[trigger] = true;
    }
  }); // Sanitize triggers

  config.trigger = (0, _object.keys)(selectedTriggers).join(' ');

  if (config.trigger === 'blur') {
    // Blur by itself is useless, so convert it to focus
    config.trigger = 'focus';
  }

  if (!config.trigger) {
    // remove trigger config
    delete config.trigger;
  }

  return config;
} //
// Add or Update popover on our element
//

/* istanbul ignore next: not easy to test */


function applyBVPO(el, bindings, vnode) {
  if (!inBrowser) {
    return;
  }

  if (!_popper.default) {
    // Popper is required for tooltips to work
    (0, _warn.default)('v-b-popover: Popper.js is required for popovers to work');
    return;
  }

  if (el[BVPO]) {
    el[BVPO].updateConfig(parseBindings(bindings));
  } else {
    el[BVPO] = new _popover.default(el, parseBindings(bindings), vnode.context.$root);
  }
}

; //
// Remove popover on our element
//

/* istanbul ignore next */

function removeBVPO(el) {
  if (!inBrowser) {
    return;
  }

  if (el[BVPO]) {
    el[BVPO].destroy();
    el[BVPO] = null;
    delete el[BVPO];
  }
}
/*
 * Export our directive
 */

/* istanbul ignore next: not easy to test */


var _default = {
  bind: function bind(el, bindings, vnode) {
    applyBVPO(el, bindings, vnode);
  },
  inserted: function inserted(el, bindings, vnode) {
    applyBVPO(el, bindings, vnode);
  },
  update: function update(el, bindings, vnode) {
    if (bindings.value !== bindings.oldValue) {
      applyBVPO(el, bindings, vnode);
    }
  },
  componentUpdated: function componentUpdated(el, bindings, vnode) {
    if (bindings.value !== bindings.oldValue) {
      applyBVPO(el, bindings, vnode);
    }
  },
  unbind: function unbind(el) {
    removeBVPO(el);
  }
};
exports.default = _default;
},{"popper.js":"node_modules/popper.js/dist/esm/popper.js","../../utils/popover.class":"node_modules/bootstrap-vue/es/utils/popover.class.js","../../utils/object":"node_modules/bootstrap-vue/es/utils/object.js","../../utils/warn":"node_modules/bootstrap-vue/es/utils/warn.js"}],"node_modules/bootstrap-vue/es/directives/popover/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _popover = _interopRequireDefault(require("./popover"));

var _plugins = require("../../utils/plugins");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directives = {
  bPopover: _popover.default
};
var VuePlugin = {
  install: function install(Vue) {
    (0, _plugins.registerDirectives)(Vue, directives);
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./popover":"node_modules/bootstrap-vue/es/directives/popover/popover.js","../../utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap-vue/es/directives/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Toggle", {
  enumerable: true,
  get: function () {
    return _toggle.default;
  }
});
Object.defineProperty(exports, "Modal", {
  enumerable: true,
  get: function () {
    return _modal.default;
  }
});
Object.defineProperty(exports, "Scrollspy", {
  enumerable: true,
  get: function () {
    return _scrollspy.default;
  }
});
Object.defineProperty(exports, "Tooltip", {
  enumerable: true,
  get: function () {
    return _tooltip.default;
  }
});
Object.defineProperty(exports, "Popover", {
  enumerable: true,
  get: function () {
    return _popover.default;
  }
});

var _toggle = _interopRequireDefault(require("./toggle"));

var _modal = _interopRequireDefault(require("./modal"));

var _scrollspy = _interopRequireDefault(require("./scrollspy"));

var _tooltip = _interopRequireDefault(require("./tooltip"));

var _popover = _interopRequireDefault(require("./popover"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./toggle":"node_modules/bootstrap-vue/es/directives/toggle/index.js","./modal":"node_modules/bootstrap-vue/es/directives/modal/index.js","./scrollspy":"node_modules/bootstrap-vue/es/directives/scrollspy/index.js","./tooltip":"node_modules/bootstrap-vue/es/directives/tooltip/index.js","./popover":"node_modules/bootstrap-vue/es/directives/popover/index.js"}],"node_modules/bootstrap-vue/es/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var components = _interopRequireWildcard(require("./components"));

var directives = _interopRequireWildcard(require("./directives"));

var _plugins = require("./utils/plugins");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var VuePlugin = {
  install: function install(Vue) {
    if (Vue._bootstrap_vue_installed) {
      return;
    }

    Vue._bootstrap_vue_installed = true; // Register component plugins

    for (var plugin in components) {
      Vue.use(components[plugin]);
    } // Register directive plugins


    for (var _plugin in directives) {
      Vue.use(directives[_plugin]);
    }
  }
};
(0, _plugins.vueUse)(VuePlugin);
var _default = VuePlugin;
exports.default = _default;
},{"./components":"node_modules/bootstrap-vue/es/components/index.js","./directives":"node_modules/bootstrap-vue/es/directives/index.js","./utils/plugins":"node_modules/bootstrap-vue/es/utils/plugins.js"}],"node_modules/bootstrap/dist/css/bootstrap.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/bootstrap-vue/dist/bootstrap-vue.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js"}],"node_modules/vue-hot-reload-api/dist/index.js":[function(require,module,exports) {
var Vue // late bind
var version
var map = Object.create(null)
if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map
}
var installed = false
var isBrowserify = false
var initHookName = 'beforeCreate'

exports.install = function (vue, browserify) {
  if (installed) { return }
  installed = true

  Vue = vue.__esModule ? vue.default : vue
  version = Vue.version.split('.').map(Number)
  isBrowserify = browserify

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init'
  }

  exports.compatible = version[0] >= 2
  if (!exports.compatible) {
    console.warn(
      '[HMR] You are using a version of vue-hot-reload-api that is ' +
        'only compatible with Vue.js core ^2.0.0.'
    )
    return
  }
}

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  if(map[id]) { return }

  var Ctor = null
  if (typeof options === 'function') {
    Ctor = options
    options = Ctor.options
  }
  makeOptionsHot(id, options)
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  }
}

/**
 * Check if module is recorded
 *
 * @param {String} id
 */

exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined'
}

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render
    options.render = function (h, ctx) {
      var instances = map[id].instances
      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent)
      }
      return render(h, ctx)
    }
  } else {
    injectHook(options, initHookName, function() {
      var record = map[id]
      if (!record.Ctor) {
        record.Ctor = this.constructor
      }
      record.instances.push(this)
    })
    injectHook(options, 'beforeDestroy', function() {
      var instances = map[id].instances
      instances.splice(instances.indexOf(this), 1)
    })
  }
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name]
  options[name] = existing
    ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook]
    : [hook]
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg)
    } catch (e) {
      console.error(e)
      console.warn(
        'Something went wrong during Vue component hot-reload. Full reload required.'
      )
    }
  }
}

function updateOptions (oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key]
    }
  }
  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1]
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id]
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate()
    })
    return
  }
  if (typeof options === 'function') {
    options = options.options
  }
  if (record.Ctor) {
    record.Ctor.options.render = options.render
    record.Ctor.options.staticRenderFns = options.staticRenderFns
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render
      instance.$options.staticRenderFns = options.staticRenderFns
      // reset static trees
      // pre 2.5, all static trees are cached together on the instance
      if (instance._staticTrees) {
        instance._staticTrees = []
      }
      // 2.5.0
      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = []
      }
      // 2.5.3
      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = []
      }
      // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      instance.$forceUpdate()
    })
  } else {
    // functional or no instance created yet
    record.options.render = options.render
    record.options.staticRenderFns = options.staticRenderFns

    // handle functional component re-render
    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options)
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles
        if (injectStyles) {
          var render = options.render
          record.options.render = function (h, ctx) {
            injectStyles.call(ctx)
            return render(h, ctx)
          }
        }
      }
      record.options._Ctor = null
      // 2.5.3
      if (Array.isArray(record.options.cached)) {
        record.options.cached = []
      }
      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate()
      })
    }
  }
})

exports.reload = tryWrap(function (id, options) {
  var record = map[id]
  if (options) {
    if (typeof options === 'function') {
      options = options.options
    }
    makeOptionsHot(id, options)
    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options
      }
      var newCtor = record.Ctor.super.extend(options)
      record.Ctor.options = newCtor.options
      record.Ctor.cid = newCtor.cid
      record.Ctor.prototype = newCtor.prototype
      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release()
      }
    } else {
      updateOptions(record.options, options)
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate()
    } else {
      console.warn(
        'Root or manually mounted instance modified. Full reload required.'
      )
    }
  })
})

},{}],"src/js/App.vue":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
//
//
//
//
//
//
//
//
//
//
//
//
var _default = {
  name: 'app',
  data: function data() {
    return {
      msg: 'Data Graph'
    };
  }
};
exports.default = _default;
        var $02fce0 = exports.default || module.exports;
      
      if (typeof $02fce0 === 'function') {
        $02fce0 = $02fce0.options;
      }
    
        /* template */
        Object.assign($02fce0, (function () {
          var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { attrs: { id: "app" } }, [
    _c("h1", [_vm._v(_vm._s(_vm.msg))]),
    _vm._v(" "),
    _c("input", {
      attrs: {
        id: "repository",
        type: "text",
        title:
          "Tip: enter a private repo URL to see the credentialManager plugin prompt for a password."
      }
    }),
    _vm._v(" "),
    _c("button", { attrs: { type: "button", id: "cloneButton" } }, [
      _vm._v("Clone")
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: null,
            functional: undefined
          };
        })());
      
    /* hot reload */
    (function () {
      if (module.hot) {
        var api = require('vue-hot-reload-api');
        api.install(require('vue'));
        if (api.compatible) {
          module.hot.accept();
          if (!module.hot.data) {
            api.createRecord('$02fce0', $02fce0);
          } else {
            api.reload('$02fce0', $02fce0);
          }
        }

        
        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
      }
    })();
},{"_css_loader":"node_modules/parcel-bundler/src/builtins/css-loader.js","vue-hot-reload-api":"node_modules/vue-hot-reload-api/dist/index.js","vue":"node_modules/vue/dist/vue.runtime.esm.js"}],"node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var global = arguments[3];
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);

},{}],"node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = require("./runtime");

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

},{"./runtime":"node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime.js"}],"node_modules/@babel/runtime/regenerator/index.js":[function(require,module,exports) {
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":"node_modules/@babel/runtime/node_modules/regenerator-runtime/runtime-module.js"}],"node_modules/@babel/runtime/helpers/asyncToGenerator.js":[function(require,module,exports) {
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
},{}],"node_modules/magic-portal/dist/index.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var e = function (e) {
  var t = this;
  this.rpc_counter = 0, this.channel = e, this.foreign = new Map(), this.local = new Map(), this.calls = new Map(), this.queue = [], this.connectionEstablished = !1, this.channel.addEventListener("message", function (e) {
    var n = e.data;
    if (n && "object" == typeof n) switch (n.type) {
      case "MP_INIT":
        return t.onInit(n);

      case "MP_SET":
        return t.onSet(n);

      case "MP_CALL":
        return t.onCall(n);

      case "MP_RETURN":
        return t.onReturn(n);
    }
  }), this.channel.postMessage({
    type: "MP_INIT",
    id: 1,
    reply: !0
  });
};

e.prototype.onInit = function (e) {
  this.connectionEstablished = !0;
  var t = this.queue;
  this.queue = [];

  for (var n = 0, o = t; n < o.length; n += 1) {
    this.channel.postMessage(o[n]);
  }

  e.reply && this.channel.postMessage({
    type: "MP_INIT",
    reply: !1
  });
}, e.prototype.onSet = function (e) {
  for (var t = this, n = {}, o = e.object, s = function () {
    var s = i[r],
        c = !e.void.includes(s);

    n[s] = function () {
      for (var e = [], n = arguments.length; n--;) e[n] = arguments[n];

      return t.rpc_counter = (t.rpc_counter + 1) % Number.MAX_SAFE_INTEGER, new Promise(function (n, r) {
        t.postMessage({
          type: "MP_CALL",
          object: o,
          method: s,
          id: t.rpc_counter,
          args: e,
          reply: c
        }), c ? t.calls.set(t.rpc_counter, {
          resolve: n,
          reject: r
        }) : n();
      });
    };
  }, r = 0, i = e.methods; r < i.length; r += 1) s();

  var c = this.foreign.get(e.object);
  this.foreign.set(e.object, n), "function" == typeof c && c(n);
}, e.prototype.onCall = function (e) {
  var t = this,
      n = this.local.get(e.object);
  n && n[e.method].apply(n, e.args).then(function (n) {
    return e.reply && t.channel.postMessage({
      type: "MP_RETURN",
      id: e.id,
      result: n
    });
  }).catch(function (n) {
    return t.channel.postMessage({
      type: "MP_RETURN",
      id: e.id,
      error: n.message
    });
  });
}, e.prototype.onReturn = function (e) {
  if (this.calls.has(e.id)) {
    var t = this.calls.get(e.id),
        n = t.resolve,
        o = t.reject;
    this.calls.clear(e.id), e.error ? o(e.error) : n(e.result);
  }
}, e.prototype.postMessage = function (e) {
  this.connectionEstablished ? this.channel.postMessage(e) : this.queue.push(e);
}, e.prototype.set = function (e, t, n) {
  void 0 === n && (n = {}), this.local.set(e, t);
  var o = Object.entries(t).filter(function (e) {
    return "function" == typeof e[1];
  }).map(function (e) {
    return e[0];
  });
  this.postMessage({
    type: "MP_SET",
    object: e,
    methods: o,
    void: n.void || []
  });
}, e.prototype.get = function (e) {
  return new Promise(function (t, n) {
    var o = this;
    return this.foreign.has(e) ? t(this.foreign.get(e)) : t(new Promise(function (t, n) {
      return o.foreign.set(e, t);
    }));
  }.bind(this));
};

function _default(t) {
  var n = new e(t);
  Object.defineProperties(this, {
    get: {
      writable: !1,
      configurable: !1,
      value: n.get.bind(n)
    },
    set: {
      writable: !1,
      configurable: !1,
      value: n.set.bind(n)
    }
  });
}
},{}],"src/js/storage-driver/backend/isomorphic-git/emitter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.emitter = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 'emitter' plugin
var emitter = {
  emit: function () {
    var _emit = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(event, message) {
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (event === 'message') {
                document.getElementById('log').textContent += message + '\n';
              }

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function emit(_x, _x2) {
      return _emit.apply(this, arguments);
    }

    return emit;
  }()
};
exports.emitter = emitter;
},{"@babel/runtime/regenerator":"node_modules/@babel/runtime/regenerator/index.js","@babel/runtime/helpers/asyncToGenerator":"node_modules/@babel/runtime/helpers/asyncToGenerator.js"}],"src/js/storage-driver/backend/isomorphic-git/credentialManager.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.credentialManager = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var get = function get() {
  return JSON.parse(window.localStorage.getItem('credential'));
};

var set = function set(cred) {
  return window.localStorage.setItem('credential', JSON.stringify(cred));
}; // 'credentialManager' plugin
// cf. https://github.com/isomorphic-git/credential-manager-node-cli/blob/master/index.js


var credentialManager = {
  fill: function () {
    var _fill = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee(_ref) {
      var url, cred, username, password;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              url = _ref.url;
              cred = get();

              if (!(cred && url in cred && cred[url].length === 1)) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", cred[url][0]);

            case 4:
              if (!(cred && url in cred && cred[url].length > 0)) {
                _context.next = 7;
                break;
              }

              console.log('returning first credential');
              return _context.abrupt("return", cred[url][0]);

            case 7:
              username = window.prompt('Username:');
              password = window.prompt('Password:');
              return _context.abrupt("return", {
                username: username,
                password: password
              });

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function fill(_x) {
      return _fill.apply(this, arguments);
    }

    return fill;
  }(),
  approved: function () {
    var _approved = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee2(_ref2) {
      var url, auth, cred, _cred;

      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              url = _ref2.url, auth = _ref2.auth;
              console.log('approved', [url, auth]);
              cred = get();

              if (cred) {
                _context2.next = 9;
                break;
              }

              console.log('save approved credential about (first url)', [url, auth]);
              cred = {};
              cred[url] = [auth];
              set(cred);
              return _context2.abrupt("return");

            case 9:
              if (!(cred && !url in cred)) {
                _context2.next = 14;
                break;
              }

              console.log('save approved credential about (new url)', [url, auth]);
              cred[url] = [auth];
              set(cred);
              return _context2.abrupt("return");

            case 14:
              _cred = cred[url].find(function (x) {
                return JSON.stringify(x) === JSON.stringify(auth);
              });

              if (!_cred) {
                _context2.next = 18;
                break;
              }

              console.log('already stored credential');
              return _context2.abrupt("return");

            case 18:
              console.log('save approved credential about (append)', [url, auth]);
              cred[url].push(auth);
              set(cred);

            case 21:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function approved(_x2) {
      return _approved.apply(this, arguments);
    }

    return approved;
  }(),
  rejected: function () {
    var _rejected = (0, _asyncToGenerator2.default)(
    /*#__PURE__*/
    _regenerator.default.mark(function _callee3(_ref3) {
      var url, auth, cred, _cred;

      return _regenerator.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              url = _ref3.url, auth = _ref3.auth;
              window.alert('Authentication rejected');
              cred = get();

              if (!(!cred || !url in cred)) {
                _context3.next = 6;
                break;
              }

              console.log('no stored credentials');
              return _context3.abrupt("return");

            case 6:
              _cred = cred[url].filter(function (x) {
                return JSON.stringify(x) !== JSON.stringify(auth);
              });

              if (!(cred[url].length === _cred.length)) {
                _context3.next = 10;
                break;
              }

              console.log('no stored failed credentials');
              return _context3.abrupt("return");

            case 10:
              if (_cred.length === 0) {
                console.log('failed last credentials about', url);
                delete cred[url];
                set(cred);
              } else {
                console.log('failed credentials about', [url, auth]);
                cred[url] = _cred;
                set(cred);
              }

            case 11:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function rejected(_x3) {
      return _rejected.apply(this, arguments);
    }

    return rejected;
  }()
};
exports.credentialManager = credentialManager;
},{"@babel/runtime/regenerator":"node_modules/@babel/runtime/regenerator/index.js","@babel/runtime/helpers/asyncToGenerator":"node_modules/@babel/runtime/helpers/asyncToGenerator.js"}],"src/js/storage-driver/backend/isomorphic-git/sample.js":[function(require,module,exports) {
"use strict";

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _magicPortal = _interopRequireDefault(require("magic-portal"));

var _emitter = require("./emitter.js");

var _credentialManager = require("./credentialManager.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var worker = new Worker("/worker.b381ca9e.js");
var portal = new _magicPortal.default(worker);
worker.addEventListener('message', function (_ref) {
  var data = _ref.data;
  return console.log(data);
});
portal.set('emitter', _emitter.emitter, {
  void: ['emit']
});
portal.set('credentialManager', _credentialManager.credentialManager, {
  void: ['approved', 'rejected']
});
(0, _asyncToGenerator2.default)(
/*#__PURE__*/
_regenerator.default.mark(function _callee2() {
  var pfs, fs, git;
  return _regenerator.default.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return portal.get('pfs');

        case 2:
          pfs = _context2.sent;
          window.pfs = pfs;
          _context2.next = 6;
          return portal.get('fs');

        case 6:
          fs = _context2.sent;
          window.fs = fs;
          _context2.next = 10;
          return portal.get('git');

        case 10:
          git = _context2.sent;
          document.getElementById('log').textContent += 'ready\n';
          document.getElementById('repository').value = 'https://github.com/isomorphic-git/isomorphic-git';
          document.getElementById('cloneButton').addEventListener('click',
          /*#__PURE__*/
          (0, _asyncToGenerator2.default)(
          /*#__PURE__*/
          _regenerator.default.mark(function _callee() {
            var branches;
            return _regenerator.default.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    document.getElementById('log').textContent = '';
                    _context.next = 3;
                    return git.clone({
                      dir: '.',
                      corsProxy: 'https://git-cors-proxy.glitch.me',
                      // corsProxy: 'https://cors.isomorphic-git.org',
                      // corsProxy: 'http://localhost:9899',
                      url: document.getElementById('repository').value,
                      singleBranch: true,
                      depth: 100
                    });

                  case 3:
                    _context.next = 5;
                    return git.listBranches({
                      dir: '.',
                      remote: 'origin'
                    });

                  case 5:
                    branches = _context.sent;
                    console.log('branches', branches);
                    document.getElementById('log').textContent += 'branches ' + branches + '\n';

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          })));
          window.git = git;
          window.worker = worker;
          console.log(git);

        case 17:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2, this);
}))();
},{"@babel/runtime/regenerator":"node_modules/@babel/runtime/regenerator/index.js","@babel/runtime/helpers/asyncToGenerator":"node_modules/@babel/runtime/helpers/asyncToGenerator.js","magic-portal":"node_modules/magic-portal/dist/index.es6.js","./worker.js":[["worker.b381ca9e.js","src/js/storage-driver/backend/isomorphic-git/worker.js"],"worker.b381ca9e.map","src/js/storage-driver/backend/isomorphic-git/worker.js"],"./emitter.js":"src/js/storage-driver/backend/isomorphic-git/emitter.js","./credentialManager.js":"src/js/storage-driver/backend/isomorphic-git/credentialManager.js"}],"node_modules/@babel/runtime/helpers/classCallCheck.js":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
},{}],"node_modules/@babel/runtime/helpers/typeof.js":[function(require,module,exports) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
},{}],"node_modules/@babel/runtime/helpers/assertThisInitialized.js":[function(require,module,exports) {
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;
},{}],"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":[function(require,module,exports) {
var _typeof = require("../helpers/typeof");

var assertThisInitialized = require("./assertThisInitialized");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;
},{"../helpers/typeof":"node_modules/@babel/runtime/helpers/typeof.js","./assertThisInitialized":"node_modules/@babel/runtime/helpers/assertThisInitialized.js"}],"node_modules/@babel/runtime/helpers/getPrototypeOf.js":[function(require,module,exports) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
},{}],"node_modules/@babel/runtime/helpers/setPrototypeOf.js":[function(require,module,exports) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
},{}],"node_modules/@babel/runtime/helpers/inherits.js":[function(require,module,exports) {
var setPrototypeOf = require("./setPrototypeOf");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;
},{"./setPrototypeOf":"node_modules/@babel/runtime/helpers/setPrototypeOf.js"}],"node_modules/@babel/runtime/helpers/createClass.js":[function(require,module,exports) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
},{}],"node_modules/global/window.js":[function(require,module,exports) {
var global = arguments[3];
var win;

if (typeof window !== "undefined") {
    win = window;
} else if (typeof global !== "undefined") {
    win = global;
} else if (typeof self !== "undefined"){
    win = self;
} else {
    win = {};
}

module.exports = win;

},{}],"node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"node_modules/get-random-values/index.js":[function(require,module,exports) {
var window = require('global/window');
var nodeCrypto = require('crypto');

function getRandomValues(buf) {
  if (window.crypto && window.crypto.getRandomValues) {
    return window.crypto.getRandomValues(buf);
  }
  if (typeof window.msCrypto === 'object' && typeof window.msCrypto.getRandomValues === 'function') {
    return window.msCrypto.getRandomValues(buf);
  }
  if (nodeCrypto.randomBytes) {
    if (!(buf instanceof Uint8Array)) {
      throw new TypeError('expected Uint8Array');
    }
    if (buf.length > 65536) {
      var e = new Error();
      e.code = 22;
      e.message = 'Failed to execute \'getRandomValues\' on \'Crypto\': The ' +
        'ArrayBufferView\'s byte length (' + buf.length + ') exceeds the ' +
        'number of bytes of entropy available via this API (65536).';
      e.name = 'QuotaExceededError';
      throw e;
    }
    var bytes = nodeCrypto.randomBytes(buf.length);
    buf.set(bytes);
    return buf;
  }
  else {
    throw new Error('No secure random number generator available.');
  }
}

module.exports = getRandomValues;

},{"global/window":"node_modules/global/window.js","crypto":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"src/js/storage-driver/uuid/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getRandomValues = _interopRequireDefault(require("get-random-values"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://stackoverflow.com/a/2117523/514411
var uuidv4 = function uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ (0, _getRandomValues.default)(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
};

var _default = uuidv4;
exports.default = _default;
},{"get-random-values":"node_modules/get-random-values/index.js"}],"src/js/data-relations/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  child: 'parent',
  parent: 'child'
};
exports.default = _default;
},{}],"src/js/storage-driver/backend/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Backend =
/*#__PURE__*/
function () {
  function Backend() {
    (0, _classCallCheck2.default)(this, Backend);
  }

  (0, _createClass2.default)(Backend, [{
    key: "notImplemented",
    value: function notImplemented() {
      throw new Error('not implemented');
    }
  }, {
    key: "addNode",
    value: function addNode(content) {
      this.notImplemented();
    }
  }, {
    key: "getNode",
    value: function getNode(id) {
      this.notImplemented();
    }
  }, {
    key: "updateNode",
    value: function updateNode(id, content) {
      this.notImplemented();
    }
  }, {
    key: "removeNode",
    value: function removeNode(id) {
      this.notImplemented();
    }
  }, {
    key: "addRelation",
    value: function addRelation(src, dest, type) {
      this.notImplemented();
    }
  }, {
    key: "getRelations",
    value: function getRelations(src, type) {
      this.notImplemented();
    }
  }, {
    key: "removeRelation",
    value: function removeRelation(src, dest, type) {
      this.notImplemented();
    }
  }]);
  return Backend;
}();

exports.default = Backend;
;
},{"@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/createClass":"node_modules/@babel/runtime/helpers/createClass.js"}],"node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":[function(require,module,exports) {
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

module.exports = _arrayWithoutHoles;
},{}],"node_modules/@babel/runtime/helpers/iterableToArray.js":[function(require,module,exports) {
function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

module.exports = _iterableToArray;
},{}],"node_modules/@babel/runtime/helpers/nonIterableSpread.js":[function(require,module,exports) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

module.exports = _nonIterableSpread;
},{}],"node_modules/@babel/runtime/helpers/toConsumableArray.js":[function(require,module,exports) {
var arrayWithoutHoles = require("./arrayWithoutHoles");

var iterableToArray = require("./iterableToArray");

var nonIterableSpread = require("./nonIterableSpread");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
},{"./arrayWithoutHoles":"node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","./iterableToArray":"node_modules/@babel/runtime/helpers/iterableToArray.js","./nonIterableSpread":"node_modules/@babel/runtime/helpers/nonIterableSpread.js"}],"src/js/lib/immutable-array/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// https://vincent.billey.me/pure-javascript-immutable-array/
function push(arr, newEntry) {
  return [].concat((0, _toConsumableArray2.default)(arr), [newEntry]);
}

function pop(arr) {
  return arr.slice(0, -1);
}

function shift(arr) {
  return arr.slice(1);
}

function unshift(arr, newEntry) {
  return [newEntry].concat((0, _toConsumableArray2.default)(arr));
}

function sort(arr, compareFunction) {
  return (0, _toConsumableArray2.default)(arr).sort(compareFunction);
}

function reverse(arr) {
  return (0, _toConsumableArray2.default)(arr).reverse();
}

function splice(arr, start, deleteCount) {
  for (var _len = arguments.length, items = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    items[_key - 3] = arguments[_key];
  }

  return [].concat((0, _toConsumableArray2.default)(arr.slice(0, start)), items, (0, _toConsumableArray2.default)(arr.slice(start + deleteCount)));
}

function immutableDelete(arr, index) {
  return arr.slice(0, index).concat(arr.slice(index + 1));
}

var _default = {
  push: push,
  pop: pop,
  shift: shift,
  unshift: unshift,
  sort: sort,
  reverse: reverse,
  splice: splice,
  immutableDelete: immutableDelete
};
exports.default = _default;
},{"@babel/runtime/helpers/toConsumableArray":"node_modules/@babel/runtime/helpers/toConsumableArray.js"}],"src/js/storage-driver/backend/fs/mkdir-p.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.resolveDoubleDots = exports.normalize = exports.isAbsolute = void 0;

var _immutableArray = _interopRequireDefault(require("../../../lib/immutable-array"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// based on https://stackoverflow.com/a/40686853/514411
var isAbsolute = function isAbsolute(path) {
  if (!path) {
    return false;
  }

  if (path.match(/^\//)) {
    return true;
  }

  return false;
}; // remove head ./ and / and ../ and trailing /


exports.isAbsolute = isAbsolute;

var normalize = function normalize(path) {
  return path.replace(/^(\.\/)+/, '').replace(/(\/\.\/)/g, '/').replace(/^\//, '').replace(/(^\.\.\/)+/, '').replace(/\/$/, '');
};

exports.normalize = normalize;

var resolveDoubleDots = function resolveDoubleDots(path) {
  var pathArray = path.split('/');
  var parent = pathArray.indexOf('..');

  if (parent === -1) {
    return path;
  }

  if (parent === 0) {
    return resolveDoubleDots(_immutableArray.default.splice(pathArray, parent, 1).join('/'));
  }

  return resolveDoubleDots(_immutableArray.default.splice(pathArray, parent - 1, 2).join('/'));
};

exports.resolveDoubleDots = resolveDoubleDots;

var _default = function _default(fs, path) {
  var sep = '/';
  var initDir = isAbsolute(path) ? '' : '.';
  var baseDir = (isAbsolute(path) ? '/' : './') + resolveDoubleDots(normalize(path));
  return resolveDoubleDots(normalize(path)).split(sep).reduce(function (parentDir, childDir) {
    var curDir = [parentDir, childDir].join(sep);

    if (fs.existsSync(curDir)) {
      // console.log('exists', curDir);
      return curDir;
    }

    try {
      // console.log('mkdir', curDir);
      fs.mkdirSync(curDir);
      return curDir;
    } catch (err) {
      if (err.code === 'EEXIST') {
        // curDir already exists!
        return curDir;
      } // To avoid `EISDIR` error on Mac and `EACCES`-->`ENOENT` and `EPERM` on Windows.


      if (err.code === 'ENOENT') {
        // Throw the original parentDir error on curDir `ENOENT` failure.
        throw new Error("EACCES: permission denied, mkdir '".concat(parentDir, "'"));
      }

      var caughtErr = ['EACCES', 'EPERM', 'EISDIR'].indexOf(err.code) > -1;

      if (!caughtErr || caughtErr && curDir === baseDir) {
        throw err; // Throw if it's just the last created dir.
      }
    }

    return curDir;
  }, initDir);
};

exports.default = _default;
},{"../../../lib/immutable-array":"src/js/lib/immutable-array/index.js"}],"src/js/storage-driver/backend/fs/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _uuid = _interopRequireDefault(require("../../uuid"));

var _dataRelations = _interopRequireDefault(require("../../../data-relations"));

var _ = _interopRequireDefault(require("../"));

var _mkdirP = _interopRequireWildcard(require("./mkdir-p"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var nodePath = function nodePath(wd, id) {
  return wd + '/' + id + '.node';
}; // TODO type will include utf-8 characters. need to be hash


var relationPath = function relationPath(wd, src, dest, type) {
  return wd + '/' + src + '/' + type + '.' + dest;
};

var relationDirPath = function relationDirPath(wd, id) {
  return wd + '/' + id;
};

var FSBackend =
/*#__PURE__*/
function (_Backend) {
  (0, _inherits2.default)(FSBackend, _Backend);
  (0, _createClass2.default)(FSBackend, [{
    key: "_nodePath",
    value: function _nodePath(id) {
      return nodePath(this.wd, id);
    }
  }, {
    key: "_relationPath",
    value: function _relationPath(src, dest, type) {
      return relationPath(this.wd, src, dest, type);
    }
  }, {
    key: "_setupWd",
    value: function _setupWd(config) {
      var wd = './';

      if (config && config.hasOwnProperty('wd')) {
        wd = config.wd;
      }

      return (0, _mkdirP.resolveDoubleDots)((0, _mkdirP.normalize)(wd));
    }
  }, {
    key: "_ensureWd",
    value: function _ensureWd() {
      console.log('wd', [this.wd]);

      if (!this.fs.existsSync(this.wd)) {
        console.log('creating directory', this.wd);
        (0, _mkdirP.default)(this.fs, this.wd);
      }
    }
  }]);

  function FSBackend(config) {
    var _this;

    (0, _classCallCheck2.default)(this, FSBackend);
    console.log('config', config);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(FSBackend).call(this, config));
    _this.wd = _this._setupWd(config);
    _this.fs = require('fs');
    return _this;
  }

  (0, _createClass2.default)(FSBackend, [{
    key: "addNode",
    value: function addNode(content) {
      this._ensureWd();

      var id = (0, _uuid.default)();
      console.log('uuid', id);
      this.fs.writeFileSync(this._nodePath(id), content);
      var contents = this.fs.readFileSync(this._nodePath(id));
      console.log(contents.toString());
      return id;
    }
  }, {
    key: "getNode",
    value: function getNode(id) {
      this._ensureWd();

      var contents = this.fs.readFileSync(this._nodePath(id));
      console.log(contents.toString());
      return contents.toString();
    }
  }, {
    key: "updateNode",
    value: function updateNode(id, content) {
      this._ensureWd();

      this.fs.writeFileSync(this._nodePath(id), content);
      var contents = this.fs.readFileSync(this._nodePath(id));
      console.log(contents.toString());
      return id;
    }
  }, {
    key: "removeNode",
    value: function removeNode(id) {
      this._ensureWd();

      this.fs.unlinkSync(this._nodePath(id));
      return true;
    }
  }, {
    key: "_addRelation",
    value: function _addRelation(src, dest, type) {
      if (!this.fs.existsSync(relationDirPath(this.wd, src))) {
        console.log('creating directory', relationDirPath(this.wd, src));
        (0, _mkdirP.default)(this.fs, relationDirPath(this.wd, src));
      }

      if (this.fs.existsSync(this._relationPath(src, dest, type))) {
        return true;
      }

      console.log('touch relation', this._relationPath(src, dest, type));
      this.fs.writeFileSync(this._relationPath(src, dest, type), '');
      console.log('add relation', [src, dest, type]);
      return true;
    }
  }, {
    key: "_setWeight",
    value: function _setWeight(src, dest, type, weight) {
      this._addRelation(src, dest, type);

      if (this.fs.existsSync(this._relationPath(src, dest, type))) {
        var contents = this.fs.readFileSync(this._relationPath(src, dest, type));
        console.log('old weight', contents.toString());
      }

      if (!weight) {
        return true;
      }

      this.fs.writeFileSync(this._relationPath(src, dest, type), weight);
      console.log('set weight', [src, dest, type, weight]);
      return true;
    }
  }, {
    key: "addRelation",
    value: function addRelation(src, dest, type, weight) {
      this._ensureWd();

      if (!this._setWeight(src, dest, type, weight)) {
        return false;
      }

      return this._setWeight(dest, src, _dataRelations.default[type], weight);
    }
  }, {
    key: "getRelations",
    value: function getRelations(src, type) {
      var _this2 = this;

      this._ensureWd();

      if (!this.fs.existsSync(relationDirPath(this.wd, src))) {
        console.log('creating directory', relationDirPath(this.wd, src));
        (0, _mkdirP.default)(this.fs, relationDirPath(this.wd, src));
        return {
          id: src,
          type: type,
          relations: []
        };
      }

      var files = this.fs.readdirSync(relationDirPath(this.wd, src));
      var typePrefix = new RegExp('^' + type + '\.');
      var relations = files.filter(function (e) {
        return e.match(typePrefix);
      }).map(function (e) {
        var dest = e.replace(typePrefix, '');
        var weight = '';

        if (_this2.fs.existsSync(_this2._relationPath(src, dest, type))) {
          weight = _this2.fs.readFileSync(_this2._relationPath(src, dest, type)).toString();
          console.log('fethed weight', [src, dest, weight]);
        }

        return {
          id: dest,
          weight: weight
        };
      });
      return {
        id: src,
        type: type,
        relations: relations
      };
    }
  }, {
    key: "_removeRelation",
    value: function _removeRelation(src, dest, type) {
      if (!this.fs.existsSync(relationDirPath(this.wd, src))) {
        console.warn('there are no relations', [src, dest, type]);
        return false;
      }

      if (!this.fs.existsSync(this._relationPath(src, dest, type))) {
        console.warn('there are no relation about this', [src, dest, type]);
        return false;
      }

      this.fs.unlinkSync(this._relationPath(src, dest, type));
      var files = this.fs.readdirSync(relationDirPath(this.wd, src));

      if (files.length === 0) {
        this.fs.rmdirSync(relationDirPath(this.wd, src));
      }

      return dest;
    }
  }, {
    key: "removeRelation",
    value: function removeRelation(src, dest, type) {
      this._ensureWd();

      if (!this._removeRelation(src, dest, type)) {
        return false;
      }

      return this._removeRelation(dest, src, _dataRelations.default[type]);
    }
  }]);
  return FSBackend;
}(_.default);

exports.default = FSBackend;
;
FSBackend.info = {
  type: 'fs',
  configure: {
    params: [{
      key: 'wd',
      name: 'Working Directory',
      description: 'Working Directory used in BrowserFS',
      type: 'text',
      default: '/',
      required: false
    }]
  }
};
},{"@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/possibleConstructorReturn":"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","@babel/runtime/helpers/getPrototypeOf":"node_modules/@babel/runtime/helpers/getPrototypeOf.js","@babel/runtime/helpers/createClass":"node_modules/@babel/runtime/helpers/createClass.js","@babel/runtime/helpers/inherits":"node_modules/@babel/runtime/helpers/inherits.js","../../uuid":"src/js/storage-driver/uuid/index.js","../../../data-relations":"src/js/data-relations/index.js","../":"src/js/storage-driver/backend/index.js","./mkdir-p":"src/js/storage-driver/backend/fs/mkdir-p.js","fs":"node_modules/parcel-bundler/src/builtins/_empty.js"}],"node_modules/buffer/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/buffer/node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"node_modules/browserfs/dist/browserfs.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var process = require("process");
var __dirname = "/Users/peccu/Codes/data-graph/node_modules/browserfs/dist";
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["BrowserFS"] = factory();else root["BrowserFS"] = factory();
})(this, function () {
  return (
    /******/
    function (modules) {
      // webpackBootstrap

      /******/
      // The module cache

      /******/
      var installedModules = {};
      /******/

      /******/
      // The require function

      /******/

      function __webpack_require__(moduleId) {
        /******/

        /******/
        // Check if module is in cache

        /******/
        if (installedModules[moduleId])
          /******/
          return installedModules[moduleId].exports;
        /******/

        /******/
        // Create a new module (and put it into the cache)

        /******/

        var module = installedModules[moduleId] = {
          /******/
          exports: {},

          /******/
          id: moduleId,

          /******/
          loaded: false
          /******/

        };
        /******/

        /******/
        // Execute the module function

        /******/

        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/

        /******/
        // Flag the module as loaded

        /******/

        module.loaded = true;
        /******/

        /******/
        // Return the exports of the module

        /******/

        return module.exports;
        /******/
      }
      /******/

      /******/

      /******/
      // expose the modules object (__webpack_modules__)

      /******/


      __webpack_require__.m = modules;
      /******/

      /******/
      // expose the module cache

      /******/

      __webpack_require__.c = installedModules;
      /******/

      /******/
      // __webpack_public_path__

      /******/

      __webpack_require__.p = "";
      /******/

      /******/
      // Load entry module and return exports

      /******/

      return __webpack_require__(0);
      /******/
    }(
    /************************************************************************/

    /******/
    [
    /* 0 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer, global, module, process) {
        'use strict';

        Object.defineProperty(exports, '__esModule', {
          value: true
        });

        var buffer = __webpack_require__(2);

        var path = __webpack_require__(9);
        /**
         * Standard libc error codes. Add more to this enum and ErrorStrings as they are
         * needed.
         * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
         */

        /**
         * Standard libc error codes. Add more to this enum and ErrorStrings as they are
         * needed.
         * @url http://www.gnu.org/software/libc/manual/html_node/Error-Codes.html
         */


        var ErrorCode;

        (function (ErrorCode) {
          ErrorCode[ErrorCode["EPERM"] = 1] = "EPERM";
          ErrorCode[ErrorCode["ENOENT"] = 2] = "ENOENT";
          ErrorCode[ErrorCode["EIO"] = 5] = "EIO";
          ErrorCode[ErrorCode["EBADF"] = 9] = "EBADF";
          ErrorCode[ErrorCode["EACCES"] = 13] = "EACCES";
          ErrorCode[ErrorCode["EBUSY"] = 16] = "EBUSY";
          ErrorCode[ErrorCode["EEXIST"] = 17] = "EEXIST";
          ErrorCode[ErrorCode["ENOTDIR"] = 20] = "ENOTDIR";
          ErrorCode[ErrorCode["EISDIR"] = 21] = "EISDIR";
          ErrorCode[ErrorCode["EINVAL"] = 22] = "EINVAL";
          ErrorCode[ErrorCode["EFBIG"] = 27] = "EFBIG";
          ErrorCode[ErrorCode["ENOSPC"] = 28] = "ENOSPC";
          ErrorCode[ErrorCode["EROFS"] = 30] = "EROFS";
          ErrorCode[ErrorCode["ENOTEMPTY"] = 39] = "ENOTEMPTY";
          ErrorCode[ErrorCode["ENOTSUP"] = 95] = "ENOTSUP";
        })(ErrorCode || (ErrorCode = {}));
        /* tslint:disable:variable-name */

        /**
         * Strings associated with each error code.
         * @hidden
         */


        var ErrorStrings = {};
        ErrorStrings[ErrorCode.EPERM] = 'Operation not permitted.';
        ErrorStrings[ErrorCode.ENOENT] = 'No such file or directory.';
        ErrorStrings[ErrorCode.EIO] = 'Input/output error.';
        ErrorStrings[ErrorCode.EBADF] = 'Bad file descriptor.';
        ErrorStrings[ErrorCode.EACCES] = 'Permission denied.';
        ErrorStrings[ErrorCode.EBUSY] = 'Resource busy or locked.';
        ErrorStrings[ErrorCode.EEXIST] = 'File exists.';
        ErrorStrings[ErrorCode.ENOTDIR] = 'File is not a directory.';
        ErrorStrings[ErrorCode.EISDIR] = 'File is a directory.';
        ErrorStrings[ErrorCode.EINVAL] = 'Invalid argument.';
        ErrorStrings[ErrorCode.EFBIG] = 'File is too big.';
        ErrorStrings[ErrorCode.ENOSPC] = 'No space left on disk.';
        ErrorStrings[ErrorCode.EROFS] = 'Cannot modify a read-only file system.';
        ErrorStrings[ErrorCode.ENOTEMPTY] = 'Directory is not empty.';
        ErrorStrings[ErrorCode.ENOTSUP] = 'Operation is not supported.';
        /* tslint:enable:variable-name */

        /**
         * Represents a BrowserFS error. Passed back to applications after a failed
         * call to the BrowserFS API.
         */

        var ApiError = function (Error) {
          function ApiError(type, message, path$$1) {
            if (message === void 0) message = ErrorStrings[type];
            Error.call(this, message); // Unsupported.

            this.syscall = "";
            this.errno = type;
            this.code = ErrorCode[type];
            this.path = path$$1;
            this.stack = new Error().stack;
            this.message = "Error: " + this.code + ": " + message + (this.path ? ", '" + this.path + "'" : '');
          }

          if (Error) ApiError.__proto__ = Error;
          ApiError.prototype = Object.create(Error && Error.prototype);
          ApiError.prototype.constructor = ApiError;

          ApiError.fromJSON = function fromJSON(json) {
            var err = new ApiError(0);
            err.errno = json.errno;
            err.code = json.code;
            err.path = json.path;
            err.stack = json.stack;
            err.message = json.message;
            return err;
          };
          /**
           * Creates an ApiError object from a buffer.
           */


          ApiError.fromBuffer = function fromBuffer(buffer$$1, i) {
            if (i === void 0) i = 0;
            return ApiError.fromJSON(JSON.parse(buffer$$1.toString('utf8', i + 4, i + 4 + buffer$$1.readUInt32LE(i))));
          };

          ApiError.FileError = function FileError(code, p) {
            return new ApiError(code, ErrorStrings[code], p);
          };

          ApiError.ENOENT = function ENOENT(path$$1) {
            return this.FileError(ErrorCode.ENOENT, path$$1);
          };

          ApiError.EEXIST = function EEXIST(path$$1) {
            return this.FileError(ErrorCode.EEXIST, path$$1);
          };

          ApiError.EISDIR = function EISDIR(path$$1) {
            return this.FileError(ErrorCode.EISDIR, path$$1);
          };

          ApiError.ENOTDIR = function ENOTDIR(path$$1) {
            return this.FileError(ErrorCode.ENOTDIR, path$$1);
          };

          ApiError.EPERM = function EPERM(path$$1) {
            return this.FileError(ErrorCode.EPERM, path$$1);
          };

          ApiError.ENOTEMPTY = function ENOTEMPTY(path$$1) {
            return this.FileError(ErrorCode.ENOTEMPTY, path$$1);
          };
          /**
           * @return A friendly error message.
           */


          ApiError.prototype.toString = function toString() {
            return this.message;
          };

          ApiError.prototype.toJSON = function toJSON() {
            return {
              errno: this.errno,
              code: this.code,
              path: this.path,
              stack: this.stack,
              message: this.message
            };
          };
          /**
           * Writes the API error into a buffer.
           */


          ApiError.prototype.writeToBuffer = function writeToBuffer(buffer$$1, i) {
            if (buffer$$1 === void 0) buffer$$1 = Buffer.alloc(this.bufferSize());
            if (i === void 0) i = 0;
            var bytesWritten = buffer$$1.write(JSON.stringify(this.toJSON()), i + 4);
            buffer$$1.writeUInt32LE(bytesWritten, i);
            return buffer$$1;
          };
          /**
           * The size of the API error in buffer-form in bytes.
           */


          ApiError.prototype.bufferSize = function bufferSize() {
            // 4 bytes for string length.
            return 4 + Buffer.byteLength(JSON.stringify(this.toJSON()));
          };

          return ApiError;
        }(Error);

        var api_error = Object.freeze({
          get ErrorCode() {
            return ErrorCode;
          },

          ErrorStrings: ErrorStrings,
          ApiError: ApiError
        });
        var ActionType;

        (function (ActionType) {
          // Indicates that the code should not do anything.
          ActionType[ActionType["NOP"] = 0] = "NOP"; // Indicates that the code should throw an exception.

          ActionType[ActionType["THROW_EXCEPTION"] = 1] = "THROW_EXCEPTION"; // Indicates that the code should truncate the file, but only if it is a file.

          ActionType[ActionType["TRUNCATE_FILE"] = 2] = "TRUNCATE_FILE"; // Indicates that the code should create the file.

          ActionType[ActionType["CREATE_FILE"] = 3] = "CREATE_FILE";
        })(ActionType || (ActionType = {}));
        /**
         * Represents one of the following file flags. A convenience object.
         *
         * * `'r'` - Open file for reading. An exception occurs if the file does not exist.
         * * `'r+'` - Open file for reading and writing. An exception occurs if the file does not exist.
         * * `'rs'` - Open file for reading in synchronous mode. Instructs the filesystem to not cache writes.
         * * `'rs+'` - Open file for reading and writing, and opens the file in synchronous mode.
         * * `'w'` - Open file for writing. The file is created (if it does not exist) or truncated (if it exists).
         * * `'wx'` - Like 'w' but opens the file in exclusive mode.
         * * `'w+'` - Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).
         * * `'wx+'` - Like 'w+' but opens the file in exclusive mode.
         * * `'a'` - Open file for appending. The file is created if it does not exist.
         * * `'ax'` - Like 'a' but opens the file in exclusive mode.
         * * `'a+'` - Open file for reading and appending. The file is created if it does not exist.
         * * `'ax+'` - Like 'a+' but opens the file in exclusive mode.
         *
         * Exclusive mode ensures that the file path is newly created.
         */


        var FileFlag = function FileFlag(flagStr) {
          this.flagStr = flagStr;

          if (FileFlag.validFlagStrs.indexOf(flagStr) < 0) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid flag: " + flagStr);
          }
        };
        /**
         * Get an object representing the given file flag.
         * @param modeStr The string representing the flag
         * @return The FileFlag object representing the flag
         * @throw when the flag string is invalid
         */


        FileFlag.getFileFlag = function getFileFlag(flagStr) {
          // Check cache first.
          if (FileFlag.flagCache.hasOwnProperty(flagStr)) {
            return FileFlag.flagCache[flagStr];
          }

          return FileFlag.flagCache[flagStr] = new FileFlag(flagStr);
        };
        /**
         * Get the underlying flag string for this flag.
         */


        FileFlag.prototype.getFlagString = function getFlagString() {
          return this.flagStr;
        };
        /**
         * Returns true if the file is readable.
         */


        FileFlag.prototype.isReadable = function isReadable() {
          return this.flagStr.indexOf('r') !== -1 || this.flagStr.indexOf('+') !== -1;
        };
        /**
         * Returns true if the file is writeable.
         */


        FileFlag.prototype.isWriteable = function isWriteable() {
          return this.flagStr.indexOf('w') !== -1 || this.flagStr.indexOf('a') !== -1 || this.flagStr.indexOf('+') !== -1;
        };
        /**
         * Returns true if the file mode should truncate.
         */


        FileFlag.prototype.isTruncating = function isTruncating() {
          return this.flagStr.indexOf('w') !== -1;
        };
        /**
         * Returns true if the file is appendable.
         */


        FileFlag.prototype.isAppendable = function isAppendable() {
          return this.flagStr.indexOf('a') !== -1;
        };
        /**
         * Returns true if the file is open in synchronous mode.
         */


        FileFlag.prototype.isSynchronous = function isSynchronous() {
          return this.flagStr.indexOf('s') !== -1;
        };
        /**
         * Returns true if the file is open in exclusive mode.
         */


        FileFlag.prototype.isExclusive = function isExclusive() {
          return this.flagStr.indexOf('x') !== -1;
        };
        /**
         * Returns one of the static fields on this object that indicates the
         * appropriate response to the path existing.
         */


        FileFlag.prototype.pathExistsAction = function pathExistsAction() {
          if (this.isExclusive()) {
            return ActionType.THROW_EXCEPTION;
          } else if (this.isTruncating()) {
            return ActionType.TRUNCATE_FILE;
          } else {
            return ActionType.NOP;
          }
        };
        /**
         * Returns one of the static fields on this object that indicates the
         * appropriate response to the path not existing.
         */


        FileFlag.prototype.pathNotExistsAction = function pathNotExistsAction() {
          if ((this.isWriteable() || this.isAppendable()) && this.flagStr !== 'r+') {
            return ActionType.CREATE_FILE;
          } else {
            return ActionType.THROW_EXCEPTION;
          }
        }; // Contains cached FileMode instances.


        FileFlag.flagCache = {}; // Array of valid mode strings.

        FileFlag.validFlagStrs = ['r', 'r+', 'rs', 'rs+', 'w', 'wx', 'w+', 'wx+', 'a', 'ax', 'a+', 'ax+'];
        /**
         * Indicates the type of the given file. Applied to 'mode'.
         */

        var FileType;

        (function (FileType) {
          FileType[FileType["FILE"] = 32768] = "FILE";
          FileType[FileType["DIRECTORY"] = 16384] = "DIRECTORY";
          FileType[FileType["SYMLINK"] = 40960] = "SYMLINK";
        })(FileType || (FileType = {}));
        /**
         * Emulation of Node's `fs.Stats` object.
         *
         * Attribute descriptions are from `man 2 stat'
         * @see http://nodejs.org/api/fs.html#fs_class_fs_stats
         * @see http://man7.org/linux/man-pages/man2/stat.2.html
         */


        var Stats = function Stats(itemType, size, mode, atime, mtime, ctime) {
          if (atime === void 0) atime = new Date();
          if (mtime === void 0) mtime = new Date();
          if (ctime === void 0) ctime = new Date();
          this.size = size;
          this.atime = atime;
          this.mtime = mtime;
          this.ctime = ctime;
          /**
           * UNSUPPORTED ATTRIBUTES
           * I assume no one is going to need these details, although we could fake
           * appropriate values if need be.
           */
          // ID of device containing file

          this.dev = 0; // inode number

          this.ino = 0; // device ID (if special file)

          this.rdev = 0; // number of hard links

          this.nlink = 1; // blocksize for file system I/O

          this.blksize = 4096; // @todo Maybe support these? atm, it's a one-user filesystem.
          // user ID of owner

          this.uid = 0; // group ID of owner

          this.gid = 0; // time file was created (currently unsupported)

          this.birthtime = new Date(0); // XXX: Some file systems stash data on stats objects.

          this.fileData = null;

          if (!mode) {
            switch (itemType) {
              case FileType.FILE:
                this.mode = 0x1a4;
                break;

              case FileType.DIRECTORY:
              default:
                this.mode = 0x1ff;
            }
          } else {
            this.mode = mode;
          } // number of 512B blocks allocated


          this.blocks = Math.ceil(size / 512); // Check if mode also includes top-most bits, which indicate the file's
          // type.

          if (this.mode < 0x1000) {
            this.mode |= itemType;
          }
        };

        Stats.fromBuffer = function fromBuffer(buffer$$1) {
          var size = buffer$$1.readUInt32LE(0),
              mode = buffer$$1.readUInt32LE(4),
              atime = buffer$$1.readDoubleLE(8),
              mtime = buffer$$1.readDoubleLE(16),
              ctime = buffer$$1.readDoubleLE(24);
          return new Stats(mode & 0xF000, size, mode & 0xFFF, new Date(atime), new Date(mtime), new Date(ctime));
        };

        Stats.prototype.toBuffer = function toBuffer() {
          var buffer$$1 = Buffer.alloc(32);
          buffer$$1.writeUInt32LE(this.size, 0);
          buffer$$1.writeUInt32LE(this.mode, 4);
          buffer$$1.writeDoubleLE(this.atime.getTime(), 8);
          buffer$$1.writeDoubleLE(this.mtime.getTime(), 16);
          buffer$$1.writeDoubleLE(this.ctime.getTime(), 24);
          return buffer$$1;
        };
        /**
         * **Nonstandard**: Clone the stats object.
         * @return [BrowserFS.node.fs.Stats]
         */


        Stats.prototype.clone = function clone() {
          return new Stats(this.mode & 0xF000, this.size, this.mode & 0xFFF, this.atime, this.mtime, this.ctime);
        };
        /**
         * @return [Boolean] True if this item is a file.
         */


        Stats.prototype.isFile = function isFile() {
          return (this.mode & 0xF000) === FileType.FILE;
        };
        /**
         * @return [Boolean] True if this item is a directory.
         */


        Stats.prototype.isDirectory = function isDirectory() {
          return (this.mode & 0xF000) === FileType.DIRECTORY;
        };
        /**
         * @return [Boolean] True if this item is a symbolic link (only valid through lstat)
         */


        Stats.prototype.isSymbolicLink = function isSymbolicLink() {
          return (this.mode & 0xF000) === FileType.SYMLINK;
        };
        /**
         * Change the mode of the file. We use this helper function to prevent messing
         * up the type of the file, which is encoded in mode.
         */


        Stats.prototype.chmod = function chmod(mode) {
          this.mode = this.mode & 0xF000 | mode;
        }; // We don't support the following types of files.


        Stats.prototype.isSocket = function isSocket() {
          return false;
        };

        Stats.prototype.isBlockDevice = function isBlockDevice() {
          return false;
        };

        Stats.prototype.isCharacterDevice = function isCharacterDevice() {
          return false;
        };

        Stats.prototype.isFIFO = function isFIFO() {
          return false;
        };
        /**
         * Wraps a callback function. Used for unit testing. Defaults to a NOP.
         * @hidden
         */


        var wrapCb = function (cb, numArgs) {
          return cb;
        };
        /**
         * @hidden
         */


        function assertRoot(fs) {
          if (fs) {
            return fs;
          }

          throw new ApiError(ErrorCode.EIO, "Initialize BrowserFS with a file system using BrowserFS.initialize(filesystem)");
        }
        /**
         * @hidden
         */


        function normalizeMode(mode, def) {
          switch (typeof mode) {
            case 'number':
              // (path, flag, mode, cb?)
              return mode;

            case 'string':
              // (path, flag, modeString, cb?)
              var trueMode = parseInt(mode, 8);

              if (!isNaN(trueMode)) {
                return trueMode;
              } // Invalid string.


              return def;

            default:
              return def;
          }
        }
        /**
         * @hidden
         */


        function normalizeTime(time) {
          if (time instanceof Date) {
            return time;
          } else if (typeof time === 'number') {
            return new Date(time * 1000);
          } else {
            throw new ApiError(ErrorCode.EINVAL, "Invalid time.");
          }
        }
        /**
         * @hidden
         */


        function normalizePath(p) {
          // Node doesn't allow null characters in paths.
          if (p.indexOf('\u0000') >= 0) {
            throw new ApiError(ErrorCode.EINVAL, 'Path must be a string without null bytes.');
          } else if (p === '') {
            throw new ApiError(ErrorCode.EINVAL, 'Path must not be empty.');
          }

          return path.resolve(p);
        }
        /**
         * @hidden
         */


        function normalizeOptions(options, defEnc, defFlag, defMode) {
          switch (typeof options) {
            case 'object':
              return {
                encoding: typeof options['encoding'] !== 'undefined' ? options['encoding'] : defEnc,
                flag: typeof options['flag'] !== 'undefined' ? options['flag'] : defFlag,
                mode: normalizeMode(options['mode'], defMode)
              };

            case 'string':
              return {
                encoding: options,
                flag: defFlag,
                mode: defMode
              };

            default:
              return {
                encoding: defEnc,
                flag: defFlag,
                mode: defMode
              };
          }
        }
        /**
         * The default callback is a NOP.
         * @hidden
         * @private
         */


        function nopCb() {} // NOP.

        /**
         * The node frontend to all filesystems.
         * This layer handles:
         *
         * * Sanity checking inputs.
         * * Normalizing paths.
         * * Resetting stack depth for asynchronous operations which may not go through
         *   the browser by wrapping all input callbacks using `setImmediate`.
         * * Performing the requested operation through the filesystem or the file
         *   descriptor, as appropriate.
         * * Handling optional arguments and setting default arguments.
         * @see http://nodejs.org/api/fs.html
         */


        var FS = function FS() {
          /* tslint:enable:variable-name */
          this.F_OK = 0;
          this.R_OK = 4;
          this.W_OK = 2;
          this.X_OK = 1;
          this.root = null;
          this.fdMap = {};
          this.nextFd = 100;
        };

        FS.prototype.initialize = function initialize(rootFS) {
          if (!rootFS.constructor.isAvailable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Tried to instantiate BrowserFS with an unavailable file system.');
          }

          return this.root = rootFS;
        };
        /**
         * converts Date or number to a fractional UNIX timestamp
         * Grabbed from NodeJS sources (lib/fs.js)
         */


        FS.prototype._toUnixTimestamp = function _toUnixTimestamp(time) {
          if (typeof time === 'number') {
            return time;
          } else if (time instanceof Date) {
            return time.getTime() / 1000;
          }

          throw new Error("Cannot parse time: " + time);
        };
        /**
         * **NONSTANDARD**: Grab the FileSystem instance that backs this API.
         * @return [BrowserFS.FileSystem | null] Returns null if the file system has
         *   not been initialized.
         */


        FS.prototype.getRootFS = function getRootFS() {
          if (this.root) {
            return this.root;
          } else {
            return null;
          }
        }; // FILE OR DIRECTORY METHODS

        /**
         * Asynchronous rename. No arguments other than a possible exception are given
         * to the completion callback.
         * @param oldPath
         * @param newPath
         * @param callback
         */


        FS.prototype.rename = function rename(oldPath, newPath, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            assertRoot(this.root).rename(normalizePath(oldPath), normalizePath(newPath), newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous rename.
         * @param oldPath
         * @param newPath
         */


        FS.prototype.renameSync = function renameSync(oldPath, newPath) {
          assertRoot(this.root).renameSync(normalizePath(oldPath), normalizePath(newPath));
        };
        /**
         * Test whether or not the given path exists by checking with the file system.
         * Then call the callback argument with either true or false.
         * @example Sample invocation
         *   fs.exists('/etc/passwd', function (exists) {
         * util.debug(exists ? "it's there" : "no passwd!");
         *   });
         * @param path
         * @param callback
         */


        FS.prototype.exists = function exists(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            return assertRoot(this.root).exists(normalizePath(path$$1), newCb);
          } catch (e) {
            // Doesn't return an error. If something bad happens, we assume it just
            // doesn't exist.
            return newCb(false);
          }
        };
        /**
         * Test whether or not the given path exists by checking with the file system.
         * @param path
         * @return [boolean]
         */


        FS.prototype.existsSync = function existsSync(path$$1) {
          try {
            return assertRoot(this.root).existsSync(normalizePath(path$$1));
          } catch (e) {
            // Doesn't return an error. If something bad happens, we assume it just
            // doesn't exist.
            return false;
          }
        };
        /**
         * Asynchronous `stat`.
         * @param path
         * @param callback
         */


        FS.prototype.stat = function stat(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            return assertRoot(this.root).stat(normalizePath(path$$1), false, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `stat`.
         * @param path
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.statSync = function statSync(path$$1) {
          return assertRoot(this.root).statSync(normalizePath(path$$1), false);
        };
        /**
         * Asynchronous `lstat`.
         * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
         * then the link itself is stat-ed, not the file that it refers to.
         * @param path
         * @param callback
         */


        FS.prototype.lstat = function lstat(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            return assertRoot(this.root).stat(normalizePath(path$$1), true, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `lstat`.
         * `lstat()` is identical to `stat()`, except that if path is a symbolic link,
         * then the link itself is stat-ed, not the file that it refers to.
         * @param path
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.lstatSync = function lstatSync(path$$1) {
          return assertRoot(this.root).statSync(normalizePath(path$$1), true);
        };

        FS.prototype.truncate = function truncate(path$$1, arg2, cb) {
          if (arg2 === void 0) arg2 = 0;
          if (cb === void 0) cb = nopCb;
          var len = 0;

          if (typeof arg2 === 'function') {
            cb = arg2;
          } else if (typeof arg2 === 'number') {
            len = arg2;
          }

          var newCb = wrapCb(cb, 1);

          try {
            if (len < 0) {
              throw new ApiError(ErrorCode.EINVAL);
            }

            return assertRoot(this.root).truncate(normalizePath(path$$1), len, newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `truncate`.
         * @param path
         * @param len
         */


        FS.prototype.truncateSync = function truncateSync(path$$1, len) {
          if (len === void 0) len = 0;

          if (len < 0) {
            throw new ApiError(ErrorCode.EINVAL);
          }

          return assertRoot(this.root).truncateSync(normalizePath(path$$1), len);
        };
        /**
         * Asynchronous `unlink`.
         * @param path
         * @param callback
         */


        FS.prototype.unlink = function unlink(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            return assertRoot(this.root).unlink(normalizePath(path$$1), newCb);
          } catch (e) {
            return newCb(e);
          }
        };
        /**
         * Synchronous `unlink`.
         * @param path
         */


        FS.prototype.unlinkSync = function unlinkSync(path$$1) {
          return assertRoot(this.root).unlinkSync(normalizePath(path$$1));
        };

        FS.prototype.open = function open(path$$1, flag, arg2, cb) {
          var this$1 = this;
          if (cb === void 0) cb = nopCb;
          var mode = normalizeMode(arg2, 0x1a4);
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 2);

          try {
            assertRoot(this.root).open(normalizePath(path$$1), FileFlag.getFileFlag(flag), mode, function (e, file) {
              if (file) {
                newCb(e, this$1.getFdForFile(file));
              } else {
                newCb(e);
              }
            });
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous file open.
         * @see http://www.manpagez.com/man/2/open/
         * @param path
         * @param flags
         * @param mode defaults to `0644`
         * @return [BrowserFS.File]
         */


        FS.prototype.openSync = function openSync(path$$1, flag, mode) {
          if (mode === void 0) mode = 0x1a4;
          return this.getFdForFile(assertRoot(this.root).openSync(normalizePath(path$$1), FileFlag.getFileFlag(flag), normalizeMode(mode, 0x1a4)));
        };

        FS.prototype.readFile = function readFile(filename, arg2, cb) {
          if (arg2 === void 0) arg2 = {};
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg2, null, 'r', null);
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 2);

          try {
            var flag = FileFlag.getFileFlag(options['flag']);

            if (!flag.isReadable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.'));
            }

            return assertRoot(this.root).readFile(normalizePath(filename), options.encoding, flag, newCb);
          } catch (e) {
            return newCb(e);
          }
        };

        FS.prototype.readFileSync = function readFileSync(filename, arg2) {
          if (arg2 === void 0) arg2 = {};
          var options = normalizeOptions(arg2, null, 'r', null);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isReadable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to readFile must allow for reading.');
          }

          return assertRoot(this.root).readFileSync(normalizePath(filename), options.encoding, flag);
        };

        FS.prototype.writeFile = function writeFile(filename, data, arg3, cb) {
          if (arg3 === void 0) arg3 = {};
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var flag = FileFlag.getFileFlag(options.flag);

            if (!flag.isWriteable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.'));
            }

            return assertRoot(this.root).writeFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
          } catch (e) {
            return newCb(e);
          }
        };

        FS.prototype.writeFileSync = function writeFileSync(filename, data, arg3) {
          var options = normalizeOptions(arg3, 'utf8', 'w', 0x1a4);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isWriteable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to writeFile must allow for writing.');
          }

          return assertRoot(this.root).writeFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
        };

        FS.prototype.appendFile = function appendFile(filename, data, arg3, cb) {
          if (cb === void 0) cb = nopCb;
          var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var flag = FileFlag.getFileFlag(options.flag);

            if (!flag.isAppendable()) {
              return newCb(new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.'));
            }

            assertRoot(this.root).appendFile(normalizePath(filename), data, options.encoding, flag, options.mode, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.appendFileSync = function appendFileSync(filename, data, arg3) {
          var options = normalizeOptions(arg3, 'utf8', 'a', 0x1a4);
          var flag = FileFlag.getFileFlag(options.flag);

          if (!flag.isAppendable()) {
            throw new ApiError(ErrorCode.EINVAL, 'Flag passed to appendFile must allow for appending.');
          }

          return assertRoot(this.root).appendFileSync(normalizePath(filename), data, options.encoding, flag, options.mode);
        }; // FILE DESCRIPTOR METHODS

        /**
         * Asynchronous `fstat`.
         * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
         * specified by the file descriptor `fd`.
         * @param fd
         * @param callback
         */


        FS.prototype.fstat = function fstat(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            var file = this.fd2file(fd);
            file.stat(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fstat`.
         * `fstat()` is identical to `stat()`, except that the file to be stat-ed is
         * specified by the file descriptor `fd`.
         * @param fd
         * @return [BrowserFS.node.fs.Stats]
         */


        FS.prototype.fstatSync = function fstatSync(fd) {
          return this.fd2file(fd).statSync();
        };
        /**
         * Asynchronous close.
         * @param fd
         * @param callback
         */


        FS.prototype.close = function close(fd, cb) {
          var this$1 = this;
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).close(function (e) {
              if (!e) {
                this$1.closeFd(fd);
              }

              newCb(e);
            });
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous close.
         * @param fd
         */


        FS.prototype.closeSync = function closeSync(fd) {
          this.fd2file(fd).closeSync();
          this.closeFd(fd);
        };

        FS.prototype.ftruncate = function ftruncate(fd, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          var length = typeof arg2 === 'number' ? arg2 : 0;
          cb = typeof arg2 === 'function' ? arg2 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            var file = this.fd2file(fd);

            if (length < 0) {
              throw new ApiError(ErrorCode.EINVAL);
            }

            file.truncate(length, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous ftruncate.
         * @param fd
         * @param len
         */


        FS.prototype.ftruncateSync = function ftruncateSync(fd, len) {
          if (len === void 0) len = 0;
          var file = this.fd2file(fd);

          if (len < 0) {
            throw new ApiError(ErrorCode.EINVAL);
          }

          file.truncateSync(len);
        };
        /**
         * Asynchronous fsync.
         * @param fd
         * @param callback
         */


        FS.prototype.fsync = function fsync(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).sync(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous fsync.
         * @param fd
         */


        FS.prototype.fsyncSync = function fsyncSync(fd) {
          this.fd2file(fd).syncSync();
        };
        /**
         * Asynchronous fdatasync.
         * @param fd
         * @param callback
         */


        FS.prototype.fdatasync = function fdatasync(fd, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            this.fd2file(fd).datasync(newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous fdatasync.
         * @param fd
         */


        FS.prototype.fdatasyncSync = function fdatasyncSync(fd) {
          this.fd2file(fd).datasyncSync();
        };

        FS.prototype.write = function write(fd, arg2, arg3, arg4, arg5, cb) {
          if (cb === void 0) cb = nopCb;
          var buffer$$1,
              offset,
              length,
              position = null;

          if (typeof arg2 === 'string') {
            // Signature 1: (fd, string, [position?, [encoding?]], cb?)
            var encoding = 'utf8';

            switch (typeof arg3) {
              case 'function':
                // (fd, string, cb)
                cb = arg3;
                break;

              case 'number':
                // (fd, string, position, encoding?, cb?)
                position = arg3;
                encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
                cb = typeof arg5 === 'function' ? arg5 : cb;
                break;

              default:
                // ...try to find the callback and get out of here!
                cb = typeof arg4 === 'function' ? arg4 : typeof arg5 === 'function' ? arg5 : cb;
                return cb(new ApiError(ErrorCode.EINVAL, 'Invalid arguments.'));
            }

            buffer$$1 = Buffer.from(arg2, encoding);
            offset = 0;
            length = buffer$$1.length;
          } else {
            // Signature 2: (fd, buffer, offset, length, position?, cb?)
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = typeof arg5 === 'number' ? arg5 : null;
            cb = typeof arg5 === 'function' ? arg5 : cb;
          }

          var newCb = wrapCb(cb, 3);

          try {
            var file = this.fd2file(fd);

            if (position === undefined || position === null) {
              position = file.getPos();
            }

            file.write(buffer$$1, offset, length, position, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.writeSync = function writeSync(fd, arg2, arg3, arg4, arg5) {
          var buffer$$1,
              offset = 0,
              length,
              position;

          if (typeof arg2 === 'string') {
            // Signature 1: (fd, string, [position?, [encoding?]])
            position = typeof arg3 === 'number' ? arg3 : null;
            var encoding = typeof arg4 === 'string' ? arg4 : 'utf8';
            offset = 0;
            buffer$$1 = Buffer.from(arg2, encoding);
            length = buffer$$1.length;
          } else {
            // Signature 2: (fd, buffer, offset, length, position?)
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = typeof arg5 === 'number' ? arg5 : null;
          }

          var file = this.fd2file(fd);

          if (position === undefined || position === null) {
            position = file.getPos();
          }

          return file.writeSync(buffer$$1, offset, length, position);
        };

        FS.prototype.read = function read(fd, arg2, arg3, arg4, arg5, cb) {
          if (cb === void 0) cb = nopCb;
          var position, offset, length, buffer$$1, newCb;

          if (typeof arg2 === 'number') {
            // legacy interface
            // (fd, length, position, encoding, callback)
            length = arg2;
            position = arg3;
            var encoding = arg4;
            cb = typeof arg5 === 'function' ? arg5 : cb;
            offset = 0;
            buffer$$1 = Buffer.alloc(length); // XXX: Inefficient.
            // Wrap the cb so we shelter upper layers of the API from these
            // shenanigans.

            newCb = wrapCb(function (err, bytesRead, buf) {
              if (err) {
                return cb(err);
              }

              cb(err, buf.toString(encoding), bytesRead);
            }, 3);
          } else {
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = arg5;
            newCb = wrapCb(cb, 3);
          }

          try {
            var file = this.fd2file(fd);

            if (position === undefined || position === null) {
              position = file.getPos();
            }

            file.read(buffer$$1, offset, length, position, newCb);
          } catch (e) {
            newCb(e);
          }
        };

        FS.prototype.readSync = function readSync(fd, arg2, arg3, arg4, arg5) {
          var shenanigans = false;
          var buffer$$1,
              offset,
              length,
              position,
              encoding = 'utf8';

          if (typeof arg2 === 'number') {
            length = arg2;
            position = arg3;
            encoding = arg4;
            offset = 0;
            buffer$$1 = Buffer.alloc(length);
            shenanigans = true;
          } else {
            buffer$$1 = arg2;
            offset = arg3;
            length = arg4;
            position = arg5;
          }

          var file = this.fd2file(fd);

          if (position === undefined || position === null) {
            position = file.getPos();
          }

          var rv = file.readSync(buffer$$1, offset, length, position);

          if (!shenanigans) {
            return rv;
          } else {
            return [buffer$$1.toString(encoding), rv];
          }
        };
        /**
         * Asynchronous `fchown`.
         * @param fd
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.fchown = function fchown(fd, uid, gid, callback) {
          if (callback === void 0) callback = nopCb;
          var newCb = wrapCb(callback, 1);

          try {
            this.fd2file(fd).chown(uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fchown`.
         * @param fd
         * @param uid
         * @param gid
         */


        FS.prototype.fchownSync = function fchownSync(fd, uid, gid) {
          this.fd2file(fd).chownSync(uid, gid);
        };
        /**
         * Asynchronous `fchmod`.
         * @param fd
         * @param mode
         * @param callback
         */


        FS.prototype.fchmod = function fchmod(fd, mode, cb) {
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
            this.fd2file(fd).chmod(numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `fchmod`.
         * @param fd
         * @param mode
         */


        FS.prototype.fchmodSync = function fchmodSync(fd, mode) {
          var numMode = typeof mode === 'string' ? parseInt(mode, 8) : mode;
          this.fd2file(fd).chmodSync(numMode);
        };
        /**
         * Change the file timestamps of a file referenced by the supplied file
         * descriptor.
         * @param fd
         * @param atime
         * @param mtime
         * @param callback
         */


        FS.prototype.futimes = function futimes(fd, atime, mtime, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var file = this.fd2file(fd);

            if (typeof atime === 'number') {
              atime = new Date(atime * 1000);
            }

            if (typeof mtime === 'number') {
              mtime = new Date(mtime * 1000);
            }

            file.utimes(atime, mtime, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Change the file timestamps of a file referenced by the supplied file
         * descriptor.
         * @param fd
         * @param atime
         * @param mtime
         */


        FS.prototype.futimesSync = function futimesSync(fd, atime, mtime) {
          this.fd2file(fd).utimesSync(normalizeTime(atime), normalizeTime(mtime));
        }; // DIRECTORY-ONLY METHODS

        /**
         * Asynchronous `rmdir`.
         * @param path
         * @param callback
         */


        FS.prototype.rmdir = function rmdir(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).rmdir(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `rmdir`.
         * @param path
         */


        FS.prototype.rmdirSync = function rmdirSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).rmdirSync(path$$1);
        };
        /**
         * Asynchronous `mkdir`.
         * @param path
         * @param mode defaults to `0777`
         * @param callback
         */


        FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;

          if (typeof mode === 'function') {
            cb = mode;
            mode = 0x1ff;
          }

          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).mkdir(path$$1, mode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `mkdir`.
         * @param path
         * @param mode defaults to `0777`
         */


        FS.prototype.mkdirSync = function mkdirSync(path$$1, mode) {
          assertRoot(this.root).mkdirSync(normalizePath(path$$1), normalizeMode(mode, 0x1ff));
        };
        /**
         * Asynchronous `readdir`. Reads the contents of a directory.
         * The callback gets two arguments `(err, files)` where `files` is an array of
         * the names of the files in the directory excluding `'.'` and `'..'`.
         * @param path
         * @param callback
         */


        FS.prototype.readdir = function readdir(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).readdir(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `readdir`. Reads the contents of a directory.
         * @param path
         * @return [String[]]
         */


        FS.prototype.readdirSync = function readdirSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).readdirSync(path$$1);
        }; // SYMLINK METHODS

        /**
         * Asynchronous `link`.
         * @param srcpath
         * @param dstpath
         * @param callback
         */


        FS.prototype.link = function link(srcpath, dstpath, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            srcpath = normalizePath(srcpath);
            dstpath = normalizePath(dstpath);
            assertRoot(this.root).link(srcpath, dstpath, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `link`.
         * @param srcpath
         * @param dstpath
         */


        FS.prototype.linkSync = function linkSync(srcpath, dstpath) {
          srcpath = normalizePath(srcpath);
          dstpath = normalizePath(dstpath);
          return assertRoot(this.root).linkSync(srcpath, dstpath);
        };

        FS.prototype.symlink = function symlink(srcpath, dstpath, arg3, cb) {
          if (cb === void 0) cb = nopCb;
          var type = typeof arg3 === 'string' ? arg3 : 'file';
          cb = typeof arg3 === 'function' ? arg3 : cb;
          var newCb = wrapCb(cb, 1);

          try {
            if (type !== 'file' && type !== 'dir') {
              return newCb(new ApiError(ErrorCode.EINVAL, "Invalid type: " + type));
            }

            srcpath = normalizePath(srcpath);
            dstpath = normalizePath(dstpath);
            assertRoot(this.root).symlink(srcpath, dstpath, type, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `symlink`.
         * @param srcpath
         * @param dstpath
         * @param type can be either `'dir'` or `'file'` (default is `'file'`)
         */


        FS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          if (!type) {
            type = 'file';
          } else if (type !== 'file' && type !== 'dir') {
            throw new ApiError(ErrorCode.EINVAL, "Invalid type: " + type);
          }

          srcpath = normalizePath(srcpath);
          dstpath = normalizePath(dstpath);
          return assertRoot(this.root).symlinkSync(srcpath, dstpath, type);
        };
        /**
         * Asynchronous readlink.
         * @param path
         * @param callback
         */


        FS.prototype.readlink = function readlink(path$$1, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).readlink(path$$1, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous readlink.
         * @param path
         * @return [String]
         */


        FS.prototype.readlinkSync = function readlinkSync(path$$1) {
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).readlinkSync(path$$1);
        }; // PROPERTY OPERATIONS

        /**
         * Asynchronous `chown`.
         * @param path
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.chown = function chown(path$$1, uid, gid, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).chown(path$$1, false, uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `chown`.
         * @param path
         * @param uid
         * @param gid
         */


        FS.prototype.chownSync = function chownSync(path$$1, uid, gid) {
          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chownSync(path$$1, false, uid, gid);
        };
        /**
         * Asynchronous `lchown`.
         * @param path
         * @param uid
         * @param gid
         * @param callback
         */


        FS.prototype.lchown = function lchown(path$$1, uid, gid, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).chown(path$$1, true, uid, gid, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `lchown`.
         * @param path
         * @param uid
         * @param gid
         */


        FS.prototype.lchownSync = function lchownSync(path$$1, uid, gid) {
          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chownSync(path$$1, true, uid, gid);
        };
        /**
         * Asynchronous `chmod`.
         * @param path
         * @param mode
         * @param callback
         */


        FS.prototype.chmod = function chmod(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = normalizeMode(mode, -1);

            if (numMode < 0) {
              throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
            }

            assertRoot(this.root).chmod(normalizePath(path$$1), false, numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `chmod`.
         * @param path
         * @param mode
         */


        FS.prototype.chmodSync = function chmodSync(path$$1, mode) {
          var numMode = normalizeMode(mode, -1);

          if (numMode < 0) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
          }

          path$$1 = normalizePath(path$$1);
          assertRoot(this.root).chmodSync(path$$1, false, numMode);
        };
        /**
         * Asynchronous `lchmod`.
         * @param path
         * @param mode
         * @param callback
         */


        FS.prototype.lchmod = function lchmod(path$$1, mode, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            var numMode = normalizeMode(mode, -1);

            if (numMode < 0) {
              throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
            }

            assertRoot(this.root).chmod(normalizePath(path$$1), true, numMode, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `lchmod`.
         * @param path
         * @param mode
         */


        FS.prototype.lchmodSync = function lchmodSync(path$$1, mode) {
          var numMode = normalizeMode(mode, -1);

          if (numMode < 1) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid mode.");
          }

          assertRoot(this.root).chmodSync(normalizePath(path$$1), true, numMode);
        };
        /**
         * Change file timestamps of the file referenced by the supplied path.
         * @param path
         * @param atime
         * @param mtime
         * @param callback
         */


        FS.prototype.utimes = function utimes(path$$1, atime, mtime, cb) {
          if (cb === void 0) cb = nopCb;
          var newCb = wrapCb(cb, 1);

          try {
            assertRoot(this.root).utimes(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime), newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Change file timestamps of the file referenced by the supplied path.
         * @param path
         * @param atime
         * @param mtime
         */


        FS.prototype.utimesSync = function utimesSync(path$$1, atime, mtime) {
          assertRoot(this.root).utimesSync(normalizePath(path$$1), normalizeTime(atime), normalizeTime(mtime));
        };

        FS.prototype.realpath = function realpath(path$$1, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          var cache = typeof arg2 === 'object' ? arg2 : {};
          cb = typeof arg2 === 'function' ? arg2 : nopCb;
          var newCb = wrapCb(cb, 2);

          try {
            path$$1 = normalizePath(path$$1);
            assertRoot(this.root).realpath(path$$1, cache, newCb);
          } catch (e) {
            newCb(e);
          }
        };
        /**
         * Synchronous `realpath`.
         * @param path
         * @param cache An object literal of mapped paths that can be used to
         *   force a specific path resolution or avoid additional `fs.stat` calls for
         *   known real paths.
         * @return [String]
         */


        FS.prototype.realpathSync = function realpathSync(path$$1, cache) {
          if (cache === void 0) cache = {};
          path$$1 = normalizePath(path$$1);
          return assertRoot(this.root).realpathSync(path$$1, cache);
        };

        FS.prototype.watchFile = function watchFile(filename, arg2, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.unwatchFile = function unwatchFile(filename, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.watch = function watch(filename, arg2, listener) {
          if (listener === void 0) listener = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.access = function access(path$$1, arg2, cb) {
          if (cb === void 0) cb = nopCb;
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.accessSync = function accessSync(path$$1, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.createReadStream = function createReadStream(path$$1, options) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        FS.prototype.createWriteStream = function createWriteStream(path$$1, options) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * For unit testing. Passes all incoming callbacks to cbWrapper for wrapping.
         */


        FS.prototype.wrapCallbacks = function wrapCallbacks(cbWrapper) {
          wrapCb = cbWrapper;
        };

        FS.prototype.getFdForFile = function getFdForFile(file) {
          var fd = this.nextFd++;
          this.fdMap[fd] = file;
          return fd;
        };

        FS.prototype.fd2file = function fd2file(fd) {
          var rv = this.fdMap[fd];

          if (rv) {
            return rv;
          } else {
            throw new ApiError(ErrorCode.EBADF, 'Invalid file descriptor.');
          }
        };

        FS.prototype.closeFd = function closeFd(fd) {
          delete this.fdMap[fd];
        };
        /* tslint:disable:variable-name */
        // Exported fs.Stats.


        FS.Stats = Stats; // Manually export the individual public functions of fs.
        // Required because some code will invoke functions off of the module.
        // e.g.:
        // let writeFile = fs.writeFile;
        // writeFile(...)

        /**
         * @hidden
         */

        var fs = new FS();
        /**
         * @hidden
         */

        var _fsMock = {};
        /**
         * @hidden
         */

        var fsProto = FS.prototype;
        Object.keys(fsProto).forEach(function (key) {
          if (typeof fs[key] === 'function') {
            _fsMock[key] = function () {
              return fs[key].apply(fs, arguments);
            };
          } else {
            _fsMock[key] = fs[key];
          }
        });

        _fsMock['changeFSModule'] = function (newFs) {
          fs = newFs;
        };

        _fsMock['getFSModule'] = function () {
          return fs;
        };

        _fsMock['FS'] = FS;
        /*
         * Levenshtein distance, from the `js-levenshtein` NPM module.
         * Copied here to avoid complexity of adding another CommonJS module dependency.
         */

        function _min(d0, d1, d2, bx, ay) {
          return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
        }
        /**
         * Calculates levenshtein distance.
         * @param a
         * @param b
         */


        function levenshtein(a, b) {
          if (a === b) {
            return 0;
          }

          if (a.length > b.length) {
            var tmp = a;
            a = b;
            b = tmp;
          }

          var la = a.length;
          var lb = b.length;

          while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
            la--;
            lb--;
          }

          var offset = 0;

          while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
            offset++;
          }

          la -= offset;
          lb -= offset;

          if (la === 0 || lb === 1) {
            return lb;
          }

          var vector = new Array(la << 1);

          for (var y = 0; y < la;) {
            vector[la + y] = a.charCodeAt(offset + y);
            vector[y] = ++y;
          }

          var x;
          var d0;
          var d1;
          var d2;
          var d3;

          for (x = 0; x + 3 < lb;) {
            var bx0 = b.charCodeAt(offset + (d0 = x));
            var bx1 = b.charCodeAt(offset + (d1 = x + 1));
            var bx2 = b.charCodeAt(offset + (d2 = x + 2));
            var bx3 = b.charCodeAt(offset + (d3 = x + 3));
            var dd$1 = x += 4;

            for (var y$1 = 0; y$1 < la;) {
              var ay = vector[la + y$1];
              var dy = vector[y$1];
              d0 = _min(dy, d0, d1, bx0, ay);
              d1 = _min(d0, d1, d2, bx1, ay);
              d2 = _min(d1, d2, d3, bx2, ay);
              dd$1 = _min(d2, d3, dd$1, bx3, ay);
              vector[y$1++] = dd$1;
              d3 = d2;
              d2 = d1;
              d1 = d0;
              d0 = dy;
            }
          }

          var dd = 0;

          for (; x < lb;) {
            var bx0$1 = b.charCodeAt(offset + (d0 = x));
            dd = ++x;

            for (var y$2 = 0; y$2 < la; y$2++) {
              var dy$1 = vector[y$2];
              vector[y$2] = dd = dy$1 < d0 || dd < d0 ? dy$1 > dd ? dd + 1 : dy$1 + 1 : bx0$1 === vector[la + y$2] ? d0 : d0 + 1;
              d0 = dy$1;
            }
          }

          return dd;
        }

        function deprecationMessage(print, fsName, opts) {
          if (print) {
            console.warn("[" + fsName + "] Direct file system constructor usage is deprecated for this file system, and will be removed in the next major version. Please use the '" + fsName + ".Create(" + JSON.stringify(opts) + ", callback)' method instead. See https://github.com/jvilk/BrowserFS/issues/176 for more details.");
          }
        }
        /**
         * Checks for any IE version, including IE11 which removed MSIE from the
         * userAgent string.
         * @hidden
         */


        var isIE = typeof navigator !== "undefined" && !!(/(msie) ([\w.]+)/.exec(navigator.userAgent.toLowerCase()) || navigator.userAgent.indexOf('Trident') !== -1);
        /**
         * Check if we're in a web worker.
         * @hidden
         */

        var isWebWorker = typeof window === "undefined";
        /**
         * Throws an exception. Called on code paths that should be impossible.
         * @hidden
         */

        function fail() {
          throw new Error("BFS has reached an impossible code path; please file a bug.");
        }
        /**
         * Synchronous recursive makedir.
         * @hidden
         */


        function mkdirpSync(p, mode, fs) {
          if (!fs.existsSync(p)) {
            mkdirpSync(path.dirname(p), mode, fs);
            fs.mkdirSync(p, mode);
          }
        }
        /**
         * Converts a buffer into an array buffer. Attempts to do so in a
         * zero-copy manner, e.g. the array references the same memory.
         * @hidden
         */


        function buffer2ArrayBuffer(buff) {
          var u8 = buffer2Uint8array(buff),
              u8offset = u8.byteOffset,
              u8Len = u8.byteLength;

          if (u8offset === 0 && u8Len === u8.buffer.byteLength) {
            return u8.buffer;
          } else {
            return u8.buffer.slice(u8offset, u8offset + u8Len);
          }
        }
        /**
         * Converts a buffer into a Uint8Array. Attempts to do so in a
         * zero-copy manner, e.g. the array references the same memory.
         * @hidden
         */


        function buffer2Uint8array(buff) {
          if (buff instanceof Uint8Array) {
            // BFS & Node v4.0 buffers *are* Uint8Arrays.
            return buff;
          } else {
            // Uint8Arrays can be constructed from arrayish numbers.
            // At this point, we assume this isn't a BFS array.
            return new Uint8Array(buff);
          }
        }
        /**
         * Converts the given arrayish object into a Buffer. Attempts to
         * be zero-copy.
         * @hidden
         */


        function arrayish2Buffer(arr) {
          if (arr instanceof Buffer) {
            return arr;
          } else if (arr instanceof Uint8Array) {
            return uint8Array2Buffer(arr);
          } else {
            return Buffer.from(arr);
          }
        }
        /**
         * Converts the given Uint8Array into a Buffer. Attempts to be zero-copy.
         * @hidden
         */


        function uint8Array2Buffer(u8) {
          if (u8 instanceof Buffer) {
            return u8;
          } else if (u8.byteOffset === 0 && u8.byteLength === u8.buffer.byteLength) {
            return arrayBuffer2Buffer(u8.buffer);
          } else {
            return Buffer.from(u8.buffer, u8.byteOffset, u8.byteLength);
          }
        }
        /**
         * Converts the given array buffer into a Buffer. Attempts to be
         * zero-copy.
         * @hidden
         */


        function arrayBuffer2Buffer(ab) {
          return Buffer.from(ab);
        }
        /**
         * Copies a slice of the given buffer
         * @hidden
         */


        function copyingSlice(buff, start, end) {
          if (start === void 0) start = 0;
          if (end === void 0) end = buff.length;

          if (start < 0 || end < 0 || end > buff.length || start > end) {
            throw new TypeError("Invalid slice bounds on buffer of length " + buff.length + ": [" + start + ", " + end + "]");
          }

          if (buff.length === 0) {
            // Avoid s0 corner case in ArrayBuffer case.
            return emptyBuffer();
          } else {
            var u8 = buffer2Uint8array(buff),
                s0 = buff[0],
                newS0 = (s0 + 1) % 0xFF;
            buff[0] = newS0;

            if (u8[0] === newS0) {
              // Same memory. Revert & copy.
              u8[0] = s0;
              return uint8Array2Buffer(u8.slice(start, end));
            } else {
              // Revert.
              buff[0] = s0;
              return uint8Array2Buffer(u8.subarray(start, end));
            }
          }
        }
        /**
         * @hidden
         */


        var emptyBuff = null;
        /**
         * Returns an empty buffer.
         * @hidden
         */

        function emptyBuffer() {
          if (emptyBuff) {
            return emptyBuff;
          }

          return emptyBuff = Buffer.alloc(0);
        }
        /**
         * Option validator for a Buffer file system option.
         * @hidden
         */


        function bufferValidator(v, cb) {
          if (Buffer.isBuffer(v)) {
            cb();
          } else {
            cb(new ApiError(ErrorCode.EINVAL, "option must be a Buffer."));
          }
        }
        /**
         * Checks that the given options object is valid for the file system options.
         * @hidden
         */


        function checkOptions(fsType, opts, cb) {
          var optsInfo = fsType.Options;
          var fsName = fsType.Name;
          var pendingValidators = 0;
          var callbackCalled = false;
          var loopEnded = false;

          function validatorCallback(e) {
            if (!callbackCalled) {
              if (e) {
                callbackCalled = true;
                cb(e);
              }

              pendingValidators--;

              if (pendingValidators === 0 && loopEnded) {
                cb();
              }
            }
          } // Check for required options.


          var loop = function (optName) {
            if (optsInfo.hasOwnProperty(optName)) {
              var opt = optsInfo[optName];
              var providedValue = opts[optName];

              if (providedValue === undefined || providedValue === null) {
                if (!opt.optional) {
                  // Required option, not provided.
                  // Any incorrect options provided? Which ones are close to the provided one?
                  // (edit distance 5 === close)
                  var incorrectOptions = Object.keys(opts).filter(function (o) {
                    return !(o in optsInfo);
                  }).map(function (a) {
                    return {
                      str: a,
                      distance: levenshtein(optName, a)
                    };
                  }).filter(function (o) {
                    return o.distance < 5;
                  }).sort(function (a, b) {
                    return a.distance - b.distance;
                  }); // Validators may be synchronous.

                  if (callbackCalled) {
                    return {};
                  }

                  callbackCalled = true;
                  return {
                    v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Required option '" + optName + "' not provided." + (incorrectOptions.length > 0 ? " You provided unrecognized option '" + incorrectOptions[0].str + "'; perhaps you meant to type '" + optName + "'." : '') + "\nOption description: " + opt.description))
                  };
                } // Else: Optional option, not provided. That is OK.

              } else {
                // Option provided! Check type.
                var typeMatches = false;

                if (Array.isArray(opt.type)) {
                  typeMatches = opt.type.indexOf(typeof providedValue) !== -1;
                } else {
                  typeMatches = typeof providedValue === opt.type;
                }

                if (!typeMatches) {
                  // Validators may be synchronous.
                  if (callbackCalled) {
                    return {};
                  }

                  callbackCalled = true;
                  return {
                    v: cb(new ApiError(ErrorCode.EINVAL, "[" + fsName + "] Value provided for option " + optName + " is not the proper type. Expected " + (Array.isArray(opt.type) ? "one of {" + opt.type.join(", ") + "}" : opt.type) + ", but received " + typeof providedValue + "\nOption description: " + opt.description))
                  };
                } else if (opt.validator) {
                  pendingValidators++;
                  opt.validator(providedValue, validatorCallback);
                } // Otherwise: All good!

              }
            }
          };

          for (var optName in optsInfo) {
            var returned = loop(optName);
            if (returned) return returned.v;
          }

          loopEnded = true;

          if (pendingValidators === 0 && !callbackCalled) {
            cb();
          }
        }

        var BFSUtils = Object.freeze({
          deprecationMessage: deprecationMessage,
          isIE: isIE,
          isWebWorker: isWebWorker,
          fail: fail,
          mkdirpSync: mkdirpSync,
          buffer2ArrayBuffer: buffer2ArrayBuffer,
          buffer2Uint8array: buffer2Uint8array,
          arrayish2Buffer: arrayish2Buffer,
          uint8Array2Buffer: uint8Array2Buffer,
          arrayBuffer2Buffer: arrayBuffer2Buffer,
          copyingSlice: copyingSlice,
          emptyBuffer: emptyBuffer,
          bufferValidator: bufferValidator,
          checkOptions: checkOptions
        });

        var BFSEmscriptenStreamOps = function BFSEmscriptenStreamOps(fs) {
          this.fs = fs;
          this.nodefs = fs.getNodeFS();
          this.FS = fs.getFS();
          this.PATH = fs.getPATH();
          this.ERRNO_CODES = fs.getERRNO_CODES();
        };

        BFSEmscriptenStreamOps.prototype.open = function open(stream) {
          var path$$1 = this.fs.realPath(stream.node);
          var FS = this.FS;

          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = this.nodefs.openSync(path$$1, this.fs.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.close = function close(stream) {
          var FS = this.FS;

          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              this.nodefs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.read = function read(stream, buffer$$1, offset, length, position) {
          // Avoid copying overhead by reading directly into buffer.
          try {
            return this.nodefs.readSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
          } catch (e) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.write = function write(stream, buffer$$1, offset, length, position) {
          // Avoid copying overhead.
          try {
            return this.nodefs.writeSync(stream.nfd, uint8Array2Buffer(buffer$$1), offset, length, position);
          } catch (e) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenStreamOps.prototype.llseek = function llseek(stream, offset, whence) {
          var position = offset;

          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (this.FS.isFile(stream.node.mode)) {
              try {
                var stat = this.nodefs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
              }
            }
          }

          if (position < 0) {
            throw new this.FS.ErrnoError(this.ERRNO_CODES.EINVAL);
          }

          stream.position = position;
          return position;
        };

        var BFSEmscriptenNodeOps = function BFSEmscriptenNodeOps(fs) {
          this.fs = fs;
          this.nodefs = fs.getNodeFS();
          this.FS = fs.getFS();
          this.PATH = fs.getPATH();
          this.ERRNO_CODES = fs.getERRNO_CODES();
        };

        BFSEmscriptenNodeOps.prototype.getattr = function getattr(node) {
          var path$$1 = this.fs.realPath(node);
          var stat;

          try {
            stat = this.nodefs.lstatSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        };

        BFSEmscriptenNodeOps.prototype.setattr = function setattr(node, attr) {
          var path$$1 = this.fs.realPath(node);

          try {
            if (attr.mode !== undefined) {
              this.nodefs.chmodSync(path$$1, attr.mode); // update the common node structure mode as well

              node.mode = attr.mode;
            }

            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              this.nodefs.utimesSync(path$$1, date, date);
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            } // Ignore not supported errors. Emscripten does utimesSync when it
            // writes files, but never really requires the value to be set.


            if (e.code !== "ENOTSUP") {
              throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
            }
          }

          if (attr.size !== undefined) {
            try {
              this.nodefs.truncateSync(path$$1, attr.size);
            } catch (e) {
              if (!e.code) {
                throw e;
              }

              throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
            }
          }
        };

        BFSEmscriptenNodeOps.prototype.lookup = function lookup(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);
          var mode = this.fs.getMode(path$$1);
          return this.fs.createNode(parent, name, mode);
        };

        BFSEmscriptenNodeOps.prototype.mknod = function mknod(parent, name, mode, dev) {
          var node = this.fs.createNode(parent, name, mode, dev); // create the backing node for this in the fs root as well

          var path$$1 = this.fs.realPath(node);

          try {
            if (this.FS.isDir(node.mode)) {
              this.nodefs.mkdirSync(path$$1, node.mode);
            } else {
              this.nodefs.writeFileSync(path$$1, '', {
                mode: node.mode
              });
            }
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return node;
        };

        BFSEmscriptenNodeOps.prototype.rename = function rename(oldNode, newDir, newName) {
          var oldPath = this.fs.realPath(oldNode);
          var newPath = this.PATH.join2(this.fs.realPath(newDir), newName);

          try {
            this.nodefs.renameSync(oldPath, newPath); // This logic is missing from the original NodeFS,
            // causing Emscripten's filesystem to think that the old file still exists.

            oldNode.name = newName;
            oldNode.parent = newDir;
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.unlink = function unlink(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);

          try {
            this.nodefs.unlinkSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.rmdir = function rmdir(parent, name) {
          var path$$1 = this.PATH.join2(this.fs.realPath(parent), name);

          try {
            this.nodefs.rmdirSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.readdir = function readdir(node) {
          var path$$1 = this.fs.realPath(node);

          try {
            // Node does not list . and .. in directory listings,
            // but Emscripten expects it.
            var contents = this.nodefs.readdirSync(path$$1);
            contents.push('.', '..');
            return contents;
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.symlink = function symlink(parent, newName, oldPath) {
          var newPath = this.PATH.join2(this.fs.realPath(parent), newName);

          try {
            this.nodefs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        BFSEmscriptenNodeOps.prototype.readlink = function readlink(node) {
          var path$$1 = this.fs.realPath(node);

          try {
            return this.nodefs.readlinkSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }
        };

        var BFSEmscriptenFS = function BFSEmscriptenFS(_FS, _PATH, _ERRNO_CODES, nodefs) {
          if (_FS === void 0) _FS = self['FS'];
          if (_PATH === void 0) _PATH = self['PATH'];
          if (_ERRNO_CODES === void 0) _ERRNO_CODES = self['ERRNO_CODES'];
          if (nodefs === void 0) nodefs = _fsMock; // This maps the integer permission modes from http://linux.die.net/man/3/open
          // to node.js-specific file open permission strings at http://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback

          this.flagsToPermissionStringMap = {
            0
            /*O_RDONLY*/
            : 'r',
            1
            /*O_WRONLY*/
            : 'r+',
            2
            /*O_RDWR*/
            : 'r+',
            64
            /*O_CREAT*/
            : 'r',
            65
            /*O_WRONLY|O_CREAT*/
            : 'r+',
            66
            /*O_RDWR|O_CREAT*/
            : 'r+',
            129
            /*O_WRONLY|O_EXCL*/
            : 'rx+',
            193
            /*O_WRONLY|O_CREAT|O_EXCL*/
            : 'rx+',
            514
            /*O_RDWR|O_TRUNC*/
            : 'w+',
            577
            /*O_WRONLY|O_CREAT|O_TRUNC*/
            : 'w',
            578
            /*O_CREAT|O_RDWR|O_TRUNC*/
            : 'w+',
            705
            /*O_WRONLY|O_CREAT|O_EXCL|O_TRUNC*/
            : 'wx',
            706
            /*O_RDWR|O_CREAT|O_EXCL|O_TRUNC*/
            : 'wx+',
            1024
            /*O_APPEND*/
            : 'a',
            1025
            /*O_WRONLY|O_APPEND*/
            : 'a',
            1026
            /*O_RDWR|O_APPEND*/
            : 'a+',
            1089
            /*O_WRONLY|O_CREAT|O_APPEND*/
            : 'a',
            1090
            /*O_RDWR|O_CREAT|O_APPEND*/
            : 'a+',
            1153
            /*O_WRONLY|O_EXCL|O_APPEND*/
            : 'ax',
            1154
            /*O_RDWR|O_EXCL|O_APPEND*/
            : 'ax+',
            1217
            /*O_WRONLY|O_CREAT|O_EXCL|O_APPEND*/
            : 'ax',
            1218
            /*O_RDWR|O_CREAT|O_EXCL|O_APPEND*/
            : 'ax+',
            4096
            /*O_RDONLY|O_DSYNC*/
            : 'rs',
            4098
            /*O_RDWR|O_DSYNC*/
            : 'rs+'
          };
          this.nodefs = nodefs;
          this.FS = _FS;
          this.PATH = _PATH;
          this.ERRNO_CODES = _ERRNO_CODES;
          this.node_ops = new BFSEmscriptenNodeOps(this);
          this.stream_ops = new BFSEmscriptenStreamOps(this);
        };

        BFSEmscriptenFS.prototype.mount = function mount(m) {
          return this.createNode(null, '/', this.getMode(m.opts.root), 0);
        };

        BFSEmscriptenFS.prototype.createNode = function createNode(parent, name, mode, dev) {
          var FS = this.FS;

          if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
            throw new FS.ErrnoError(this.ERRNO_CODES.EINVAL);
          }

          var node = FS.createNode(parent, name, mode);
          node.node_ops = this.node_ops;
          node.stream_ops = this.stream_ops;
          return node;
        };

        BFSEmscriptenFS.prototype.getMode = function getMode(path$$1) {
          var stat;

          try {
            stat = this.nodefs.lstatSync(path$$1);
          } catch (e) {
            if (!e.code) {
              throw e;
            }

            throw new this.FS.ErrnoError(this.ERRNO_CODES[e.code]);
          }

          return stat.mode;
        };

        BFSEmscriptenFS.prototype.realPath = function realPath(node) {
          var parts = [];

          while (node.parent !== node) {
            parts.push(node.name);
            node = node.parent;
          }

          parts.push(node.mount.opts.root);
          parts.reverse();
          return this.PATH.join.apply(null, parts);
        };

        BFSEmscriptenFS.prototype.flagsToPermissionString = function flagsToPermissionString(flags) {
          var parsedFlags = typeof flags === "string" ? parseInt(flags, 10) : flags;
          parsedFlags &= 0x1FFF;

          if (parsedFlags in this.flagsToPermissionStringMap) {
            return this.flagsToPermissionStringMap[parsedFlags];
          } else {
            return flags;
          }
        };

        BFSEmscriptenFS.prototype.getNodeFS = function getNodeFS() {
          return this.nodefs;
        };

        BFSEmscriptenFS.prototype.getFS = function getFS() {
          return this.FS;
        };

        BFSEmscriptenFS.prototype.getPATH = function getPATH() {
          return this.PATH;
        };

        BFSEmscriptenFS.prototype.getERRNO_CODES = function getERRNO_CODES() {
          return this.ERRNO_CODES;
        };
        /**
         * Basic filesystem class. Most filesystems should extend this class, as it
         * provides default implementations for a handful of methods.
         */


        var BaseFileSystem = function BaseFileSystem() {};

        BaseFileSystem.prototype.supportsLinks = function supportsLinks() {
          return false;
        };

        BaseFileSystem.prototype.diskSpace = function diskSpace(p, cb) {
          cb(0, 0);
        };
        /**
         * Opens the file at path p with the given flag. The file must exist.
         * @param p The path to open.
         * @param flag The flag to use when opening the file.
         */


        BaseFileSystem.prototype.openFile = function openFile(p, flag, cb) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Create the file at path p with the given mode. Then, open it with the given
         * flag.
         */


        BaseFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.open = function open(p, flag, mode, cb) {
          var this$1 = this;

          var mustBeFile = function (e, stats) {
            if (e) {
              // File does not exist.
              switch (flag.pathNotExistsAction()) {
                case ActionType.CREATE_FILE:
                  // Ensure parent exists.
                  return this$1.stat(path.dirname(p), false, function (e, parentStats) {
                    if (e) {
                      cb(e);
                    } else if (parentStats && !parentStats.isDirectory()) {
                      cb(ApiError.ENOTDIR(path.dirname(p)));
                    } else {
                      this$1.createFile(p, flag, mode, cb);
                    }
                  });

                case ActionType.THROW_EXCEPTION:
                  return cb(ApiError.ENOENT(p));

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
              }
            } else {
              // File exists.
              if (stats && stats.isDirectory()) {
                return cb(ApiError.EISDIR(p));
              }

              switch (flag.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                  return cb(ApiError.EEXIST(p));

                case ActionType.TRUNCATE_FILE:
                  // NOTE: In a previous implementation, we deleted the file and
                  // re-created it. However, this created a race condition if another
                  // asynchronous request was trying to read the file, as the file
                  // would not exist for a small period of time.
                  return this$1.openFile(p, flag, function (e, fd) {
                    if (e) {
                      cb(e);
                    } else if (fd) {
                      fd.truncate(0, function () {
                        fd.sync(function () {
                          cb(null, fd);
                        });
                      });
                    } else {
                      fail();
                    }
                  });

                case ActionType.NOP:
                  return this$1.openFile(p, flag, cb);

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.'));
              }
            }
          };

          this.stat(p, false, mustBeFile);
        };

        BaseFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.stat = function stat(p, isLstat, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.statSync = function statSync(p, isLstat) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Opens the file at path p with the given flag. The file must exist.
         * @param p The path to open.
         * @param flag The flag to use when opening the file.
         * @return A File object corresponding to the opened file.
         */


        BaseFileSystem.prototype.openFileSync = function openFileSync(p, flag, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Create the file at path p with the given mode. Then, open it with the given
         * flag.
         */


        BaseFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.openSync = function openSync(p, flag, mode) {
          // Check if the path exists, and is a file.
          var stats;

          try {
            stats = this.statSync(p, false);
          } catch (e) {
            // File does not exist.
            switch (flag.pathNotExistsAction()) {
              case ActionType.CREATE_FILE:
                // Ensure parent exists.
                var parentStats = this.statSync(path.dirname(p), false);

                if (!parentStats.isDirectory()) {
                  throw ApiError.ENOTDIR(path.dirname(p));
                }

                return this.createFileSync(p, flag, mode);

              case ActionType.THROW_EXCEPTION:
                throw ApiError.ENOENT(p);

              default:
                throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
            }
          } // File exists.


          if (stats.isDirectory()) {
            throw ApiError.EISDIR(p);
          }

          switch (flag.pathExistsAction()) {
            case ActionType.THROW_EXCEPTION:
              throw ApiError.EEXIST(p);

            case ActionType.TRUNCATE_FILE:
              // Delete file.
              this.unlinkSync(p); // Create file. Use the same mode as the old file.
              // Node itself modifies the ctime when this occurs, so this action
              // will preserve that behavior if the underlying file system
              // supports those properties.

              return this.createFileSync(p, flag, stats.mode);

            case ActionType.NOP:
              return this.openFileSync(p, flag, mode);

            default:
              throw new ApiError(ErrorCode.EINVAL, 'Invalid FileFlag object.');
          }
        };

        BaseFileSystem.prototype.unlink = function unlink(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.unlinkSync = function unlinkSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.rmdir = function rmdir(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.rmdirSync = function rmdirSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.readdir = function readdir(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.readdirSync = function readdirSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.exists = function exists(p, cb) {
          this.stat(p, null, function (err) {
            cb(!err);
          });
        };

        BaseFileSystem.prototype.existsSync = function existsSync(p) {
          try {
            this.statSync(p, true);
            return true;
          } catch (e) {
            return false;
          }
        };

        BaseFileSystem.prototype.realpath = function realpath(p, cache, cb) {
          if (this.supportsLinks()) {
            // The path could contain symlinks. Split up the path,
            // resolve any symlinks, return the resolved string.
            var splitPath = p.split(path.sep); // TODO: Simpler to just pass through file, find sep and such.

            for (var i = 0; i < splitPath.length; i++) {
              var addPaths = splitPath.slice(0, i + 1);
              splitPath[i] = path.join.apply(null, addPaths);
            }
          } else {
            // No symlinks. We just need to verify that it exists.
            this.exists(p, function (doesExist) {
              if (doesExist) {
                cb(null, p);
              } else {
                cb(ApiError.ENOENT(p));
              }
            });
          }
        };

        BaseFileSystem.prototype.realpathSync = function realpathSync(p, cache) {
          if (this.supportsLinks()) {
            // The path could contain symlinks. Split up the path,
            // resolve any symlinks, return the resolved string.
            var splitPath = p.split(path.sep); // TODO: Simpler to just pass through file, find sep and such.

            for (var i = 0; i < splitPath.length; i++) {
              var addPaths = splitPath.slice(0, i + 1);
              splitPath[i] = path.join.apply(path, addPaths);
            }

            return splitPath.join(path.sep);
          } else {
            // No symlinks. We just need to verify that it exists.
            if (this.existsSync(p)) {
              return p;
            } else {
              throw ApiError.ENOENT(p);
            }
          }
        };

        BaseFileSystem.prototype.truncate = function truncate(p, len, cb) {
          this.open(p, FileFlag.getFileFlag('r+'), 0x1a4, function (er, fd) {
            if (er) {
              return cb(er);
            }

            fd.truncate(len, function (er) {
              fd.close(function (er2) {
                cb(er || er2);
              });
            });
          });
        };

        BaseFileSystem.prototype.truncateSync = function truncateSync(p, len) {
          var fd = this.openSync(p, FileFlag.getFileFlag('r+'), 0x1a4); // Need to safely close FD, regardless of whether or not truncate succeeds.

          try {
            fd.truncateSync(len);
          } catch (e) {
            throw e;
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.readFile = function readFile(fname, encoding, flag, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb; // Get file.

          this.open(fname, flag, 0x1a4, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err, arg) {
              fd.close(function (err2) {
                if (!err) {
                  err = err2;
                }

                return oldCb(err, arg);
              });
            };

            fd.stat(function (err, stat) {
              if (err) {
                return cb(err);
              } // Allocate buffer.


              var buf = Buffer.alloc(stat.size);
              fd.read(buf, 0, stat.size, 0, function (err) {
                if (err) {
                  return cb(err);
                } else if (encoding === null) {
                  return cb(err, buf);
                }

                try {
                  cb(null, buf.toString(encoding));
                } catch (e) {
                  cb(e);
                }
              });
            });
          });
        };

        BaseFileSystem.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
          // Get file.
          var fd = this.openSync(fname, flag, 0x1a4);

          try {
            var stat = fd.statSync(); // Allocate buffer.

            var buf = Buffer.alloc(stat.size);
            fd.readSync(buf, 0, stat.size, 0);
            fd.closeSync();

            if (encoding === null) {
              return buf;
            }

            return buf.toString(encoding);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb; // Get file.

          this.open(fname, flag, 0x1a4, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err) {
              fd.close(function (err2) {
                oldCb(err ? err : err2);
              });
            };

            try {
              if (typeof data === 'string') {
                data = Buffer.from(data, encoding);
              }
            } catch (e) {
              return cb(e);
            } // Write into file.


            fd.write(data, 0, data.length, 0, cb);
          });
        };

        BaseFileSystem.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
          // Get file.
          var fd = this.openSync(fname, flag, mode);

          try {
            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            } // Write into file.


            fd.writeSync(data, 0, data.length, 0);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
          // Wrap cb in file closing code.
          var oldCb = cb;
          this.open(fname, flag, mode, function (err, fd) {
            if (err) {
              return cb(err);
            }

            cb = function (err) {
              fd.close(function (err2) {
                oldCb(err ? err : err2);
              });
            };

            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            }

            fd.write(data, 0, data.length, null, cb);
          });
        };

        BaseFileSystem.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
          var fd = this.openSync(fname, flag, mode);

          try {
            if (typeof data === 'string') {
              data = Buffer.from(data, encoding);
            }

            fd.writeSync(data, 0, data.length, null);
          } finally {
            fd.closeSync();
          }
        };

        BaseFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.linkSync = function linkSync(srcpath, dstpath) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFileSystem.prototype.readlink = function readlink(p, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFileSystem.prototype.readlinkSync = function readlinkSync(p) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * Implements the asynchronous API in terms of the synchronous API.
         * @class SynchronousFileSystem
         */


        var SynchronousFileSystem = function (BaseFileSystem) {
          function SynchronousFileSystem() {
            BaseFileSystem.apply(this, arguments);
          }

          if (BaseFileSystem) SynchronousFileSystem.__proto__ = BaseFileSystem;
          SynchronousFileSystem.prototype = Object.create(BaseFileSystem && BaseFileSystem.prototype);
          SynchronousFileSystem.prototype.constructor = SynchronousFileSystem;

          SynchronousFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          SynchronousFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            try {
              this.renameSync(oldPath, newPath);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.stat = function stat(p, isLstat, cb) {
            try {
              cb(null, this.statSync(p, isLstat));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.open = function open(p, flags, mode, cb) {
            try {
              cb(null, this.openSync(p, flags, mode));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.unlink = function unlink(p, cb) {
            try {
              this.unlinkSync(p);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.rmdir = function rmdir(p, cb) {
            try {
              this.rmdirSync(p);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            try {
              this.mkdirSync(p, mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.readdir = function readdir(p, cb) {
            try {
              cb(null, this.readdirSync(p));
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            try {
              this.chmodSync(p, isLchmod, mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
            try {
              this.chownSync(p, isLchown, uid, gid);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.utimes = function utimes(p, atime, mtime, cb) {
            try {
              this.utimesSync(p, atime, mtime);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.link = function link(srcpath, dstpath, cb) {
            try {
              this.linkSync(srcpath, dstpath);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
            try {
              this.symlinkSync(srcpath, dstpath, type);
              cb();
            } catch (e) {
              cb(e);
            }
          };

          SynchronousFileSystem.prototype.readlink = function readlink(p, cb) {
            try {
              cb(null, this.readlinkSync(p));
            } catch (e) {
              cb(e);
            }
          };

          return SynchronousFileSystem;
        }(BaseFileSystem);
        /**
         * Base class that contains shared implementations of functions for the file
         * object.
         */


        var BaseFile = function BaseFile() {};

        BaseFile.prototype.sync = function sync(cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.syncSync = function syncSync() {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.datasync = function datasync(cb) {
          this.sync(cb);
        };

        BaseFile.prototype.datasyncSync = function datasyncSync() {
          return this.syncSync();
        };

        BaseFile.prototype.chown = function chown(uid, gid, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.chownSync = function chownSync(uid, gid) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.chmod = function chmod(mode, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.chmodSync = function chmodSync(mode) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };

        BaseFile.prototype.utimes = function utimes(atime, mtime, cb) {
          cb(new ApiError(ErrorCode.ENOTSUP));
        };

        BaseFile.prototype.utimesSync = function utimesSync(atime, mtime) {
          throw new ApiError(ErrorCode.ENOTSUP);
        };
        /**
         * An implementation of the File interface that operates on a file that is
         * completely in-memory. PreloadFiles are backed by a Buffer.
         *
         * This is also an abstract class, as it lacks an implementation of 'sync' and
         * 'close'. Each filesystem that wishes to use this file representation must
         * extend this class and implement those two methods.
         * @todo 'close' lever that disables functionality once closed.
         */


        var PreloadFile = function (BaseFile$$1) {
          function PreloadFile(_fs, _path, _flag, _stat, contents) {
            BaseFile$$1.call(this);
            this._pos = 0;
            this._dirty = false;
            this._fs = _fs;
            this._path = _path;
            this._flag = _flag;
            this._stat = _stat;

            if (contents) {
              this._buffer = contents;
            } else {
              // Empty buffer. It'll expand once we write stuff to it.
              this._buffer = emptyBuffer();
            } // Note: This invariant is *not* maintained once the file starts getting
            // modified.
            // Note: Only actually matters if file is readable, as writeable modes may
            // truncate/append to file.


            if (this._stat.size !== this._buffer.length && this._flag.isReadable()) {
              throw new Error("Invalid buffer: Buffer is " + this._buffer.length + " long, yet Stats object specifies that file is " + this._stat.size + " long.");
            }
          }

          if (BaseFile$$1) PreloadFile.__proto__ = BaseFile$$1;
          PreloadFile.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
          PreloadFile.prototype.constructor = PreloadFile;
          /**
           * NONSTANDARD: Get the underlying buffer for this file. !!DO NOT MUTATE!! Will mess up dirty tracking.
           */

          PreloadFile.prototype.getBuffer = function getBuffer() {
            return this._buffer;
          };
          /**
           * NONSTANDARD: Get underlying stats for this file. !!DO NOT MUTATE!!
           */


          PreloadFile.prototype.getStats = function getStats() {
            return this._stat;
          };

          PreloadFile.prototype.getFlag = function getFlag() {
            return this._flag;
          };
          /**
           * Get the path to this file.
           * @return [String] The path to the file.
           */


          PreloadFile.prototype.getPath = function getPath() {
            return this._path;
          };
          /**
           * Get the current file position.
           *
           * We emulate the following bug mentioned in the Node documentation:
           * > On Linux, positional writes don't work when the file is opened in append
           *   mode. The kernel ignores the position argument and always appends the data
           *   to the end of the file.
           * @return [Number] The current file position.
           */


          PreloadFile.prototype.getPos = function getPos() {
            if (this._flag.isAppendable()) {
              return this._stat.size;
            }

            return this._pos;
          };
          /**
           * Advance the current file position by the indicated number of positions.
           * @param [Number] delta
           */


          PreloadFile.prototype.advancePos = function advancePos(delta) {
            return this._pos += delta;
          };
          /**
           * Set the file position.
           * @param [Number] newPos
           */


          PreloadFile.prototype.setPos = function setPos(newPos) {
            return this._pos = newPos;
          };
          /**
           * **Core**: Asynchronous sync. Must be implemented by subclasses of this
           * class.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.sync = function sync(cb) {
            try {
              this.syncSync();
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * **Core**: Synchronous sync.
           */


          PreloadFile.prototype.syncSync = function syncSync() {
            throw new ApiError(ErrorCode.ENOTSUP);
          };
          /**
           * **Core**: Asynchronous close. Must be implemented by subclasses of this
           * class.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.close = function close(cb) {
            try {
              this.closeSync();
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * **Core**: Synchronous close.
           */


          PreloadFile.prototype.closeSync = function closeSync() {
            throw new ApiError(ErrorCode.ENOTSUP);
          };
          /**
           * Asynchronous `stat`.
           * @param [Function(BrowserFS.ApiError, BrowserFS.node.fs.Stats)] cb
           */


          PreloadFile.prototype.stat = function stat(cb) {
            try {
              cb(null, this._stat.clone());
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Synchronous `stat`.
           */


          PreloadFile.prototype.statSync = function statSync() {
            return this._stat.clone();
          };
          /**
           * Asynchronous truncate.
           * @param [Number] len
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.truncate = function truncate(len, cb) {
            try {
              this.truncateSync(len);

              if (this._flag.isSynchronous() && !_fsMock.getRootFS().supportsSynch()) {
                this.sync(cb);
              }

              cb();
            } catch (e) {
              return cb(e);
            }
          };
          /**
           * Synchronous truncate.
           * @param [Number] len
           */


          PreloadFile.prototype.truncateSync = function truncateSync(len) {
            this._dirty = true;

            if (!this._flag.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
            }

            this._stat.mtime = new Date();

            if (len > this._buffer.length) {
              var buf = Buffer.alloc(len - this._buffer.length, 0); // Write will set @_stat.size for us.

              this.writeSync(buf, 0, buf.length, this._buffer.length);

              if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
                this.syncSync();
              }

              return;
            }

            this._stat.size = len; // Truncate buffer to 'len'.

            var newBuff = Buffer.alloc(len);

            this._buffer.copy(newBuff, 0, 0, len);

            this._buffer = newBuff;

            if (this._flag.isSynchronous() && _fsMock.getRootFS().supportsSynch()) {
              this.syncSync();
            }
          };
          /**
           * Write buffer to the file.
           * Note that it is unsafe to use fs.write multiple times on the same file
           * without waiting for the callback.
           * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
           *  the file.
           * @param [Number] offset Offset in the buffer to start reading data from.
           * @param [Number] length The amount of bytes to write to the file.
           * @param [Number] position Offset from the beginning of the file where this
           *   data should be written. If position is null, the data will be written at
           *   the current position.
           * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)]
           *   cb The number specifies the number of bytes written into the file.
           */


          PreloadFile.prototype.write = function write(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Write buffer to the file.
           * Note that it is unsafe to use fs.writeSync multiple times on the same file
           * without waiting for the callback.
           * @param [BrowserFS.node.Buffer] buffer Buffer containing the data to write to
           *  the file.
           * @param [Number] offset Offset in the buffer to start reading data from.
           * @param [Number] length The amount of bytes to write to the file.
           * @param [Number] position Offset from the beginning of the file where this
           *   data should be written. If position is null, the data will be written at
           *   the current position.
           * @return [Number]
           */


          PreloadFile.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
            this._dirty = true;

            if (position === undefined || position === null) {
              position = this.getPos();
            }

            if (!this._flag.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a writeable mode.');
            }

            var endFp = position + length;

            if (endFp > this._stat.size) {
              this._stat.size = endFp;

              if (endFp > this._buffer.length) {
                // Extend the buffer!
                var newBuff = Buffer.alloc(endFp);

                this._buffer.copy(newBuff);

                this._buffer = newBuff;
              }
            }

            var len = buffer$$1.copy(this._buffer, position, offset, offset + length);
            this._stat.mtime = new Date();

            if (this._flag.isSynchronous()) {
              this.syncSync();
              return len;
            }

            this.setPos(position + len);
            return len;
          };
          /**
           * Read data from the file.
           * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
           *   written to.
           * @param [Number] offset The offset within the buffer where writing will
           *   start.
           * @param [Number] length An integer specifying the number of bytes to read.
           * @param [Number] position An integer specifying where to begin reading from
           *   in the file. If position is null, data will be read from the current file
           *   position.
           * @param [Function(BrowserFS.ApiError, Number, BrowserFS.node.Buffer)] cb The
           *   number is the number of bytes read
           */


          PreloadFile.prototype.read = function read(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Read data from the file.
           * @param [BrowserFS.node.Buffer] buffer The buffer that the data will be
           *   written to.
           * @param [Number] offset The offset within the buffer where writing will
           *   start.
           * @param [Number] length An integer specifying the number of bytes to read.
           * @param [Number] position An integer specifying where to begin reading from
           *   in the file. If position is null, data will be read from the current file
           *   position.
           * @return [Number]
           */


          PreloadFile.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
            if (!this._flag.isReadable()) {
              throw new ApiError(ErrorCode.EPERM, 'File not opened with a readable mode.');
            }

            if (position === undefined || position === null) {
              position = this.getPos();
            }

            var endRead = position + length;

            if (endRead > this._stat.size) {
              length = this._stat.size - position;
            }

            var rv = this._buffer.copy(buffer$$1, offset, position, position + length);

            this._stat.atime = new Date();
            this._pos = position + length;
            return rv;
          };
          /**
           * Asynchronous `fchmod`.
           * @param [Number|String] mode
           * @param [Function(BrowserFS.ApiError)] cb
           */


          PreloadFile.prototype.chmod = function chmod(mode, cb) {
            try {
              this.chmodSync(mode);
              cb();
            } catch (e) {
              cb(e);
            }
          };
          /**
           * Asynchronous `fchmod`.
           * @param [Number] mode
           */


          PreloadFile.prototype.chmodSync = function chmodSync(mode) {
            if (!this._fs.supportsProps()) {
              throw new ApiError(ErrorCode.ENOTSUP);
            }

            this._dirty = true;

            this._stat.chmod(mode);

            this.syncSync();
          };

          PreloadFile.prototype.isDirty = function isDirty() {
            return this._dirty;
          };
          /**
           * Resets the dirty bit. Should only be called after a sync has completed successfully.
           */


          PreloadFile.prototype.resetDirty = function resetDirty() {
            this._dirty = false;
          };

          return PreloadFile;
        }(BaseFile);
        /**
         * File class for the InMemory and XHR file systems.
         * Doesn't sync to anything, so it works nicely for memory-only files.
         */


        var NoSyncFile = function (PreloadFile) {
          function NoSyncFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile) NoSyncFile.__proto__ = PreloadFile;
          NoSyncFile.prototype = Object.create(PreloadFile && PreloadFile.prototype);
          NoSyncFile.prototype.constructor = NoSyncFile;
          /**
           * Asynchronous sync. Doesn't do anything, simply calls the cb.
           * @param [Function(BrowserFS.ApiError)] cb
           */

          NoSyncFile.prototype.sync = function sync(cb) {
            cb();
          };
          /**
           * Synchronous sync. Doesn't do anything.
           */


          NoSyncFile.prototype.syncSync = function syncSync() {// NOP.
          };
          /**
           * Asynchronous close. Doesn't do anything, simply calls the cb.
           * @param [Function(BrowserFS.ApiError)] cb
           */


          NoSyncFile.prototype.close = function close(cb) {
            cb();
          };
          /**
           * Synchronous close. Doesn't do anything.
           */


          NoSyncFile.prototype.closeSync = function closeSync() {// NOP.
          };

          return NoSyncFile;
        }(PreloadFile);
        /**
         * We define our own file to interpose on syncSync() for mirroring purposes.
         */


        var MirrorFile = function (PreloadFile$$1) {
          function MirrorFile(fs, path$$1, flag, stat, data) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stat, data);
          }

          if (PreloadFile$$1) MirrorFile.__proto__ = PreloadFile$$1;
          MirrorFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          MirrorFile.prototype.constructor = MirrorFile;

          MirrorFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this);

              this.resetDirty();
            }
          };

          MirrorFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return MirrorFile;
        }(PreloadFile);
        /**
         * AsyncMirrorFS mirrors a synchronous filesystem into an asynchronous filesystem
         * by:
         *
         * * Performing operations over the in-memory copy, while asynchronously pipelining them
         *   to the backing store.
         * * During application loading, the contents of the async file system can be reloaded into
         *   the synchronous store, if desired.
         *
         * The two stores will be kept in sync. The most common use-case is to pair a synchronous
         * in-memory filesystem with an asynchronous backing store.
         *
         * Example: Mirroring an IndexedDB file system to an in memory file system. Now, you can use
         * IndexedDB synchronously.
         *
         * ```javascript
         * BrowserFS.configure({
         *   fs: "AsyncMirror",
         *   options: {
         *     sync: { fs: "InMemory" },
         *     async: { fs: "IndexedDB" }
         *   }
         * }, function(e) {
         *   // BrowserFS is initialized and ready-to-use!
         * });
         * ```
         *
         * Or, alternatively:
         *
         * ```javascript
         * BrowserFS.FileSystem.IndexedDB.Create(function(e, idbfs) {
         *   BrowserFS.FileSystem.InMemory.Create(function(e, inMemory) {
         *     BrowserFS.FileSystem.AsyncMirror({
         *       sync: inMemory, async: idbfs
         *     }, function(e, mirrored) {
         *       BrowserFS.initialize(mirrored);
         *     });
         *   });
         * });
         * ```
         */


        var AsyncMirror = function (SynchronousFileSystem$$1) {
          function AsyncMirror(sync, async, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            /**
             * Queue of pending asynchronous operations.
             */

            this._queue = [];
            this._queueRunning = false;
            this._isInitialized = false;
            this._initializeCallbacks = [];
            this._sync = sync;
            this._async = async;

            if (!sync.supportsSynch()) {
              throw new Error("The first argument to AsyncMirror needs to be a synchronous file system.");
            }

            deprecationMessage(deprecateMsg, AsyncMirror.Name, {
              sync: "sync file system instance",
              async: "async file system instance"
            });
          }

          if (SynchronousFileSystem$$1) AsyncMirror.__proto__ = SynchronousFileSystem$$1;
          AsyncMirror.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          AsyncMirror.prototype.constructor = AsyncMirror;
          /**
           * Constructs and initializes an AsyncMirror file system with the given options.
           */

          AsyncMirror.Create = function Create(opts, cb) {
            try {
              var fs = new AsyncMirror(opts.sync, opts.async, false);
              fs.initialize(function (e) {
                if (e) {
                  cb(e);
                } else {
                  cb(null, fs);
                }
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          AsyncMirror.isAvailable = function isAvailable() {
            return true;
          };

          AsyncMirror.prototype.getName = function getName() {
            return AsyncMirror.Name;
          };

          AsyncMirror.prototype._syncSync = function _syncSync(fd) {
            this._sync.writeFileSync(fd.getPath(), fd.getBuffer(), null, FileFlag.getFileFlag('w'), fd.getStats().mode);

            this.enqueueOp({
              apiMethod: 'writeFile',
              arguments: [fd.getPath(), fd.getBuffer(), null, fd.getFlag(), fd.getStats().mode]
            });
          };
          /**
           * Called once to load up files from async storage into sync storage.
           */


          AsyncMirror.prototype.initialize = function initialize(userCb, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[AsyncMirror] AsyncMirror.initialize() is deprecated and will be removed in the next major version. Please use 'AsyncMirror.Create({ sync: (sync file system instance), async: (async file system instance)}, cb)' to create and initialize AsyncMirror instances.");
            }

            var callbacks = this._initializeCallbacks;

            var end = function (e) {
              this$1._isInitialized = !e;
              this$1._initializeCallbacks = [];
              callbacks.forEach(function (cb) {
                return cb(e);
              });
            };

            if (!this._isInitialized) {
              // First call triggers initialization, the rest wait.
              if (callbacks.push(userCb) === 1) {
                var copyDirectory = function (p, mode, cb) {
                  if (p !== '/') {
                    this$1._sync.mkdirSync(p, mode);
                  }

                  this$1._async.readdir(p, function (err, files) {
                    var i = 0; // NOTE: This function must not be in a lexically nested statement,
                    // such as an if or while statement. Safari refuses to run the
                    // script since it is undefined behavior.

                    function copyNextFile(err) {
                      if (err) {
                        cb(err);
                      } else if (i < files.length) {
                        copyItem(path.join(p, files[i]), copyNextFile);
                        i++;
                      } else {
                        cb();
                      }
                    }

                    if (err) {
                      cb(err);
                    } else {
                      copyNextFile();
                    }
                  });
                },
                    copyFile = function (p, mode, cb) {
                  this$1._async.readFile(p, null, FileFlag.getFileFlag('r'), function (err, data) {
                    if (err) {
                      cb(err);
                    } else {
                      try {
                        this$1._sync.writeFileSync(p, data, null, FileFlag.getFileFlag('w'), mode);
                      } catch (e) {
                        err = e;
                      } finally {
                        cb(err);
                      }
                    }
                  });
                },
                    copyItem = function (p, cb) {
                  this$1._async.stat(p, false, function (err, stats) {
                    if (err) {
                      cb(err);
                    } else if (stats.isDirectory()) {
                      copyDirectory(p, stats.mode, cb);
                    } else {
                      copyFile(p, stats.mode, cb);
                    }
                  });
                };

                copyDirectory('/', 0, end);
              }
            } else {
              userCb();
            }
          };

          AsyncMirror.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          AsyncMirror.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          AsyncMirror.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          AsyncMirror.prototype.supportsProps = function supportsProps() {
            return this._sync.supportsProps() && this._async.supportsProps();
          };

          AsyncMirror.prototype.renameSync = function renameSync(oldPath, newPath) {
            this.checkInitialized();

            this._sync.renameSync(oldPath, newPath);

            this.enqueueOp({
              apiMethod: 'rename',
              arguments: [oldPath, newPath]
            });
          };

          AsyncMirror.prototype.statSync = function statSync(p, isLstat) {
            this.checkInitialized();
            return this._sync.statSync(p, isLstat);
          };

          AsyncMirror.prototype.openSync = function openSync(p, flag, mode) {
            this.checkInitialized(); // Sanity check: Is this open/close permitted?

            var fd = this._sync.openSync(p, flag, mode);

            fd.closeSync();
            return new MirrorFile(this, p, flag, this._sync.statSync(p, false), this._sync.readFileSync(p, null, FileFlag.getFileFlag('r')));
          };

          AsyncMirror.prototype.unlinkSync = function unlinkSync(p) {
            this.checkInitialized();

            this._sync.unlinkSync(p);

            this.enqueueOp({
              apiMethod: 'unlink',
              arguments: [p]
            });
          };

          AsyncMirror.prototype.rmdirSync = function rmdirSync(p) {
            this.checkInitialized();

            this._sync.rmdirSync(p);

            this.enqueueOp({
              apiMethod: 'rmdir',
              arguments: [p]
            });
          };

          AsyncMirror.prototype.mkdirSync = function mkdirSync(p, mode) {
            this.checkInitialized();

            this._sync.mkdirSync(p, mode);

            this.enqueueOp({
              apiMethod: 'mkdir',
              arguments: [p, mode]
            });
          };

          AsyncMirror.prototype.readdirSync = function readdirSync(p) {
            this.checkInitialized();
            return this._sync.readdirSync(p);
          };

          AsyncMirror.prototype.existsSync = function existsSync(p) {
            this.checkInitialized();
            return this._sync.existsSync(p);
          };

          AsyncMirror.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            this.checkInitialized();

            this._sync.chmodSync(p, isLchmod, mode);

            this.enqueueOp({
              apiMethod: 'chmod',
              arguments: [p, isLchmod, mode]
            });
          };

          AsyncMirror.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            this.checkInitialized();

            this._sync.chownSync(p, isLchown, uid, gid);

            this.enqueueOp({
              apiMethod: 'chown',
              arguments: [p, isLchown, uid, gid]
            });
          };

          AsyncMirror.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            this.checkInitialized();

            this._sync.utimesSync(p, atime, mtime);

            this.enqueueOp({
              apiMethod: 'utimes',
              arguments: [p, atime, mtime]
            });
          };

          AsyncMirror.prototype.checkInitialized = function checkInitialized() {
            if (!this._isInitialized) {
              throw new ApiError(ErrorCode.EPERM, "AsyncMirrorFS is not initialized. Please initialize AsyncMirrorFS using its initialize() method before using it.");
            }
          };

          AsyncMirror.prototype.enqueueOp = function enqueueOp(op) {
            var this$1 = this;

            this._queue.push(op);

            if (!this._queueRunning) {
              this._queueRunning = true;

              var doNextOp = function (err) {
                if (err) {
                  console.error("WARNING: File system has desynchronized. Received following error: " + err + "\n$");
                }

                if (this$1._queue.length > 0) {
                  var op = this$1._queue.shift(),
                      args = op.arguments;

                  args.push(doNextOp);

                  this$1._async[op.apiMethod].apply(this$1._async, args);
                } else {
                  this$1._queueRunning = false;
                }
              };

              doNextOp();
            }
          };

          return AsyncMirror;
        }(SynchronousFileSystem);

        AsyncMirror.Name = "AsyncMirror";
        AsyncMirror.Options = {
          sync: {
            type: "object",
            description: "The synchronous file system to mirror the asynchronous file system to."
          },
          async: {
            type: "object",
            description: "The asynchronous file system to mirror."
          }
        };
        /**
         * A faster alternative to `Function#apply`, this function invokes `func`
         * with the `this` binding of `thisArg` and the arguments of `args`.
         *
         * @private
         * @param {Function} func The function to invoke.
         * @param {*} thisArg The `this` binding of `func`.
         * @param {Array} args The arguments to invoke `func` with.
         * @returns {*} Returns the result of `func`.
         */

        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);

            case 1:
              return func.call(thisArg, args[0]);

            case 2:
              return func.call(thisArg, args[0], args[1]);

            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }

          return func.apply(thisArg, args);
        }
        /* Built-in method references for those with the same name as other `lodash` methods. */


        var nativeMax = Math.max;
        /**
         * A specialized version of `baseRest` which transforms the rest array.
         *
         * @private
         * @param {Function} func The function to apply a rest parameter to.
         * @param {number} [start=func.length-1] The start position of the rest parameter.
         * @param {Function} transform The rest array transform.
         * @returns {Function} Returns the new function.
         */

        function overRest$1(func, start, transform) {
          start = nativeMax(start === undefined ? func.length - 1 : start, 0);
          return function () {
            var args = arguments,
                index = -1,
                length = nativeMax(args.length - start, 0),
                array = Array(length);

            while (++index < length) {
              array[index] = args[start + index];
            }

            index = -1;
            var otherArgs = Array(start + 1);

            while (++index < start) {
              otherArgs[index] = args[index];
            }

            otherArgs[start] = transform(array);
            return apply(func, this, otherArgs);
          };
        }
        /**
         * This method returns the first argument it receives.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Util
         * @param {*} value Any value.
         * @returns {*} Returns `value`.
         * @example
         *
         * var object = { 'a': 1 };
         *
         * console.log(_.identity(object) === object);
         * // => true
         */


        function identity(value) {
          return value;
        } // Lodash rest function without function.toString()
        // remappings


        function rest(func, start) {
          return overRest$1(func, start, identity);
        }

        var initialParams = function (fn) {
          return rest(function (args
          /*..., callback*/
          ) {
            var callback = args.pop();
            fn.call(this, args, callback);
          });
        };

        function applyEach$1(eachfn) {
          return rest(function (fns, args) {
            var go = initialParams(function (args, callback) {
              var that = this;
              return eachfn(fns, function (fn, cb) {
                fn.apply(that, args.concat(cb));
              }, callback);
            });

            if (args.length) {
              return go.apply(this, args);
            } else {
              return go;
            }
          });
        }
        /** Detect free variable `global` from Node.js. */


        var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
        /** Detect free variable `self`. */

        var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
        /** Used as a reference to the global object. */

        var root = freeGlobal || freeSelf || Function('return this')();
        /** Built-in value references. */

        var Symbol$1 = root.Symbol;
        /** Used for built-in method references. */

        var objectProto = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty = objectProto.hasOwnProperty;
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */

        var nativeObjectToString = objectProto.toString;
        /** Built-in value references. */

        var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;
        /**
         * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the raw `toStringTag`.
         */

        function getRawTag(value) {
          var isOwn = hasOwnProperty.call(value, symToStringTag$1),
              tag = value[symToStringTag$1];

          try {
            value[symToStringTag$1] = undefined;
            var unmasked = true;
          } catch (e) {}

          var result = nativeObjectToString.call(value);

          if (unmasked) {
            if (isOwn) {
              value[symToStringTag$1] = tag;
            } else {
              delete value[symToStringTag$1];
            }
          }

          return result;
        }
        /** Used for built-in method references. */


        var objectProto$1 = Object.prototype;
        /**
         * Used to resolve the
         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
         * of values.
         */

        var nativeObjectToString$1 = objectProto$1.toString;
        /**
         * Converts `value` to a string using `Object.prototype.toString`.
         *
         * @private
         * @param {*} value The value to convert.
         * @returns {string} Returns the converted string.
         */

        function objectToString(value) {
          return nativeObjectToString$1.call(value);
        }
        /** `Object#toString` result references. */


        var nullTag = '[object Null]';
        var undefinedTag = '[object Undefined]';
        /** Built-in value references. */

        var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;
        /**
         * The base implementation of `getTag` without fallbacks for buggy environments.
         *
         * @private
         * @param {*} value The value to query.
         * @returns {string} Returns the `toStringTag`.
         */

        function baseGetTag(value) {
          if (value == null) {
            return value === undefined ? undefinedTag : nullTag;
          }

          return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        /**
         * Checks if `value` is the
         * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
         * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an object, else `false`.
         * @example
         *
         * _.isObject({});
         * // => true
         *
         * _.isObject([1, 2, 3]);
         * // => true
         *
         * _.isObject(_.noop);
         * // => true
         *
         * _.isObject(null);
         * // => false
         */


        function isObject(value) {
          var type = typeof value;
          return value != null && (type == 'object' || type == 'function');
        }
        /** `Object#toString` result references. */


        var asyncTag = '[object AsyncFunction]';
        var funcTag = '[object Function]';
        var genTag = '[object GeneratorFunction]';
        var proxyTag = '[object Proxy]';
        /**
         * Checks if `value` is classified as a `Function` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a function, else `false`.
         * @example
         *
         * _.isFunction(_);
         * // => true
         *
         * _.isFunction(/abc/);
         * // => false
         */

        function isFunction(value) {
          if (!isObject(value)) {
            return false;
          } // The use of `Object#toString` avoids issues with the `typeof` operator
          // in Safari 9 which returns 'object' for typed arrays and other constructors.


          var tag = baseGetTag(value);
          return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /** Used as references for various `Number` constants. */


        var MAX_SAFE_INTEGER = 9007199254740991;
        /**
         * Checks if `value` is a valid array-like length.
         *
         * **Note:** This method is loosely based on
         * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
         * @example
         *
         * _.isLength(3);
         * // => true
         *
         * _.isLength(Number.MIN_VALUE);
         * // => false
         *
         * _.isLength(Infinity);
         * // => false
         *
         * _.isLength('3');
         * // => false
         */

        function isLength(value) {
          return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
         * Checks if `value` is array-like. A value is considered array-like if it's
         * not a function and has a `value.length` that's an integer greater than or
         * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
         * @example
         *
         * _.isArrayLike([1, 2, 3]);
         * // => true
         *
         * _.isArrayLike(document.body.children);
         * // => true
         *
         * _.isArrayLike('abc');
         * // => true
         *
         * _.isArrayLike(_.noop);
         * // => false
         */


        function isArrayLike(value) {
          return value != null && isLength(value.length) && !isFunction(value);
        } // A temporary value used to identify if the loop should be broken.
        // See #1064, #1293


        var breakLoop = {};
        /**
         * This method returns `undefined`.
         *
         * @static
         * @memberOf _
         * @since 2.3.0
         * @category Util
         * @example
         *
         * _.times(2, _.noop);
         * // => [undefined, undefined]
         */

        function noop() {// No operation performed.
        }

        function once(fn) {
          return function () {
            if (fn === null) {
              return;
            }

            var callFn = fn;
            fn = null;
            callFn.apply(this, arguments);
          };
        }

        var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;

        var getIterator = function (coll) {
          return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
        };
        /**
         * The base implementation of `_.times` without support for iteratee shorthands
         * or max array length checks.
         *
         * @private
         * @param {number} n The number of times to invoke `iteratee`.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the array of results.
         */


        function baseTimes(n, iteratee) {
          var index = -1,
              result = Array(n);

          while (++index < n) {
            result[index] = iteratee(index);
          }

          return result;
        }
        /**
         * Checks if `value` is object-like. A value is object-like if it's not `null`
         * and has a `typeof` result of "object".
         *
         * @static
         * @memberOf _
         * @since 4.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
         * @example
         *
         * _.isObjectLike({});
         * // => true
         *
         * _.isObjectLike([1, 2, 3]);
         * // => true
         *
         * _.isObjectLike(_.noop);
         * // => false
         *
         * _.isObjectLike(null);
         * // => false
         */


        function isObjectLike(value) {
          return value != null && typeof value == 'object';
        }
        /** `Object#toString` result references. */


        var argsTag = '[object Arguments]';
        /**
         * The base implementation of `_.isArguments`.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         */

        function baseIsArguments(value) {
          return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /** Used for built-in method references. */


        var objectProto$3 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$2 = objectProto$3.hasOwnProperty;
        /** Built-in value references. */

        var propertyIsEnumerable = objectProto$3.propertyIsEnumerable;
        /**
         * Checks if `value` is likely an `arguments` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an `arguments` object,
         *  else `false`.
         * @example
         *
         * _.isArguments(function() { return arguments; }());
         * // => true
         *
         * _.isArguments([1, 2, 3]);
         * // => false
         */

        var isArguments = baseIsArguments(function () {
          return arguments;
        }()) ? baseIsArguments : function (value) {
          return isObjectLike(value) && hasOwnProperty$2.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        /**
         * Checks if `value` is classified as an `Array` object.
         *
         * @static
         * @memberOf _
         * @since 0.1.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is an array, else `false`.
         * @example
         *
         * _.isArray([1, 2, 3]);
         * // => true
         *
         * _.isArray(document.body.children);
         * // => false
         *
         * _.isArray('abc');
         * // => false
         *
         * _.isArray(_.noop);
         * // => false
         */

        var isArray = Array.isArray;
        /**
         * This method returns `false`.
         *
         * @static
         * @memberOf _
         * @since 4.13.0
         * @category Util
         * @returns {boolean} Returns `false`.
         * @example
         *
         * _.times(2, _.stubFalse);
         * // => [false, false]
         */

        function stubFalse() {
          return false;
        }
        /** Detect free variable `exports`. */


        var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports = freeModule && freeModule.exports === freeExports;
        /** Built-in value references. */

        var Buffer$1 = moduleExports ? root.Buffer : undefined;
        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeIsBuffer = Buffer$1 ? Buffer$1.isBuffer : undefined;
        /**
         * Checks if `value` is a buffer.
         *
         * @static
         * @memberOf _
         * @since 4.3.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
         * @example
         *
         * _.isBuffer(new Buffer(2));
         * // => true
         *
         * _.isBuffer(new Uint8Array(2));
         * // => false
         */

        var isBuffer = nativeIsBuffer || stubFalse;
        /** Used as references for various `Number` constants. */

        var MAX_SAFE_INTEGER$1 = 9007199254740991;
        /** Used to detect unsigned integer values. */

        var reIsUint = /^(?:0|[1-9]\d*)$/;
        /**
         * Checks if `value` is a valid array-like index.
         *
         * @private
         * @param {*} value The value to check.
         * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
         * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
         */

        function isIndex(value, length) {
          length = length == null ? MAX_SAFE_INTEGER$1 : length;
          return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /** `Object#toString` result references. */


        var argsTag$1 = '[object Arguments]';
        var arrayTag = '[object Array]';
        var boolTag = '[object Boolean]';
        var dateTag = '[object Date]';
        var errorTag = '[object Error]';
        var funcTag$1 = '[object Function]';
        var mapTag = '[object Map]';
        var numberTag = '[object Number]';
        var objectTag = '[object Object]';
        var regexpTag = '[object RegExp]';
        var setTag = '[object Set]';
        var stringTag = '[object String]';
        var weakMapTag = '[object WeakMap]';
        var arrayBufferTag = '[object ArrayBuffer]';
        var dataViewTag = '[object DataView]';
        var float32Tag = '[object Float32Array]';
        var float64Tag = '[object Float64Array]';
        var int8Tag = '[object Int8Array]';
        var int16Tag = '[object Int16Array]';
        var int32Tag = '[object Int32Array]';
        var uint8Tag = '[object Uint8Array]';
        var uint8ClampedTag = '[object Uint8ClampedArray]';
        var uint16Tag = '[object Uint16Array]';
        var uint32Tag = '[object Uint32Array]';
        /** Used to identify `toStringTag` values of typed arrays. */

        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        /**
         * The base implementation of `_.isTypedArray` without Node.js optimizations.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         */

        function baseIsTypedArray(value) {
          return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
         * The base implementation of `_.unary` without support for storing metadata.
         *
         * @private
         * @param {Function} func The function to cap arguments for.
         * @returns {Function} Returns the new capped function.
         */


        function baseUnary(func) {
          return function (value) {
            return func(value);
          };
        }
        /** Detect free variable `exports`. */


        var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;
        /** Detect free variable `module`. */

        var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;
        /** Detect the popular CommonJS extension `module.exports`. */

        var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;
        /** Detect free variable `process` from Node.js. */

        var freeProcess = moduleExports$1 && freeGlobal.process;
        /** Used to access faster Node.js helpers. */

        var nodeUtil = function () {
          try {
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
          } catch (e) {}
        }();
        /* Node.js helper references. */


        var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        /**
         * Checks if `value` is classified as a typed array.
         *
         * @static
         * @memberOf _
         * @since 3.0.0
         * @category Lang
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
         * @example
         *
         * _.isTypedArray(new Uint8Array);
         * // => true
         *
         * _.isTypedArray([]);
         * // => false
         */

        var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /** Used for built-in method references. */

        var objectProto$2 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$1 = objectProto$2.hasOwnProperty;
        /**
         * Creates an array of the enumerable property names of the array-like `value`.
         *
         * @private
         * @param {*} value The value to query.
         * @param {boolean} inherited Specify returning inherited property names.
         * @returns {Array} Returns the array of property names.
         */

        function arrayLikeKeys(value, inherited) {
          var isArr = isArray(value),
              isArg = !isArr && isArguments(value),
              isBuff = !isArr && !isArg && isBuffer(value),
              isType = !isArr && !isArg && !isBuff && isTypedArray(value),
              skipIndexes = isArr || isArg || isBuff || isType,
              result = skipIndexes ? baseTimes(value.length, String) : [],
              length = result.length;

          for (var key in value) {
            if ((inherited || hasOwnProperty$1.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
            key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
            isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
            isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
            isIndex(key, length)))) {
              result.push(key);
            }
          }

          return result;
        }
        /** Used for built-in method references. */


        var objectProto$5 = Object.prototype;
        /**
         * Checks if `value` is likely a prototype object.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
         */

        function isPrototype(value) {
          var Ctor = value && value.constructor,
              proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$5;
          return value === proto;
        }
        /**
         * Creates a unary function that invokes `func` with its argument transformed.
         *
         * @private
         * @param {Function} func The function to wrap.
         * @param {Function} transform The argument transform.
         * @returns {Function} Returns the new function.
         */


        function overArg(func, transform) {
          return function (arg) {
            return func(transform(arg));
          };
        }
        /* Built-in method references for those with the same name as other `lodash` methods. */


        var nativeKeys = overArg(Object.keys, Object);
        /** Used for built-in method references. */

        var objectProto$4 = Object.prototype;
        /** Used to check objects for own properties. */

        var hasOwnProperty$3 = objectProto$4.hasOwnProperty;
        /**
         * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
         *
         * @private
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         */

        function baseKeys(object) {
          if (!isPrototype(object)) {
            return nativeKeys(object);
          }

          var result = [];

          for (var key in Object(object)) {
            if (hasOwnProperty$3.call(object, key) && key != 'constructor') {
              result.push(key);
            }
          }

          return result;
        }
        /**
         * Creates an array of the own enumerable property names of `object`.
         *
         * **Note:** Non-object values are coerced to objects. See the
         * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
         * for more details.
         *
         * @static
         * @since 0.1.0
         * @memberOf _
         * @category Object
         * @param {Object} object The object to query.
         * @returns {Array} Returns the array of property names.
         * @example
         *
         * function Foo() {
         *   this.a = 1;
         *   this.b = 2;
         * }
         *
         * Foo.prototype.c = 3;
         *
         * _.keys(new Foo);
         * // => ['a', 'b'] (iteration order is not guaranteed)
         *
         * _.keys('hi');
         * // => ['0', '1']
         */


        function keys(object) {
          return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }

        function createArrayIterator(coll) {
          var i = -1;
          var len = coll.length;
          return function next() {
            return ++i < len ? {
              value: coll[i],
              key: i
            } : null;
          };
        }

        function createES2015Iterator(iterator) {
          var i = -1;
          return function next() {
            var item = iterator.next();

            if (item.done) {
              return null;
            }

            i++;
            return {
              value: item.value,
              key: i
            };
          };
        }

        function createObjectIterator(obj) {
          var okeys = keys(obj);
          var i = -1;
          var len = okeys.length;
          return function next() {
            var key = okeys[++i];
            return i < len ? {
              value: obj[key],
              key: key
            } : null;
          };
        }

        function iterator(coll) {
          if (isArrayLike(coll)) {
            return createArrayIterator(coll);
          }

          var iterator = getIterator(coll);
          return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);
        }

        function onlyOnce(fn) {
          return function () {
            if (fn === null) {
              throw new Error("Callback was already called.");
            }

            var callFn = fn;
            fn = null;
            callFn.apply(this, arguments);
          };
        }

        function _eachOfLimit(limit) {
          return function (obj, iteratee, callback) {
            callback = once(callback || noop);

            if (limit <= 0 || !obj) {
              return callback(null);
            }

            var nextElem = iterator(obj);
            var done = false;
            var running = 0;

            function iterateeCallback(err, value) {
              running -= 1;

              if (err) {
                done = true;
                callback(err);
              } else if (value === breakLoop || done && running <= 0) {
                done = true;
                return callback(null);
              } else {
                replenish();
              }
            }

            function replenish() {
              while (running < limit && !done) {
                var elem = nextElem();

                if (elem === null) {
                  done = true;

                  if (running <= 0) {
                    callback(null);
                  }

                  return;
                }

                running += 1;
                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));
              }
            }

            replenish();
          };
        }
        /**
         * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name eachOfLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.eachOf]{@link module:Collections.eachOf}
         * @alias forEachOfLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The `key` is the item's key, or index in the case of an
         * array. The iteratee is passed a `callback(err)` which must be called once it
         * has completed. If no error has occurred, the callback should be run without
         * arguments or with an explicit `null` argument. Invoked with
         * (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         */


        function eachOfLimit(coll, limit, iteratee, callback) {
          _eachOfLimit(limit)(coll, iteratee, callback);
        }

        function doLimit(fn, limit) {
          return function (iterable, iteratee, callback) {
            return fn(iterable, limit, iteratee, callback);
          };
        } // eachOf implementation optimized for array-likes


        function eachOfArrayLike(coll, iteratee, callback) {
          callback = once(callback || noop);
          var index = 0,
              completed = 0,
              length = coll.length;

          if (length === 0) {
            callback(null);
          }

          function iteratorCallback(err, value) {
            if (err) {
              callback(err);
            } else if (++completed === length || value === breakLoop) {
              callback(null);
            }
          }

          for (; index < length; index++) {
            iteratee(coll[index], index, onlyOnce(iteratorCallback));
          }
        } // a generic version of eachOf which can handle array, object, and iterator cases.


        var eachOfGeneric = doLimit(eachOfLimit, Infinity);
        /**
         * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
         * to the iteratee.
         *
         * @name eachOf
         * @static
         * @memberOf module:Collections
         * @method
         * @alias forEachOf
         * @category Collection
         * @see [async.each]{@link module:Collections.each}
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The `key` is the item's key, or index in the case of an
         * array. The iteratee is passed a `callback(err)` which must be called once it
         * has completed. If no error has occurred, the callback should be run without
         * arguments or with an explicit `null` argument. Invoked with
         * (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         * @example
         *
         * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
         * var configs = {};
         *
         * async.forEachOf(obj, function (value, key, callback) {
         *     fs.readFile(__dirname + value, "utf8", function (err, data) {
         *         if (err) return callback(err);
         *         try {
         *             configs[key] = JSON.parse(data);
         *         } catch (e) {
         *             return callback(e);
         *         }
         *         callback();
         *     });
         * }, function (err) {
         *     if (err) console.error(err.message);
         *     // configs is now a map of JSON data
         *     doSomethingWith(configs);
         * });
         */

        var eachOf = function (coll, iteratee, callback) {
          var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;
          eachOfImplementation(coll, iteratee, callback);
        };

        function doParallel(fn) {
          return function (obj, iteratee, callback) {
            return fn(eachOf, obj, iteratee, callback);
          };
        }

        function _asyncMap(eachfn, arr, iteratee, callback) {
          callback = callback || noop;
          arr = arr || [];
          var results = [];
          var counter = 0;
          eachfn(arr, function (value, _, callback) {
            var index = counter++;
            iteratee(value, function (err, v) {
              results[index] = v;
              callback(err);
            });
          }, function (err) {
            callback(err, results);
          });
        }
        /**
         * Produces a new collection of values by mapping each value in `coll` through
         * the `iteratee` function. The `iteratee` is called with an item from `coll`
         * and a callback for when it has finished processing. Each of these callback
         * takes 2 arguments: an `error`, and the transformed item from `coll`. If
         * `iteratee` passes an error to its callback, the main `callback` (for the
         * `map` function) is immediately called with the error.
         *
         * Note, that since this function applies the `iteratee` to each item in
         * parallel, there is no guarantee that the `iteratee` functions will complete
         * in order. However, the results array will be in the same order as the
         * original `coll`.
         *
         * If `map` is passed an Object, the results will be an Array.  The results
         * will roughly be in the order of the original Objects' keys (but this can
         * vary across JavaScript engines)
         *
         * @name map
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an Array of the
         * transformed items from the `coll`. Invoked with (err, results).
         * @example
         *
         * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
         *     // results is now an array of stats for each file
         * });
         */


        var map = doParallel(_asyncMap);
        /**
         * Applies the provided arguments to each function in the array, calling
         * `callback` after all functions have completed. If you only provide the first
         * argument, `fns`, then it will return a function which lets you pass in the
         * arguments as if it were a single function call. If more arguments are
         * provided, `callback` is required while `args` is still optional.
         *
         * @name applyEach
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Array|Iterable|Object} fns - A collection of asynchronous functions
         * to all call with the same arguments
         * @param {...*} [args] - any number of separate arguments to pass to the
         * function.
         * @param {Function} [callback] - the final argument should be the callback,
         * called when all functions have completed processing.
         * @returns {Function} - If only the first argument, `fns`, is provided, it will
         * return a function which lets you pass in the arguments as if it were a single
         * function call. The signature is `(..args, callback)`. If invoked with any
         * arguments, `callback` is required.
         * @example
         *
         * async.applyEach([enableSearch, updateSchema], 'bucket', callback);
         *
         * // partial application example:
         * async.each(
         *     buckets,
         *     async.applyEach([enableSearch, updateSchema]),
         *     callback
         * );
         */

        applyEach$1(map);

        function doParallelLimit(fn) {
          return function (obj, limit, iteratee, callback) {
            return fn(_eachOfLimit(limit), obj, iteratee, callback);
          };
        }
        /**
         * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.
         *
         * @name mapLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a transformed
         * item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an array of the
         * transformed items from the `coll`. Invoked with (err, results).
         */


        var mapLimit = doParallelLimit(_asyncMap);
        /**
         * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.
         *
         * @name mapSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed item. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Results is an array of the
         * transformed items from the `coll`. Invoked with (err, results).
         */

        var mapSeries = doLimit(mapLimit, 1);
        /**
         * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.
         *
         * @name applyEachSeries
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.applyEach]{@link module:ControlFlow.applyEach}
         * @category Control Flow
         * @param {Array|Iterable|Object} fns - A collection of asynchronous functions to all
         * call with the same arguments
         * @param {...*} [args] - any number of separate arguments to pass to the
         * function.
         * @param {Function} [callback] - the final argument should be the callback,
         * called when all functions have completed processing.
         * @returns {Function} - If only the first argument is provided, it will return
         * a function which lets you pass in the arguments as if it were a single
         * function call.
         */

        applyEach$1(mapSeries);
        /**
         * Creates a continuation function with some arguments already applied.
         *
         * Useful as a shorthand when combined with other control flow functions. Any
         * arguments passed to the returned function are added to the arguments
         * originally passed to apply.
         *
         * @name apply
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to. Invokes with (arguments...).
         * @param {...*} arguments... - Any number of arguments to automatically apply
         * when the continuation is called.
         * @example
         *
         * // using apply
         * async.parallel([
         *     async.apply(fs.writeFile, 'testfile1', 'test1'),
         *     async.apply(fs.writeFile, 'testfile2', 'test2')
         * ]);
         *
         *
         * // the same process without using apply
         * async.parallel([
         *     function(callback) {
         *         fs.writeFile('testfile1', 'test1', callback);
         *     },
         *     function(callback) {
         *         fs.writeFile('testfile2', 'test2', callback);
         *     }
         * ]);
         *
         * // It's possible to pass any number of additional arguments when calling the
         * // continuation:
         *
         * node> var fn = async.apply(sys.puts, 'one');
         * node> fn('two', 'three');
         * one
         * two
         * three
         */

        rest(function (fn, args) {
          return rest(function (callArgs) {
            return fn.apply(null, args.concat(callArgs));
          });
        });
        /**
         * A specialized version of `_.forEach` for arrays without support for
         * iteratee shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns `array`.
         */

        function arrayEach(array, iteratee) {
          var index = -1,
              length = array == null ? 0 : array.length;

          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }

          return array;
        }
        /**
         * Creates a base function for methods like `_.forIn` and `_.forOwn`.
         *
         * @private
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {Function} Returns the new base function.
         */


        function createBaseFor(fromRight) {
          return function (object, iteratee, keysFunc) {
            var index = -1,
                iterable = Object(object),
                props = keysFunc(object),
                length = props.length;

            while (length--) {
              var key = props[fromRight ? length : ++index];

              if (iteratee(iterable[key], key, iterable) === false) {
                break;
              }
            }

            return object;
          };
        }
        /**
         * The base implementation of `baseForOwn` which iterates over `object`
         * properties returned by `keysFunc` and invokes `iteratee` for each property.
         * Iteratee functions may exit iteration early by explicitly returning `false`.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @param {Function} keysFunc The function to get the keys of `object`.
         * @returns {Object} Returns `object`.
         */


        var baseFor = createBaseFor();
        /**
         * The base implementation of `_.forOwn` without support for iteratee shorthands.
         *
         * @private
         * @param {Object} object The object to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Object} Returns `object`.
         */

        function baseForOwn(object, iteratee) {
          return object && baseFor(object, iteratee, keys);
        }
        /**
         * The base implementation of `_.findIndex` and `_.findLastIndex` without
         * support for iteratee shorthands.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {Function} predicate The function invoked per iteration.
         * @param {number} fromIndex The index to search from.
         * @param {boolean} [fromRight] Specify iterating from right to left.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length,
              index = fromIndex + (fromRight ? 1 : -1);

          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.isNaN` without support for number objects.
         *
         * @private
         * @param {*} value The value to check.
         * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
         */


        function baseIsNaN(value) {
          return value !== value;
        }
        /**
         * A specialized version of `_.indexOf` which performs strict equality
         * comparisons of values, i.e. `===`.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1,
              length = array.length;

          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }

          return -1;
        }
        /**
         * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
         *
         * @private
         * @param {Array} array The array to inspect.
         * @param {*} value The value to search for.
         * @param {number} fromIndex The index to search from.
         * @returns {number} Returns the index of the matched value, else `-1`.
         */


        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        /**
         * Determines the best order for running the functions in `tasks`, based on
         * their requirements. Each function can optionally depend on other functions
         * being completed first, and each function is run as soon as its requirements
         * are satisfied.
         *
         * If any of the functions pass an error to their callback, the `auto` sequence
         * will stop. Further tasks will not execute (so any other functions depending
         * on it will not run), and the main `callback` is immediately called with the
         * error.
         *
         * Functions also receive an object containing the results of functions which
         * have completed so far as the first argument, if they have dependencies. If a
         * task function has no dependencies, it will only be passed a callback.
         *
         * @name auto
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Object} tasks - An object. Each of its properties is either a
         * function or an array of requirements, with the function itself the last item
         * in the array. The object's key of a property serves as the name of the task
         * defined by that property, i.e. can be used when specifying requirements for
         * other tasks. The function receives one or two arguments:
         * * a `results` object, containing the results of the previously executed
         *   functions, only passed if the task has any dependencies,
         * * a `callback(err, result)` function, which must be called when finished,
         *   passing an `error` (which can be `null`) and the result of the function's
         *   execution.
         * @param {number} [concurrency=Infinity] - An optional `integer` for
         * determining the maximum number of tasks that can be run in parallel. By
         * default, as many as possible.
         * @param {Function} [callback] - An optional callback which is called when all
         * the tasks have been completed. It receives the `err` argument if any `tasks`
         * pass an error to their callback. Results are always returned; however, if an
         * error occurs, no further `tasks` will be performed, and the results object
         * will only contain partial results. Invoked with (err, results).
         * @returns undefined
         * @example
         *
         * async.auto({
         *     // this function will just be passed a callback
         *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),
         *     showData: ['readData', function(results, cb) {
         *         // results.readData is the file's contents
         *         // ...
         *     }]
         * }, callback);
         *
         * async.auto({
         *     get_data: function(callback) {
         *         console.log('in get_data');
         *         // async code to get some data
         *         callback(null, 'data', 'converted to array');
         *     },
         *     make_folder: function(callback) {
         *         console.log('in make_folder');
         *         // async code to create a directory to store a file in
         *         // this is run at the same time as getting the data
         *         callback(null, 'folder');
         *     },
         *     write_file: ['get_data', 'make_folder', function(results, callback) {
         *         console.log('in write_file', JSON.stringify(results));
         *         // once there is some data and the directory exists,
         *         // write the data to a file in the directory
         *         callback(null, 'filename');
         *     }],
         *     email_link: ['write_file', function(results, callback) {
         *         console.log('in email_link', JSON.stringify(results));
         *         // once the file is written let's email a link to it...
         *         // results.write_file contains the filename returned by write_file.
         *         callback(null, {'file':results.write_file, 'email':'user@example.com'});
         *     }]
         * }, function(err, results) {
         *     console.log('err = ', err);
         *     console.log('results = ', results);
         * });
         */

        /**
         * A specialized version of `_.map` for arrays without support for iteratee
         * shorthands.
         *
         * @private
         * @param {Array} [array] The array to iterate over.
         * @param {Function} iteratee The function invoked per iteration.
         * @returns {Array} Returns the new mapped array.
         */

        /**
         * The base implementation of `_.slice` without an iteratee call guard.
         *
         * @private
         * @param {Array} array The array to slice.
         * @param {number} [start=0] The start position.
         * @param {number} [end=array.length] The end position.
         * @returns {Array} Returns the slice of `array`.
         */

        /**
         * Converts an ASCII `string` to an array.
         *
         * @private
         * @param {string} string The string to convert.
         * @returns {Array} Returns the converted array.
         */

        /** Used to compose unicode character classes. */

        /** Used to compose unicode character classes. */


        var rsAstralRange$1 = '\\ud800-\\udfff';
        var rsComboMarksRange$1 = '\\u0300-\\u036f';
        var reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f';
        var rsComboSymbolsRange$1 = '\\u20d0-\\u20ff';
        var rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1;
        var rsVarRange$1 = '\\ufe0e\\ufe0f';
        /** Used to compose unicode capture groups. */

        var rsAstral = '[' + rsAstralRange$1 + ']';
        var rsCombo = '[' + rsComboRange$1 + ']';
        var rsFitz = '\\ud83c[\\udffb-\\udfff]';
        var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
        var rsNonAstral = '[^' + rsAstralRange$1 + ']';
        var rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}';
        var rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]';
        var rsZWJ$1 = '\\u200d';
        /** Used to compose unicode regexes. */

        var reOptMod = rsModifier + '?';
        var rsOptVar = '[' + rsVarRange$1 + ']?';
        var rsOptJoin = '(?:' + rsZWJ$1 + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
        var rsSeq = rsOptVar + reOptMod + rsOptJoin;
        var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
        var hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
        var hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';

        function fallback(fn) {
          setTimeout(fn, 0);
        }

        function wrap(defer) {
          return rest(function (fn, args) {
            defer(function () {
              fn.apply(null, args);
            });
          });
        }

        var _defer;

        if (hasSetImmediate) {
          _defer = setImmediate;
        } else if (hasNextTick) {
          _defer = process.nextTick;
        } else {
          _defer = fallback;
        }

        wrap(_defer); // Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation
        // used for queues. This implementation assumes that the node provided by the user can be modified
        // to adjust the next and last properties. We implement only the minimal functionality
        // for queue support.

        /**
         * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
         *
         * @name eachOfSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.eachOf]{@link module:Collections.eachOf}
         * @alias forEachOfSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`. The
         * `key` is the item's key, or index in the case of an array. The iteratee is
         * passed a `callback(err)` which must be called once it has completed. If no
         * error has occurred, the callback should be run without arguments or with an
         * explicit `null` argument. Invoked with (item, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. Invoked with (err).
         */

        var eachOfSeries = doLimit(eachOfLimit, 1);
        /**
         * Reduces `coll` into a single value using an async `iteratee` to return each
         * successive step. `memo` is the initial state of the reduction. This function
         * only operates in series.
         *
         * For performance reasons, it may make sense to split a call to this function
         * into a parallel map, and then use the normal `Array.prototype.reduce` on the
         * results. This function is for situations where each step in the reduction
         * needs to be async; if you can get the data before reducing it, then it's
         * probably a good idea to do so.
         *
         * @name reduce
         * @static
         * @memberOf module:Collections
         * @method
         * @alias inject
         * @alias foldl
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {*} memo - The initial state of the reduction.
         * @param {Function} iteratee - A function applied to each item in the
         * array to produce the next step in the reduction. The `iteratee` is passed a
         * `callback(err, reduction)` which accepts an optional error as its first
         * argument, and the state of the reduction as the second. If an error is
         * passed to the callback, the reduction is stopped and the main `callback` is
         * immediately called with the error. Invoked with (memo, item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result is the reduced value. Invoked with
         * (err, result).
         * @example
         *
         * async.reduce([1,2,3], 0, function(memo, item, callback) {
         *     // pointless async:
         *     process.nextTick(function() {
         *         callback(null, memo + item)
         *     });
         * }, function(err, result) {
         *     // result is now equal to the last value of memo, which is 6
         * });
         */

        function reduce(coll, memo, iteratee, callback) {
          callback = once(callback || noop);
          eachOfSeries(coll, function (x, i, callback) {
            iteratee(memo, x, function (err, v) {
              memo = v;
              callback(err);
            });
          }, function (err) {
            callback(err, memo);
          });
        }
        /**
         * Version of the compose function that is more natural to read. Each function
         * consumes the return value of the previous function. It is the equivalent of
         * [compose]{@link module:ControlFlow.compose} with the arguments reversed.
         *
         * Each function is executed with the `this` binding of the composed function.
         *
         * @name seq
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.compose]{@link module:ControlFlow.compose}
         * @category Control Flow
         * @param {...Function} functions - the asynchronous functions to compose
         * @returns {Function} a function that composes the `functions` in order
         * @example
         *
         * // Requires lodash (or underscore), express3 and dresende's orm2.
         * // Part of an app, that fetches cats of the logged user.
         * // This example uses `seq` function to avoid overnesting and error
         * // handling clutter.
         * app.get('/cats', function(request, response) {
         *     var User = request.models.User;
         *     async.seq(
         *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))
         *         function(user, fn) {
         *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))
         *         }
         *     )(req.session.user_id, function (err, cats) {
         *         if (err) {
         *             console.error(err);
         *             response.json({ status: 'error', message: err.message });
         *         } else {
         *             response.json({ status: 'ok', message: 'Cats found', data: cats });
         *         }
         *     });
         * });
         */


        var seq = rest(function seq(functions) {
          return rest(function (args) {
            var that = this;
            var cb = args[args.length - 1];

            if (typeof cb == 'function') {
              args.pop();
            } else {
              cb = noop;
            }

            reduce(functions, args, function (newargs, fn, cb) {
              fn.apply(that, newargs.concat(rest(function (err, nextargs) {
                cb(err, nextargs);
              })));
            }, function (err, results) {
              cb.apply(that, [err].concat(results));
            });
          });
        });
        /**
         * Creates a function which is a composition of the passed asynchronous
         * functions. Each function consumes the return value of the function that
         * follows. Composing functions `f()`, `g()`, and `h()` would produce the result
         * of `f(g(h()))`, only this version uses callbacks to obtain the return values.
         *
         * Each function is executed with the `this` binding of the composed function.
         *
         * @name compose
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {...Function} functions - the asynchronous functions to compose
         * @returns {Function} an asynchronous function that is the composed
         * asynchronous `functions`
         * @example
         *
         * function add1(n, callback) {
         *     setTimeout(function () {
         *         callback(null, n + 1);
         *     }, 10);
         * }
         *
         * function mul3(n, callback) {
         *     setTimeout(function () {
         *         callback(null, n * 3);
         *     }, 10);
         * }
         *
         * var add1mul3 = async.compose(mul3, add1);
         * add1mul3(4, function (err, result) {
         *     // result now equals 15
         * });
         */

        rest(function (args) {
          return seq.apply(null, args.reverse());
        });
        /**
         * Applies `iteratee` to each item in `coll`, concatenating the results. Returns
         * the concatenated list. The `iteratee`s are called in parallel, and the
         * results are concatenated as they return. There is no guarantee that the
         * results array will be returned in the original order of `coll` passed to the
         * `iteratee` function.
         *
         * @name concat
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, results)` which must be called once
         * it has completed with an error (which can be `null`) and an array of results.
         * Invoked with (item, callback).
         * @param {Function} [callback(err)] - A callback which is called after all the
         * `iteratee` functions have finished, or an error occurs. Results is an array
         * containing the concatenated results of the `iteratee` function. Invoked with
         * (err, results).
         * @example
         *
         * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {
         *     // files is now a list of filenames that exist in the 3 directories
         * });
         */

        /**
         * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.
         *
         * @name concatSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.concat]{@link module:Collections.concat}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, results)` which must be called once
         * it has completed with an error (which can be `null`) and an array of results.
         * Invoked with (item, callback).
         * @param {Function} [callback(err)] - A callback which is called after all the
         * `iteratee` functions have finished, or an error occurs. Results is an array
         * containing the concatenated results of the `iteratee` function. Invoked with
         * (err, results).
         */

        /**
         * Returns a function that when called, calls-back with the values provided.
         * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to
         * [`auto`]{@link module:ControlFlow.auto}.
         *
         * @name constant
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {...*} arguments... - Any number of arguments to automatically invoke
         * callback with.
         * @returns {Function} Returns a function that when invoked, automatically
         * invokes the callback with the previous given arguments.
         * @example
         *
         * async.waterfall([
         *     async.constant(42),
         *     function (value, next) {
         *         // value === 42
         *     },
         *     //...
         * ], callback);
         *
         * async.waterfall([
         *     async.constant(filename, "utf8"),
         *     fs.readFile,
         *     function (fileData, next) {
         *         //...
         *     }
         *     //...
         * ], callback);
         *
         * async.auto({
         *     hostname: async.constant("https://server.net/"),
         *     port: findFreePort,
         *     launchServer: ["hostname", "port", function (options, cb) {
         *         startServer(options, cb);
         *     }],
         *     //...
         * }, callback);
         */

        rest(function (values) {
          var args = [null].concat(values);
          return initialParams(function (ignoredArgs, callback) {
            return callback.apply(this, args);
          });
        });
        /**
         * Returns the first value in `coll` that passes an async truth test. The
         * `iteratee` is applied in parallel, meaning the first iteratee to return
         * `true` will fire the detect `callback` with that result. That means the
         * result might not be the first item in the original `coll` (in terms of order)
         * that passes the test.
        
         * If order within the original `coll` is important, then look at
         * [`detectSeries`]{@link module:Collections.detectSeries}.
         *
         * @name detect
         * @static
         * @memberOf module:Collections
         * @method
         * @alias find
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         * @example
         *
         * async.detect(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // result now equals the first file in the list that exists
         * });
         */

        /**
         * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name detectLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.detect]{@link module:Collections.detect}
         * @alias findLimit
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         */

        /**
         * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.
         *
         * @name detectSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.detect]{@link module:Collections.detect}
         * @alias findSeries
         * @category Collections
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The iteratee is passed a `callback(err, truthValue)` which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the `iteratee` functions have finished.
         * Result will be the first item in the array that passes the truth test
         * (iteratee) or the value `undefined` if none passed. Invoked with
         * (err, result).
         */

        function consoleFunc(name) {
          return rest(function (fn, args) {
            fn.apply(null, args.concat(rest(function (err, args) {
              if (typeof console === 'object') {
                if (err) {
                  if (console.error) {
                    console.error(err);
                  }
                } else if (console[name]) {
                  arrayEach(args, function (x) {
                    console[name](x);
                  });
                }
              }
            })));
          });
        }
        /**
         * Logs the result of an `async` function to the `console` using `console.dir`
         * to display the properties of the resulting object. Only works in Node.js or
         * in browsers that support `console.dir` and `console.error` (such as FF and
         * Chrome). If multiple arguments are returned from the async function,
         * `console.dir` is called on each argument in order.
         *
         * @name dir
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to.
         * @param {...*} arguments... - Any number of arguments to apply to the function.
         * @example
         *
         * // in a module
         * var hello = function(name, callback) {
         *     setTimeout(function() {
         *         callback(null, {hello: name});
         *     }, 1000);
         * };
         *
         * // in the node repl
         * node> async.dir(hello, 'world');
         * {hello: 'world'}
         */


        consoleFunc('dir');

        function _withoutIndex(iteratee) {
          return function (value, index, callback) {
            return iteratee(value, callback);
          };
        }
        /**
         * Applies the function `iteratee` to each item in `coll`, in parallel.
         * The `iteratee` is called with an item from the list, and a callback for when
         * it has finished. If the `iteratee` passes an error to its `callback`, the
         * main `callback` (for the `each` function) is immediately called with the
         * error.
         *
         * Note, that since this function applies `iteratee` to each item in parallel,
         * there is no guarantee that the iteratee functions will complete in order.
         *
         * @name each
         * @static
         * @memberOf module:Collections
         * @method
         * @alias forEach
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each item
         * in `coll`. The iteratee is passed a `callback(err)` which must be called once
         * it has completed. If no error has occurred, the `callback` should be run
         * without arguments or with an explicit `null` argument. The array index is not
         * passed to the iteratee. Invoked with (item, callback). If you need the index,
         * use `eachOf`.
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         * @example
         *
         * // assuming openFiles is an array of file names and saveFile is a function
         * // to save the modified contents of that file:
         *
         * async.each(openFiles, saveFile, function(err){
         *   // if any of the saves produced an error, err would equal that error
         * });
         *
         * // assuming openFiles is an array of file names
         * async.each(openFiles, function(file, callback) {
         *
         *     // Perform operation on file here.
         *     console.log('Processing file ' + file);
         *
         *     if( file.length > 32 ) {
         *       console.log('This file name is too long');
         *       callback('File name too long');
         *     } else {
         *       // Do work to process file here
         *       console.log('File processed');
         *       callback();
         *     }
         * }, function(err) {
         *     // if any of the file processing produced an error, err would equal that error
         *     if( err ) {
         *       // One of the iterations produced an error.
         *       // All processing will now stop.
         *       console.log('A file failed to process');
         *     } else {
         *       console.log('All files have been processed successfully');
         *     }
         * });
         */


        function eachLimit(coll, iteratee, callback) {
          eachOf(coll, _withoutIndex(iteratee), callback);
        }
        /**
         * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
         *
         * @name eachSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.each]{@link module:Collections.each}
         * @alias forEachSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each
         * item in `coll`. The iteratee is passed a `callback(err)` which must be called
         * once it has completed. If no error has occurred, the `callback` should be run
         * without arguments or with an explicit `null` argument. The array index is
         * not passed to the iteratee. Invoked with (item, callback). If you need the
         * index, use `eachOfSeries`.
         * @param {Function} [callback] - A callback which is called when all
         * `iteratee` functions have finished, or an error occurs. Invoked with (err).
         */

        /**
         * Returns `true` if every element in `coll` satisfies an async test. If any
         * iteratee call returns `false`, the main `callback` is immediately called.
         *
         * @name every
         * @static
         * @memberOf module:Collections
         * @method
         * @alias all
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         * @example
         *
         * async.every(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // if result is true then every file exists
         * });
         */

        /**
         * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.
         *
         * @name everyLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.every]{@link module:Collections.every}
         * @alias allLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         */

        /**
         * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.
         *
         * @name everySeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.every]{@link module:Collections.every}
         * @alias allSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the
         * collection in parallel. The iteratee is passed a `callback(err, truthValue)`
         * which must be called with a  boolean argument once it has completed. Invoked
         * with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Result will be either `true` or `false`
         * depending on the values of the async tests. Invoked with (err, result).
         */

        /**
         * The base implementation of `_.property` without support for deep paths.
         *
         * @private
         * @param {string} key The key of the property to get.
         * @returns {Function} Returns the new accessor function.
         */

        /**
         * Returns a new array of all the values in `coll` which pass an async truth
         * test. This operation is performed in parallel, but the results array will be
         * in the same order as the original.
         *
         * @name filter
         * @static
         * @memberOf module:Collections
         * @method
         * @alias select
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         * @example
         *
         * async.filter(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, results) {
         *     // results now equals an array of the existing files
         * });
         */

        /**
         * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name filterLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @alias selectLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.
         *
         * @name filterSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @alias selectSeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results)
         */

        /**
         * Logs the result of an `async` function to the `console`. Only works in
         * Node.js or in browsers that support `console.log` and `console.error` (such
         * as FF and Chrome). If multiple arguments are returned from the async
         * function, `console.log` is called on each argument in order.
         *
         * @name log
         * @static
         * @memberOf module:Utils
         * @method
         * @category Util
         * @param {Function} function - The function you want to eventually apply all
         * arguments to.
         * @param {...*} arguments... - Any number of arguments to apply to the function.
         * @example
         *
         * // in a module
         * var hello = function(name, callback) {
         *     setTimeout(function() {
         *         callback(null, 'hello ' + name);
         *     }, 1000);
         * };
         *
         * // in the node repl
         * node> async.log(hello, 'world');
         * 'hello world'
         */


        consoleFunc('log');
        /**
         * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.
         *
         * Produces a new Object by mapping each value of `obj` through the `iteratee`
         * function. The `iteratee` is called each `value` and `key` from `obj` and a
         * callback for when it has finished processing. Each of these callbacks takes
         * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`
         * passes an error to its callback, the main `callback` (for the `mapValues`
         * function) is immediately called with the error.
         *
         * Note, the order of the keys in the result is not guaranteed.  The keys will
         * be roughly in the order they complete, (but this is very engine-specific)
         *
         * @name mapValues
         * @static
         * @memberOf module:Collections
         * @method
         * @category Collection
         * @param {Object} obj - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each value and key in
         * `coll`. The iteratee is passed a `callback(err, transformed)` which must be
         * called once it has completed with an error (which can be `null`) and a
         * transformed value. Invoked with (value, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. `result` is a new object consisting
         * of each key from `obj`, with each transformed value on the right-hand side.
         * Invoked with (err, result).
         * @example
         *
         * async.mapValues({
         *     f1: 'file1',
         *     f2: 'file2',
         *     f3: 'file3'
         * }, function (file, key, callback) {
         *   fs.stat(file, callback);
         * }, function(err, result) {
         *     // result is now a map of stats for each file, e.g.
         *     // {
         *     //     f1: [stats for file1],
         *     //     f2: [stats for file2],
         *     //     f3: [stats for file3]
         *     // }
         * });
         */

        /**
         * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.
         *
         * @name mapValuesSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.mapValues]{@link module:Collections.mapValues}
         * @category Collection
         * @param {Object} obj - A collection to iterate over.
         * @param {Function} iteratee - A function to apply to each value in `obj`.
         * The iteratee is passed a `callback(err, transformed)` which must be called
         * once it has completed with an error (which can be `null`) and a
         * transformed value. Invoked with (value, key, callback).
         * @param {Function} [callback] - A callback which is called when all `iteratee`
         * functions have finished, or an error occurs. `result` is a new object consisting
         * of each key from `obj`, with each transformed value on the right-hand side.
         * Invoked with (err, result).
         */

        /**
         * Calls `callback` on a later loop around the event loop. In Node.js this just
         * calls `setImmediate`.  In the browser it will use `setImmediate` if
         * available, otherwise `setTimeout(callback, 0)`, which means other higher
         * priority events may precede the execution of `callback`.
         *
         * This is used internally for browser-compatibility purposes.
         *
         * @name nextTick
         * @static
         * @memberOf module:Utils
         * @method
         * @alias setImmediate
         * @category Util
         * @param {Function} callback - The function to call on a later loop around
         * the event loop. Invoked with (args...).
         * @param {...*} args... - any number of additional arguments to pass to the
         * callback on the next tick.
         * @example
         *
         * var call_order = [];
         * async.nextTick(function() {
         *     call_order.push('two');
         *     // call_order now equals ['one','two']
         * });
         * call_order.push('one');
         *
         * async.setImmediate(function (a, b, c) {
         *     // a, b, and c equal 1, 2, and 3
         * }, 1, 2, 3);
         */

        var _defer$1;

        if (hasNextTick) {
          _defer$1 = process.nextTick;
        } else if (hasSetImmediate) {
          _defer$1 = setImmediate;
        } else {
          _defer$1 = fallback;
        }

        wrap(_defer$1);
        /**
         * Calls `callback` on a later loop around the event loop. In Node.js this just
         * calls `setImmediate`.  In the browser it will use `setImmediate` if
         * available, otherwise `setTimeout(callback, 0)`, which means other higher
         * priority events may precede the execution of `callback`.
         *
         * This is used internally for browser-compatibility purposes.
         *
         * @name setImmediate
         * @static
         * @memberOf module:Utils
         * @method
         * @alias nextTick
         * @category Util
         * @param {Function} callback - The function to call on a later loop around
         * the event loop. Invoked with (args...).
         * @param {...*} args... - any number of additional arguments to pass to the
         * callback on the next tick.
         * @example
         *
         * var call_order = [];
         * async.nextTick(function() {
         *     call_order.push('two');
         *     // call_order now equals ['one','two']
         * });
         * call_order.push('one');
         *
         * async.setImmediate(function (a, b, c) {
         *     // a, b, and c equal 1, 2, and 3
         * }, 1, 2, 3);
         */

        /**
         * A queue of tasks for the worker function to complete.
         * @typedef {Object} QueueObject
         * @memberOf module:ControlFlow
         * @property {Function} length - a function returning the number of items
         * waiting to be processed. Invoke with `queue.length()`.
         * @property {boolean} started - a boolean indicating whether or not any
         * items have been pushed and processed by the queue.
         * @property {Function} running - a function returning the number of items
         * currently being processed. Invoke with `queue.running()`.
         * @property {Function} workersList - a function returning the array of items
         * currently being processed. Invoke with `queue.workersList()`.
         * @property {Function} idle - a function returning false if there are items
         * waiting or being processed, or true if not. Invoke with `queue.idle()`.
         * @property {number} concurrency - an integer for determining how many `worker`
         * functions should be run in parallel. This property can be changed after a
         * `queue` is created to alter the concurrency on-the-fly.
         * @property {Function} push - add a new task to the `queue`. Calls `callback`
         * once the `worker` has finished processing the task. Instead of a single task,
         * a `tasks` array can be submitted. The respective callback is used for every
         * task in the list. Invoke with `queue.push(task, [callback])`,
         * @property {Function} unshift - add a new task to the front of the `queue`.
         * Invoke with `queue.unshift(task, [callback])`.
         * @property {Function} saturated - a callback that is called when the number of
         * running workers hits the `concurrency` limit, and further tasks will be
         * queued.
         * @property {Function} unsaturated - a callback that is called when the number
         * of running workers is less than the `concurrency` & `buffer` limits, and
         * further tasks will not be queued.
         * @property {number} buffer - A minimum threshold buffer in order to say that
         * the `queue` is `unsaturated`.
         * @property {Function} empty - a callback that is called when the last item
         * from the `queue` is given to a `worker`.
         * @property {Function} drain - a callback that is called when the last item
         * from the `queue` has returned from the `worker`.
         * @property {Function} error - a callback that is called when a task errors.
         * Has the signature `function(error, task)`.
         * @property {boolean} paused - a boolean for determining whether the queue is
         * in a paused state.
         * @property {Function} pause - a function that pauses the processing of tasks
         * until `resume()` is called. Invoke with `queue.pause()`.
         * @property {Function} resume - a function that resumes the processing of
         * queued tasks when the queue is paused. Invoke with `queue.resume()`.
         * @property {Function} kill - a function that removes the `drain` callback and
         * empties remaining tasks from the queue forcing it to go idle. Invoke with `queue.kill()`.
         */

        /**
         * Creates a `queue` object with the specified `concurrency`. Tasks added to the
         * `queue` are processed in parallel (up to the `concurrency` limit). If all
         * `worker`s are in progress, the task is queued until one becomes available.
         * Once a `worker` completes a `task`, that `task`'s callback is called.
         *
         * @name queue
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Function} worker - An asynchronous function for processing a queued
         * task, which must call its `callback(err)` argument when finished, with an
         * optional `error` as an argument.  If you want to handle errors from an
         * individual task, pass a callback to `q.push()`. Invoked with
         * (task, callback).
         * @param {number} [concurrency=1] - An `integer` for determining how many
         * `worker` functions should be run in parallel.  If omitted, the concurrency
         * defaults to `1`.  If the concurrency is `0`, an error is thrown.
         * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can
         * attached as certain properties to listen for specific events during the
         * lifecycle of the queue.
         * @example
         *
         * // create a queue object with concurrency 2
         * var q = async.queue(function(task, callback) {
         *     console.log('hello ' + task.name);
         *     callback();
         * }, 2);
         *
         * // assign a callback
         * q.drain = function() {
         *     console.log('all items have been processed');
         * };
         *
         * // add some items to the queue
         * q.push({name: 'foo'}, function(err) {
         *     console.log('finished processing foo');
         * });
         * q.push({name: 'bar'}, function (err) {
         *     console.log('finished processing bar');
         * });
         *
         * // add some items to the queue (batch-wise)
         * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {
         *     console.log('finished processing item');
         * });
         *
         * // add some items to the front of the queue
         * q.unshift({name: 'bar'}, function (err) {
         *     console.log('finished processing bar');
         * });
         */

        /**
         * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and
         * completed in ascending priority order.
         *
         * @name priorityQueue
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.queue]{@link module:ControlFlow.queue}
         * @category Control Flow
         * @param {Function} worker - An asynchronous function for processing a queued
         * task, which must call its `callback(err)` argument when finished, with an
         * optional `error` as an argument.  If you want to handle errors from an
         * individual task, pass a callback to `q.push()`. Invoked with
         * (task, callback).
         * @param {number} concurrency - An `integer` for determining how many `worker`
         * functions should be run in parallel.  If omitted, the concurrency defaults to
         * `1`.  If the concurrency is `0`, an error is thrown.
         * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two
         * differences between `queue` and `priorityQueue` objects:
         * * `push(task, priority, [callback])` - `priority` should be a number. If an
         *   array of `tasks` is given, all tasks will be assigned the same priority.
         * * The `unshift` method was removed.
         */

        /**
         * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.
         *
         * @name reject
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.filter]{@link module:Collections.filter}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         * @example
         *
         * async.reject(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, results) {
         *     // results now equals an array of missing files
         *     createFiles(results);
         * });
         */

        /**
         * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a
         * time.
         *
         * @name rejectLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.reject]{@link module:Collections.reject}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.
         *
         * @name rejectSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.reject]{@link module:Collections.reject}
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in `coll`.
         * The `iteratee` is passed a `callback(err, truthValue)`, which must be called
         * with a boolean argument once it has completed. Invoked with (item, callback).
         * @param {Function} [callback] - A callback which is called after all the
         * `iteratee` functions have finished. Invoked with (err, results).
         */

        /**
         * Creates a function that returns `value`.
         *
         * @static
         * @memberOf _
         * @since 2.4.0
         * @category Util
         * @param {*} value The value to return from the new function.
         * @returns {Function} Returns the new constant function.
         * @example
         *
         * var objects = _.times(2, _.constant({ 'a': 1 }));
         *
         * console.log(objects);
         * // => [{ 'a': 1 }, { 'a': 1 }]
         *
         * console.log(objects[0] === objects[1]);
         * // => true
         */

        /**
         * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method wraps a task and makes it
         * retryable, rather than immediately calling it with retries.
         *
         * @name retryable
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.retry]{@link module:ControlFlow.retry}
         * @category Control Flow
         * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional
         * options, exactly the same as from `retry`
         * @param {Function} task - the asynchronous function to wrap
         * @returns {Functions} The wrapped function, which when invoked, will retry on
         * an error, based on the parameters specified in `opts`.
         * @example
         *
         * async.auto({
         *     dep1: async.retryable(3, getFromFlakyService),
         *     process: ["dep1", async.retryable(3, function (results, cb) {
         *         maybeProcessData(results.dep1, cb);
         *     })]
         * }, callback);
         */

        /**
         * Returns `true` if at least one element in the `coll` satisfies an async test.
         * If any iteratee call returns `true`, the main `callback` is immediately
         * called.
         *
         * @name some
         * @static
         * @memberOf module:Collections
         * @method
         * @alias any
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         * @example
         *
         * async.some(['file1','file2','file3'], function(filePath, callback) {
         *     fs.access(filePath, function(err) {
         *         callback(null, !err)
         *     });
         * }, function(err, result) {
         *     // if result is true then at least one of the files exists
         * });
         */

        /**
         * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.
         *
         * @name someLimit
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.some]{@link module:Collections.some}
         * @alias anyLimit
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {number} limit - The maximum number of async operations at a time.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         */

        /**
         * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.
         *
         * @name someSeries
         * @static
         * @memberOf module:Collections
         * @method
         * @see [async.some]{@link module:Collections.some}
         * @alias anySeries
         * @category Collection
         * @param {Array|Iterable|Object} coll - A collection to iterate over.
         * @param {Function} iteratee - A truth test to apply to each item in the array
         * in parallel. The iteratee is passed a `callback(err, truthValue)` which must
         * be called with a boolean argument once it has completed. Invoked with
         * (item, callback).
         * @param {Function} [callback] - A callback which is called as soon as any
         * iteratee returns `true`, or after all the iteratee functions have finished.
         * Result will be either `true` or `false` depending on the values of the async
         * tests. Invoked with (err, result).
         */

        /* Built-in method references for those with the same name as other `lodash` methods. */

        var nativeCeil = Math.ceil;
        var nativeMax$1 = Math.max;
        /**
         * Calls the `iteratee` function `n` times, and accumulates results in the same
         * manner you would use with [map]{@link module:Collections.map}.
         *
         * @name times
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.map]{@link module:Collections.map}
         * @category Control Flow
         * @param {number} n - The number of times to run the function.
         * @param {Function} iteratee - The function to call `n` times. Invoked with the
         * iteration index and a callback (n, next).
         * @param {Function} callback - see {@link module:Collections.map}.
         * @example
         *
         * // Pretend this is some complicated async factory
         * var createUser = function(id, callback) {
         *     callback(null, {
         *         id: 'user' + id
         *     });
         * };
         *
         * // generate 5 users
         * async.times(5, function(n, next) {
         *     createUser(n, function(err, user) {
         *         next(err, user);
         *     });
         * }, function(err, users) {
         *     // we should now have 5 users
         * });
         */

        /**
         * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.
         *
         * @name timesSeries
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @see [async.times]{@link module:ControlFlow.times}
         * @category Control Flow
         * @param {number} n - The number of times to run the function.
         * @param {Function} iteratee - The function to call `n` times. Invoked with the
         * iteration index and a callback (n, next).
         * @param {Function} callback - see {@link module:Collections.map}.
         */

        /**
         * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,
         * unmemoized form. Handy for testing.
         *
         * @name unmemoize
         * @static
         * @memberOf module:Utils
         * @method
         * @see [async.memoize]{@link module:Utils.memoize}
         * @category Util
         * @param {Function} fn - the memoized function
         * @returns {Function} a function that calls the original unmemoized function
         */

        /**
         * Runs the `tasks` array of functions in series, each passing their results to
         * the next in the array. However, if any of the `tasks` pass an error to their
         * own callback, the next function is not executed, and the main `callback` is
         * immediately called with the error.
         *
         * @name waterfall
         * @static
         * @memberOf module:ControlFlow
         * @method
         * @category Control Flow
         * @param {Array} tasks - An array of functions to run, each function is passed
         * a `callback(err, result1, result2, ...)` it must call on completion. The
         * first argument is an error (which can be `null`) and any further arguments
         * will be passed as arguments in order to the next task.
         * @param {Function} [callback] - An optional callback to run once all the
         * functions have completed. This will be passed the results of the last task's
         * callback. Invoked with (err, [results]).
         * @returns undefined
         * @example
         *
         * async.waterfall([
         *     function(callback) {
         *         callback(null, 'one', 'two');
         *     },
         *     function(arg1, arg2, callback) {
         *         // arg1 now equals 'one' and arg2 now equals 'two'
         *         callback(null, 'three');
         *     },
         *     function(arg1, callback) {
         *         // arg1 now equals 'three'
         *         callback(null, 'done');
         *     }
         * ], function (err, result) {
         *     // result now equals 'done'
         * });
         *
         * // Or, with named functions:
         * async.waterfall([
         *     myFirstFunction,
         *     mySecondFunction,
         *     myLastFunction,
         * ], function (err, result) {
         *     // result now equals 'done'
         * });
         * function myFirstFunction(callback) {
         *     callback(null, 'one', 'two');
         * }
         * function mySecondFunction(arg1, arg2, callback) {
         *     // arg1 now equals 'one' and arg2 now equals 'two'
         *     callback(null, 'three');
         * }
         * function myLastFunction(arg1, callback) {
         *     // arg1 now equals 'three'
         *     callback(null, 'done');
         * }
         */

        /**
         * Async is a utility module which provides straight-forward, powerful functions
         * for working with asynchronous JavaScript. Although originally designed for
         * use with [Node.js](http://nodejs.org) and installable via
         * `npm install --save async`, it can also be used directly in the browser.
         * @module async
         */

        /**
         * A collection of `async` functions for manipulating collections, such as
         * arrays and objects.
         * @module Collections
         */

        /**
         * A collection of `async` functions for controlling the flow through a script.
         * @module ControlFlow
         */

        /**
         * A collection of `async` utility functions.
         * @module Utils
         */

        /**
         * @hidden
         */

        var errorCodeLookup;
        /**
         * Lazily construct error code lookup, since DropboxJS might be loaded *after* BrowserFS (or not at all!)
         * @hidden
         */

        function constructErrorCodeLookup() {
          if (errorCodeLookup) {
            return;
          }

          errorCodeLookup = {}; // This indicates a network transmission error on modern browsers. Internet Explorer might cause this code to be reported on some API server errors.

          errorCodeLookup[Dropbox.ApiError.NETWORK_ERROR] = ErrorCode.EIO; // This happens when the contentHash parameter passed to a Dropbox.Client#readdir or Dropbox.Client#stat matches the most recent content, so the API call response is omitted, to save bandwidth.
          // errorCodeLookup[Dropbox.ApiError.NO_CONTENT];
          // The error property on {Dropbox.ApiError#response} should indicate which input parameter is invalid and why.

          errorCodeLookup[Dropbox.ApiError.INVALID_PARAM] = ErrorCode.EINVAL; // The OAuth token used for the request will never become valid again, so the user should be re-authenticated.

          errorCodeLookup[Dropbox.ApiError.INVALID_TOKEN] = ErrorCode.EPERM; // This indicates a bug in dropbox.js and should never occur under normal circumstances.
          // ^ Actually, that's false. This occurs when you try to move folders to themselves, or move a file over another file.

          errorCodeLookup[Dropbox.ApiError.OAUTH_ERROR] = ErrorCode.EPERM; // This happens when trying to read from a non-existing file, readdir a non-existing directory, write a file into a non-existing directory, etc.

          errorCodeLookup[Dropbox.ApiError.NOT_FOUND] = ErrorCode.ENOENT; // This indicates a bug in dropbox.js and should never occur under normal circumstances.

          errorCodeLookup[Dropbox.ApiError.INVALID_METHOD] = ErrorCode.EINVAL; // This happens when a Dropbox.Client#readdir or Dropbox.Client#stat call would return more than a maximum amount of directory entries.

          errorCodeLookup[Dropbox.ApiError.NOT_ACCEPTABLE] = ErrorCode.EINVAL; // This is used by some backend methods to indicate that the client needs to download server-side changes and perform conflict resolution. Under normal usage, errors with this code should never surface to the code using dropbox.js.

          errorCodeLookup[Dropbox.ApiError.CONFLICT] = ErrorCode.EINVAL; // Status value indicating that the application is making too many requests.

          errorCodeLookup[Dropbox.ApiError.RATE_LIMITED] = ErrorCode.EBUSY; // The request should be retried after some time.

          errorCodeLookup[Dropbox.ApiError.SERVER_ERROR] = ErrorCode.EBUSY; // Status value indicating that the user's Dropbox is over its storage quota.

          errorCodeLookup[Dropbox.ApiError.OVER_QUOTA] = ErrorCode.ENOSPC;
        }
        /**
         * @hidden
         */


        function isFileInfo(cache) {
          return cache && cache.stat.isFile;
        }
        /**
         * @hidden
         */


        function isDirInfo(cache) {
          return cache && cache.stat.isFolder;
        }
        /**
         * @hidden
         */


        function isArrayBuffer(ab) {
          // Accept null / undefined, too.
          return ab === null || ab === undefined || typeof ab === 'object' && typeof ab['byteLength'] === 'number';
        }
        /**
         * Wraps a Dropbox client and caches operations.
         * @hidden
         */


        var CachedDropboxClient = function CachedDropboxClient(client) {
          this._cache = {};
          this._client = client;
        };

        CachedDropboxClient.prototype.readdir = function readdir(p, cb) {
          var this$1 = this;
          var cacheInfo = this.getCachedDirInfo(p);

          this._wrap(function (interceptCb) {
            if (cacheInfo !== null && cacheInfo.contents) {
              this$1._client.readdir(p, {
                contentHash: cacheInfo.stat.contentHash
              }, interceptCb);
            } else {
              this$1._client.readdir(p, interceptCb);
            }
          }, function (err, filenames, stat, folderEntries) {
            if (err) {
              if (err.status === Dropbox.ApiError.NO_CONTENT && cacheInfo !== null) {
                cb(null, cacheInfo.contents.slice(0));
              } else {
                cb(err);
              }
            } else {
              this$1.updateCachedDirInfo(p, stat, filenames.slice(0));
              folderEntries.forEach(function (entry) {
                this$1.updateCachedInfo(path.join(p, entry.name), entry);
              });
              cb(null, filenames);
            }
          });
        };

        CachedDropboxClient.prototype.remove = function remove(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.remove(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat);
            }

            cb(err);
          });
        };

        CachedDropboxClient.prototype.move = function move(src, dest, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.move(src, dest, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.deleteCachedInfo(src);
              this$1.updateCachedInfo(dest, stat);
            }

            cb(err);
          });
        };

        CachedDropboxClient.prototype.stat = function stat(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.stat(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat);
            }

            cb(err, stat);
          });
        };

        CachedDropboxClient.prototype.readFile = function readFile(p, cb) {
          var this$1 = this;
          var cacheInfo = this.getCachedFileInfo(p);

          if (cacheInfo !== null && cacheInfo.contents !== null) {
            // Try to use cached info; issue a stat to see if contents are up-to-date.
            this.stat(p, function (error, stat) {
              if (error) {
                cb(error);
              } else if (stat.contentHash === cacheInfo.stat.contentHash) {
                // No file changes.
                cb(error, cacheInfo.contents.slice(0), cacheInfo.stat);
              } else {
                // File changes; rerun to trigger actual readFile.
                this$1.readFile(p, cb);
              }
            });
          } else {
            this._wrap(function (interceptCb) {
              this$1._client.readFile(p, {
                arrayBuffer: true
              }, interceptCb);
            }, function (err, contents, stat) {
              if (!err) {
                this$1.updateCachedInfo(p, stat, contents.slice(0));
              }

              cb(err, contents, stat);
            });
          }
        };

        CachedDropboxClient.prototype.writeFile = function writeFile(p, contents, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.writeFile(p, contents, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat, contents.slice(0));
            }

            cb(err, stat);
          });
        };

        CachedDropboxClient.prototype.mkdir = function mkdir(p, cb) {
          var this$1 = this;

          this._wrap(function (interceptCb) {
            this$1._client.mkdir(p, interceptCb);
          }, function (err, stat) {
            if (!err) {
              this$1.updateCachedInfo(p, stat, []);
            }

            cb(err);
          });
        };
        /**
         * Wraps an operation such that we retry a failed operation 3 times.
         * Necessary to deal with Dropbox rate limiting.
         *
         * @param performOp Function that performs the operation. Will be called up to three times.
         * @param cb Called when the operation succeeds, fails in a non-temporary manner, or fails three times.
         */


        CachedDropboxClient.prototype._wrap = function _wrap(performOp, cb) {
          var numRun = 0;

          var interceptCb = function (error) {
            // Timeout duration, in seconds.
            var timeoutDuration = 2;

            if (error && 3 > ++numRun) {
              switch (error.status) {
                case Dropbox.ApiError.SERVER_ERROR:
                case Dropbox.ApiError.NETWORK_ERROR:
                case Dropbox.ApiError.RATE_LIMITED:
                  setTimeout(function () {
                    performOp(interceptCb);
                  }, timeoutDuration * 1000);
                  break;

                default:
                  cb.apply(null, arguments);
                  break;
              }
            } else {
              cb.apply(null, arguments);
            }
          };

          performOp(interceptCb);
        };

        CachedDropboxClient.prototype.getCachedInfo = function getCachedInfo(p) {
          return this._cache[p.toLowerCase()];
        };

        CachedDropboxClient.prototype.putCachedInfo = function putCachedInfo(p, cache) {
          this._cache[p.toLowerCase()] = cache;
        };

        CachedDropboxClient.prototype.deleteCachedInfo = function deleteCachedInfo(p) {
          delete this._cache[p.toLowerCase()];
        };

        CachedDropboxClient.prototype.getCachedDirInfo = function getCachedDirInfo(p) {
          var info = this.getCachedInfo(p);

          if (isDirInfo(info)) {
            return info;
          } else {
            return null;
          }
        };

        CachedDropboxClient.prototype.getCachedFileInfo = function getCachedFileInfo(p) {
          var info = this.getCachedInfo(p);

          if (isFileInfo(info)) {
            return info;
          } else {
            return null;
          }
        };

        CachedDropboxClient.prototype.updateCachedDirInfo = function updateCachedDirInfo(p, stat, contents) {
          if (contents === void 0) contents = null;
          var cachedInfo = this.getCachedInfo(p); // Dropbox uses the *contentHash* property for directories.
          // Ignore stat objects w/o a contentHash defined; those actually exist!!!
          // (Example: readdir returns an array of stat objs; stat objs for dirs in that context have no contentHash)

          if (stat.contentHash !== null && (cachedInfo === undefined || cachedInfo.stat.contentHash !== stat.contentHash)) {
            this.putCachedInfo(p, {
              stat: stat,
              contents: contents
            });
          }
        };

        CachedDropboxClient.prototype.updateCachedFileInfo = function updateCachedFileInfo(p, stat, contents) {
          if (contents === void 0) contents = null;
          var cachedInfo = this.getCachedInfo(p); // Dropbox uses the *versionTag* property for files.
          // Ignore stat objects w/o a versionTag defined.

          if (stat.versionTag !== null && (cachedInfo === undefined || cachedInfo.stat.versionTag !== stat.versionTag)) {
            this.putCachedInfo(p, {
              stat: stat,
              contents: contents
            });
          }
        };

        CachedDropboxClient.prototype.updateCachedInfo = function updateCachedInfo(p, stat, contents) {
          if (contents === void 0) contents = null;

          if (stat.isFile && isArrayBuffer(contents)) {
            this.updateCachedFileInfo(p, stat, contents);
          } else if (stat.isFolder && Array.isArray(contents)) {
            this.updateCachedDirInfo(p, stat, contents);
          }
        };

        var DropboxFile = function (PreloadFile$$1) {
          function DropboxFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) DropboxFile.__proto__ = PreloadFile$$1;
          DropboxFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          DropboxFile.prototype.constructor = DropboxFile;

          DropboxFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (this.isDirty()) {
              var buffer$$1 = this.getBuffer(),
                  arrayBuffer = buffer2ArrayBuffer(buffer$$1);

              this._fs._writeFileStrict(this.getPath(), arrayBuffer, function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          DropboxFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return DropboxFile;
        }(PreloadFile);
        /**
         * A read/write file system backed by Dropbox cloud storage.
         *
         * Uses the Dropbox V1 API.
         *
         * NOTE: You must use the v0.10 version of the [Dropbox JavaScript SDK](https://www.npmjs.com/package/dropbox).
         */


        var DropboxFileSystem = function (BaseFileSystem$$1) {
          function DropboxFileSystem(client, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);
            this._client = new CachedDropboxClient(client);
            deprecationMessage(deprecateMsg, DropboxFileSystem.Name, {
              client: "authenticated dropbox client instance"
            });
            constructErrorCodeLookup();
          }

          if (BaseFileSystem$$1) DropboxFileSystem.__proto__ = BaseFileSystem$$1;
          DropboxFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          DropboxFileSystem.prototype.constructor = DropboxFileSystem;
          /**
           * Creates a new DropboxFileSystem instance with the given options.
           * Must be given an *authenticated* DropboxJS client from the old v0.10 version of the Dropbox JS SDK.
           */

          DropboxFileSystem.Create = function Create(opts, cb) {
            cb(null, new DropboxFileSystem(opts.client, false));
          };

          DropboxFileSystem.isAvailable = function isAvailable() {
            // Checks if the Dropbox library is loaded.
            return typeof Dropbox !== 'undefined';
          };

          DropboxFileSystem.prototype.getName = function getName() {
            return DropboxFileSystem.Name;
          };

          DropboxFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          }; // Dropbox doesn't support symlinks, properties, or synchronous calls


          DropboxFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          DropboxFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          DropboxFileSystem.prototype.supportsSynch = function supportsSynch() {
            return false;
          };

          DropboxFileSystem.prototype.empty = function empty(mainCb) {
            var this$1 = this;

            this._client.readdir('/', function (error, files) {
              if (error) {
                mainCb(this$1.convert(error, '/'));
              } else {
                var deleteFile = function (file, cb) {
                  var p = path.join('/', file);

                  this$1._client.remove(p, function (err) {
                    cb(err ? this$1.convert(err, p) : null);
                  });
                };

                var finished = function (err) {
                  if (err) {
                    mainCb(err);
                  } else {
                    mainCb();
                  }
                }; // XXX: <any> typing is to get around overly-restrictive ErrorCallback typing.


                eachLimit(files, deleteFile, finished);
              }
            });
          };

          DropboxFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;

            this._client.move(oldPath, newPath, function (error) {
              if (error) {
                // the move is permitted if newPath is a file.
                // Check if this is the case, and remove if so.
                this$1._client.stat(newPath, function (error2, stat) {
                  if (error2 || stat.isFolder) {
                    var missingPath = error.response.error.indexOf(oldPath) > -1 ? oldPath : newPath;
                    cb(this$1.convert(error, missingPath));
                  } else {
                    // Delete file, repeat rename.
                    this$1._client.remove(newPath, function (error2) {
                      if (error2) {
                        cb(this$1.convert(error2, newPath));
                      } else {
                        this$1.rename(oldPath, newPath, cb);
                      }
                    });
                  }
                });
              } else {
                cb();
              }
            });
          };

          DropboxFileSystem.prototype.stat = function stat(path$$1, isLstat, cb) {
            var this$1 = this; // Ignore lstat case -- Dropbox doesn't support symlinks
            // Stat the file

            this._client.stat(path$$1, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, path$$1));
              } else if (stat && stat.isRemoved) {
                // Dropbox keeps track of deleted files, so if a file has existed in the
                // past but doesn't any longer, you wont get an error
                cb(ApiError.FileError(ErrorCode.ENOENT, path$$1));
              } else {
                var stats = new Stats(this$1._statType(stat), stat.size);
                return cb(null, stats);
              }
            });
          };

          DropboxFileSystem.prototype.open = function open(path$$1, flags, mode, cb) {
            var this$1 = this; // Try and get the file's contents

            this._client.readFile(path$$1, function (error, content, dbStat) {
              if (error) {
                // If the file's being opened for reading and doesn't exist, return an
                // error
                if (flags.isReadable()) {
                  cb(this$1.convert(error, path$$1));
                } else {
                  switch (error.status) {
                    // If it's being opened for writing or appending, create it so that
                    // it can be written to
                    case Dropbox.ApiError.NOT_FOUND:
                      var ab = new ArrayBuffer(0);
                      return this$1._writeFileStrict(path$$1, ab, function (error2, stat) {
                        if (error2) {
                          cb(error2);
                        } else {
                          var file = this$1._makeFile(path$$1, flags, stat, arrayBuffer2Buffer(ab));

                          cb(null, file);
                        }
                      });

                    default:
                      return cb(this$1.convert(error, path$$1));
                  }
                }
              } else {
                // No error
                var buffer$$1; // Dropbox.js seems to set `content` to `null` rather than to an empty
                // buffer when reading an empty file. Not sure why this is.

                if (content === null) {
                  buffer$$1 = emptyBuffer();
                } else {
                  buffer$$1 = arrayBuffer2Buffer(content);
                }

                var file = this$1._makeFile(path$$1, flags, dbStat, buffer$$1);

                return cb(null, file);
              }
            });
          };

          DropboxFileSystem.prototype._writeFileStrict = function _writeFileStrict(p, data, cb) {
            var this$1 = this;
            var parent = path.dirname(p);
            this.stat(parent, false, function (error, stat) {
              if (error) {
                cb(ApiError.FileError(ErrorCode.ENOENT, parent));
              } else {
                this$1._client.writeFile(p, data, function (error2, stat) {
                  if (error2) {
                    cb(this$1.convert(error2, p));
                  } else {
                    cb(null, stat);
                  }
                });
              }
            });
          };
          /**
           * Private
           * Returns a BrowserFS object representing the type of a Dropbox.js stat object
           */


          DropboxFileSystem.prototype._statType = function _statType(stat) {
            return stat.isFile ? FileType.FILE : FileType.DIRECTORY;
          };
          /**
           * Private
           * Returns a BrowserFS object representing a File, created from the data
           * returned by calls to the Dropbox API.
           */


          DropboxFileSystem.prototype._makeFile = function _makeFile(path$$1, flag, stat, buffer$$1) {
            var type = this._statType(stat);

            var stats = new Stats(type, stat.size);
            return new DropboxFile(this, path$$1, flag, stats, buffer$$1);
          };
          /**
           * Private
           * Delete a file or directory from Dropbox
           * isFile should reflect which call was made to remove the it (`unlink` or
           * `rmdir`). If this doesn't match what's actually at `path`, an error will be
           * returned
           */


          DropboxFileSystem.prototype._remove = function _remove(path$$1, cb, isFile) {
            var this$1 = this;

            this._client.stat(path$$1, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, path$$1));
              } else {
                if (stat.isFile && !isFile) {
                  cb(ApiError.FileError(ErrorCode.ENOTDIR, path$$1));
                } else if (!stat.isFile && isFile) {
                  cb(ApiError.FileError(ErrorCode.EISDIR, path$$1));
                } else {
                  this$1._client.remove(path$$1, function (error) {
                    if (error) {
                      cb(this$1.convert(error, path$$1));
                    } else {
                      cb(null);
                    }
                  });
                }
              }
            });
          };
          /**
           * Delete a file
           */


          DropboxFileSystem.prototype.unlink = function unlink(path$$1, cb) {
            this._remove(path$$1, cb, true);
          };
          /**
           * Delete a directory
           */


          DropboxFileSystem.prototype.rmdir = function rmdir(path$$1, cb) {
            this._remove(path$$1, cb, false);
          };
          /**
           * Create a directory
           */


          DropboxFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            var this$1 = this; // Dropbox.js' client.mkdir() behaves like `mkdir -p`, i.e. it creates a
            // directory and all its ancestors if they don't exist.
            // Node's fs.mkdir() behaves like `mkdir`, i.e. it throws an error if an attempt
            // is made to create a directory without a parent.
            // To handle this inconsistency, a check for the existence of `path`'s parent
            // must be performed before it is created, and an error thrown if it does
            // not exist

            var parent = path.dirname(p);

            this._client.stat(parent, function (error, stat) {
              if (error) {
                cb(this$1.convert(error, parent));
              } else {
                this$1._client.mkdir(p, function (error) {
                  if (error) {
                    cb(ApiError.FileError(ErrorCode.EEXIST, p));
                  } else {
                    cb(null);
                  }
                });
              }
            });
          };
          /**
           * Get the names of the files in a directory
           */


          DropboxFileSystem.prototype.readdir = function readdir(path$$1, cb) {
            var this$1 = this;

            this._client.readdir(path$$1, function (error, files) {
              if (error) {
                return cb(this$1.convert(error));
              } else {
                return cb(null, files);
              }
            });
          };
          /**
           * Converts a Dropbox-JS error into a BFS error.
           */


          DropboxFileSystem.prototype.convert = function convert(err, path$$1) {
            if (path$$1 === void 0) path$$1 = null;
            var errorCode = errorCodeLookup[err.status];

            if (errorCode === undefined) {
              errorCode = ErrorCode.EIO;
            }

            if (!path$$1) {
              return new ApiError(errorCode);
            } else {
              return ApiError.FileError(errorCode, path$$1);
            }
          };

          return DropboxFileSystem;
        }(BaseFileSystem);

        DropboxFileSystem.Name = "Dropbox";
        DropboxFileSystem.Options = {
          client: {
            type: "object",
            description: "An *authenticated* Dropbox client. Must be from the 0.10 JS SDK.",
            validator: function (opt, cb) {
              if (opt.isAuthenticated && opt.isAuthenticated()) {
                cb();
              } else {
                cb(new ApiError(ErrorCode.EINVAL, "'client' option must be an authenticated Dropbox client from the v0.10 JS SDK."));
              }
            }
          }
        };
        /**
         * @hidden
         */

        function convertError(e, path$$1) {
          if (path$$1 === void 0) path$$1 = '';
          var errno = e.errno;
          var parent = e.node;
          var paths = [];

          while (parent) {
            paths.unshift(parent.name);

            if (parent === parent.parent) {
              break;
            }

            parent = parent.parent;
          }

          return new ApiError(errno, ErrorStrings[errno], paths.length > 0 ? '/' + paths.join('/') : path$$1);
        }

        var EmscriptenFile = function (BaseFile$$1) {
          function EmscriptenFile(_fs, _FS, _path, _stream) {
            BaseFile$$1.call(this);
            this._fs = _fs;
            this._FS = _FS;
            this._path = _path;
            this._stream = _stream;
          }

          if (BaseFile$$1) EmscriptenFile.__proto__ = BaseFile$$1;
          EmscriptenFile.prototype = Object.create(BaseFile$$1 && BaseFile$$1.prototype);
          EmscriptenFile.prototype.constructor = EmscriptenFile;

          EmscriptenFile.prototype.getPos = function getPos() {
            return undefined;
          };

          EmscriptenFile.prototype.close = function close(cb) {
            var err = null;

            try {
              this.closeSync();
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.closeSync = function closeSync() {
            try {
              this._FS.close(this._stream);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.stat = function stat(cb) {
            try {
              cb(null, this.statSync());
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.statSync = function statSync() {
            try {
              return this._fs.statSync(this._path, false);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.truncate = function truncate(len, cb) {
            var err = null;

            try {
              this.truncateSync(len);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.truncateSync = function truncateSync(len) {
            try {
              this._FS.ftruncate(this._stream.fd, len);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.write = function write(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.writeSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.writeSync = function writeSync(buffer$$1, offset, length, position) {
            try {
              var u8 = buffer2Uint8array(buffer$$1); // Emscripten is particular about what position is set to.

              var emPosition = position === null ? undefined : position;
              return this._FS.write(this._stream, u8, offset, length, emPosition);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.read = function read(buffer$$1, offset, length, position, cb) {
            try {
              cb(null, this.readSync(buffer$$1, offset, length, position), buffer$$1);
            } catch (e) {
              cb(e);
            }
          };

          EmscriptenFile.prototype.readSync = function readSync(buffer$$1, offset, length, position) {
            try {
              var u8 = buffer2Uint8array(buffer$$1); // Emscripten is particular about what position is set to.

              var emPosition = position === null ? undefined : position;
              return this._FS.read(this._stream, u8, offset, length, emPosition);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.sync = function sync(cb) {
            // NOP.
            cb();
          };

          EmscriptenFile.prototype.syncSync = function syncSync() {// NOP.
          };

          EmscriptenFile.prototype.chown = function chown(uid, gid, cb) {
            var err = null;

            try {
              this.chownSync(uid, gid);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.chownSync = function chownSync(uid, gid) {
            try {
              this._FS.fchown(this._stream.fd, uid, gid);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.chmod = function chmod(mode, cb) {
            var err = null;

            try {
              this.chmodSync(mode);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.chmodSync = function chmodSync(mode) {
            try {
              this._FS.fchmod(this._stream.fd, mode);
            } catch (e) {
              throw convertError(e, this._path);
            }
          };

          EmscriptenFile.prototype.utimes = function utimes(atime, mtime, cb) {
            var err = null;

            try {
              this.utimesSync(atime, mtime);
            } catch (e) {
              err = e;
            } finally {
              cb(err);
            }
          };

          EmscriptenFile.prototype.utimesSync = function utimesSync(atime, mtime) {
            this._fs.utimesSync(this._path, atime, mtime);
          };

          return EmscriptenFile;
        }(BaseFile);
        /**
         * Mounts an Emscripten file system into the BrowserFS file system.
         */


        var EmscriptenFileSystem = function (SynchronousFileSystem$$1) {
          function EmscriptenFileSystem(_FS) {
            SynchronousFileSystem$$1.call(this);
            this._FS = _FS;
          }

          if (SynchronousFileSystem$$1) EmscriptenFileSystem.__proto__ = SynchronousFileSystem$$1;
          EmscriptenFileSystem.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          EmscriptenFileSystem.prototype.constructor = EmscriptenFileSystem;
          /**
           * Create an EmscriptenFileSystem instance with the given options.
           */

          EmscriptenFileSystem.Create = function Create(opts, cb) {
            cb(null, new EmscriptenFileSystem(opts.FS));
          };

          EmscriptenFileSystem.isAvailable = function isAvailable() {
            return true;
          };

          EmscriptenFileSystem.prototype.getName = function getName() {
            return this._FS.DB_NAME();
          };

          EmscriptenFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          EmscriptenFileSystem.prototype.supportsLinks = function supportsLinks() {
            return true;
          };

          EmscriptenFileSystem.prototype.supportsProps = function supportsProps() {
            return true;
          };

          EmscriptenFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          EmscriptenFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            try {
              this._FS.rename(oldPath, newPath);
            } catch (e) {
              if (e.errno === ErrorCode.ENOENT) {
                throw convertError(e, this.existsSync(oldPath) ? newPath : oldPath);
              } else {
                throw convertError(e);
              }
            }
          };

          EmscriptenFileSystem.prototype.statSync = function statSync(p, isLstat) {
            try {
              var stats = isLstat ? this._FS.lstat(p) : this._FS.stat(p);
              var itemType = this.modeToFileType(stats.mode);
              return new Stats(itemType, stats.size, stats.mode, stats.atime, stats.mtime, stats.ctime);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.openSync = function openSync(p, flag, mode) {
            try {
              var stream = this._FS.open(p, flag.getFlagString(), mode);

              if (this._FS.isDir(stream.node.mode)) {
                this._FS.close(stream);

                throw ApiError.EISDIR(p);
              }

              return new EmscriptenFile(this, this._FS, p, stream);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.unlinkSync = function unlinkSync(p) {
            try {
              this._FS.unlink(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            try {
              this._FS.rmdir(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
            try {
              this._FS.mkdir(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.readdirSync = function readdirSync(p) {
            try {
              // Emscripten returns items for '.' and '..'. Node does not.
              return this._FS.readdir(p).filter(function (p) {
                return p !== '.' && p !== '..';
              });
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.truncateSync = function truncateSync(p, len) {
            try {
              this._FS.truncate(p, len);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.readFileSync = function readFileSync(p, encoding, flag) {
            try {
              var data = this._FS.readFile(p, {
                flags: flag.getFlagString()
              });

              var buff = uint8Array2Buffer(data);

              if (encoding) {
                return buff.toString(encoding);
              } else {
                return buff;
              }
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.writeFileSync = function writeFileSync(p, data, encoding, flag, mode) {
            try {
              if (encoding) {
                data = Buffer.from(data, encoding);
              }

              var u8 = buffer2Uint8array(data);

              this._FS.writeFile(p, u8, {
                flags: flag.getFlagString(),
                encoding: 'binary'
              });

              this._FS.chmod(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            try {
              isLchmod ? this._FS.lchmod(p, mode) : this._FS.chmod(p, mode);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            try {
              isLchown ? this._FS.lchown(p, uid, gid) : this._FS.chown(p, uid, gid);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
            try {
              this._FS.symlink(srcpath, dstpath);
            } catch (e) {
              throw convertError(e);
            }
          };

          EmscriptenFileSystem.prototype.readlinkSync = function readlinkSync(p) {
            try {
              return this._FS.readlink(p);
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            try {
              this._FS.utime(p, atime.getTime(), mtime.getTime());
            } catch (e) {
              throw convertError(e, p);
            }
          };

          EmscriptenFileSystem.prototype.modeToFileType = function modeToFileType(mode) {
            if (this._FS.isDir(mode)) {
              return FileType.DIRECTORY;
            } else if (this._FS.isFile(mode)) {
              return FileType.FILE;
            } else if (this._FS.isLink(mode)) {
              return FileType.SYMLINK;
            } else {
              throw ApiError.EPERM("Invalid mode: " + mode);
            }
          };

          return EmscriptenFileSystem;
        }(SynchronousFileSystem);

        EmscriptenFileSystem.Name = "EmscriptenFileSystem";
        EmscriptenFileSystem.Options = {
          FS: {
            type: "object",
            description: "The Emscripten file system to use (the `FS` variable)"
          }
        };
        /**
         * The FolderAdapter file system wraps a file system, and scopes all interactions to a subfolder of that file system.
         *
         * Example: Given a file system `foo` with folder `bar` and file `bar/baz`...
         *
         * ```javascript
         * BrowserFS.configure({
         *   fs: "FolderAdapter",
         *   options: {
         *     folder: "bar",
         *     wrapped: foo
         *   }
         * }, function(e) {
         *   var fs = BrowserFS.BFSRequire('fs');
         *   fs.readdirSync('/'); // ['baz']
         * });
         * ```
         */

        var FolderAdapter = function (BaseFileSystem$$1) {
          function FolderAdapter(folder, wrapped) {
            BaseFileSystem$$1.call(this);
            this._folder = folder;
            this._wrapped = wrapped;
          }

          if (BaseFileSystem$$1) FolderAdapter.__proto__ = BaseFileSystem$$1;
          FolderAdapter.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          FolderAdapter.prototype.constructor = FolderAdapter;
          /**
           * Creates a FolderAdapter instance with the given options.
           */

          FolderAdapter.Create = function Create(opts, cb) {
            cb(null, new FolderAdapter(opts.folder, opts.wrapped));
          };

          FolderAdapter.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Initialize the file system. Ensures that the wrapped file system
           * has the given folder.
           */


          FolderAdapter.prototype.initialize = function initialize(cb) {
            var this$1 = this;

            this._wrapped.exists(this._folder, function (exists) {
              if (exists) {
                cb();
              } else if (this$1._wrapped.isReadOnly()) {
                cb(ApiError.ENOENT(this$1._folder));
              } else {
                this$1._wrapped.mkdir(this$1._folder, 0x1ff, cb);
              }
            });
          };

          FolderAdapter.prototype.getName = function getName() {
            return this._wrapped.getName();
          };

          FolderAdapter.prototype.isReadOnly = function isReadOnly() {
            return this._wrapped.isReadOnly();
          };

          FolderAdapter.prototype.supportsProps = function supportsProps() {
            return this._wrapped.supportsProps();
          };

          FolderAdapter.prototype.supportsSynch = function supportsSynch() {
            return this._wrapped.supportsSynch();
          };

          FolderAdapter.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          return FolderAdapter;
        }(BaseFileSystem);

        FolderAdapter.Name = "FolderAdapter";
        FolderAdapter.Options = {
          folder: {
            type: "string",
            description: "The folder to use as the root directory"
          },
          wrapped: {
            type: "object",
            description: "The file system to wrap"
          }
        };
        /**
         * @hidden
         */

        function translateError(folder, e) {
          if (e !== null && typeof e === 'object') {
            var err = e;
            var p = err.path;

            if (p) {
              p = '/' + path.relative(folder, p);
              err.message = err.message.replace(err.path, p);
              err.path = p;
            }
          }

          return e;
        }
        /**
         * @hidden
         */


        function wrapCallback(folder, cb) {
          if (typeof cb === 'function') {
            return function (err) {
              if (arguments.length > 0) {
                arguments[0] = translateError(folder, err);
              }

              cb.apply(null, arguments);
            };
          } else {
            return cb;
          }
        }
        /**
         * @hidden
         */


        function wrapFunction(name, wrapFirst, wrapSecond) {
          if (name.slice(name.length - 4) !== 'Sync') {
            // Async function. Translate error in callback.
            return function () {
              if (arguments.length > 0) {
                if (wrapFirst) {
                  arguments[0] = path.join(this._folder, arguments[0]);
                }

                if (wrapSecond) {
                  arguments[1] = path.join(this._folder, arguments[1]);
                }

                arguments[arguments.length - 1] = wrapCallback(this._folder, arguments[arguments.length - 1]);
              }

              return this._wrapped[name].apply(this._wrapped, arguments);
            };
          } else {
            // Sync function. Translate error in catch.
            return function () {
              try {
                if (wrapFirst) {
                  arguments[0] = path.join(this._folder, arguments[0]);
                }

                if (wrapSecond) {
                  arguments[1] = path.join(this._folder, arguments[1]);
                }

                return this._wrapped[name].apply(this._wrapped, arguments);
              } catch (e) {
                throw translateError(this._folder, e);
              }
            };
          }
        } // First argument is a path.


        ['diskSpace', 'stat', 'statSync', 'open', 'openSync', 'unlink', 'unlinkSync', 'rmdir', 'rmdirSync', 'mkdir', 'mkdirSync', 'readdir', 'readdirSync', 'exists', 'existsSync', 'realpath', 'realpathSync', 'truncate', 'truncateSync', 'readFile', 'readFileSync', 'writeFile', 'writeFileSync', 'appendFile', 'appendFileSync', 'chmod', 'chmodSync', 'chown', 'chownSync', 'utimes', 'utimesSync', 'readlink', 'readlinkSync'].forEach(function (name) {
          FolderAdapter.prototype[name] = wrapFunction(name, true, false);
        }); // First and second arguments are paths.

        ['rename', 'renameSync', 'link', 'linkSync', 'symlink', 'symlinkSync'].forEach(function (name) {
          FolderAdapter.prototype[name] = wrapFunction(name, true, true);
        });
        /**
         * @hidden
         */

        var toExport;

        if (typeof window !== 'undefined') {
          toExport = window;
        } else if (typeof self !== 'undefined') {
          toExport = self;
        } else {
          toExport = global;
        }

        var global$1 = toExport;
        /**
         * @hidden
         */

        function isDirectoryEntry(entry) {
          return entry.isDirectory;
        }
        /**
         * @hidden
         */


        var _getFS = global$1.webkitRequestFileSystem || global$1.requestFileSystem || null;
        /**
         * @hidden
         */


        function _requestQuota(type, size, success, errorCallback) {
          // We cast navigator and window to '<any>' because everything here is
          // nonstandard functionality, despite the fact that Chrome has the only
          // implementation of the HTML5FS and is likely driving the standardization
          // process. Thus, these objects defined off of navigator and window are not
          // present in the DefinitelyTyped TypeScript typings for FileSystem.
          if (typeof navigator['webkitPersistentStorage'] !== 'undefined') {
            switch (type) {
              case global$1.PERSISTENT:
                navigator.webkitPersistentStorage.requestQuota(size, success, errorCallback);
                break;

              case global$1.TEMPORARY:
                navigator.webkitTemporaryStorage.requestQuota(size, success, errorCallback);
                break;

              default:
                errorCallback(new TypeError("Invalid storage type: " + type));
                break;
            }
          } else {
            global$1.webkitStorageInfo.requestQuota(type, size, success, errorCallback);
          }
        }
        /**
         * @hidden
         */


        function _toArray(list) {
          return Array.prototype.slice.call(list || [], 0);
        }
        /**
         * Converts the given DOMError into an appropriate ApiError.
         * @url https://developer.mozilla.org/en-US/docs/Web/API/DOMError
         * @hidden
         */


        function convertError$1(err, p, expectedDir) {
          switch (err.name) {
            /* The user agent failed to create a file or directory due to the existence of a file or
                directory with the same path.  */
            case "PathExistsError":
              return ApiError.EEXIST(p);

            /* The operation failed because it would cause the application to exceed its storage quota.  */

            case 'QuotaExceededError':
              return ApiError.FileError(ErrorCode.ENOSPC, p);

            /*  A required file or directory could not be found at the time an operation was processed.   */

            case 'NotFoundError':
              return ApiError.ENOENT(p);

            /* This is a security error code to be used in situations not covered by any other error codes.
                - A required file was unsafe for access within a Web application
                - Too many calls are being made on filesystem resources */

            case 'SecurityError':
              return ApiError.FileError(ErrorCode.EACCES, p);

            /* The modification requested was illegal. Examples of invalid modifications include moving a
                directory into its own child, moving a file into its parent directory without changing its name,
                or copying a directory to a path occupied by a file.  */

            case 'InvalidModificationError':
              return ApiError.FileError(ErrorCode.EPERM, p);

            /* The user has attempted to look up a file or directory, but the Entry found is of the wrong type
                [e.g. is a DirectoryEntry when the user requested a FileEntry].  */

            case 'TypeMismatchError':
              return ApiError.FileError(expectedDir ? ErrorCode.ENOTDIR : ErrorCode.EISDIR, p);

            /* A path or URL supplied to the API was malformed.  */

            case "EncodingError":
            /* An operation depended on state cached in an interface object, but that state that has changed
                since it was read from disk.  */

            case "InvalidStateError":
            /* The user attempted to write to a file or directory which could not be modified due to the state
                of the underlying filesystem.  */

            case "NoModificationAllowedError":
            default:
              return ApiError.FileError(ErrorCode.EINVAL, p);
          }
        } // A note about getFile and getDirectory options:
        // These methods are called at numerous places in this file, and are passed
        // some combination of these two options:
        //   - create: If true, the entry will be created if it doesn't exist.
        //             If false, an error will be thrown if it doesn't exist.
        //   - exclusive: If true, only create the entry if it doesn't already exist,
        //                and throw an error if it does.


        var HTML5FSFile = function (PreloadFile$$1) {
          function HTML5FSFile(fs, entry, path$$1, flag, stat, contents) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stat, contents);
            this._entry = entry;
          }

          if (PreloadFile$$1) HTML5FSFile.__proto__ = PreloadFile$$1;
          HTML5FSFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          HTML5FSFile.prototype.constructor = HTML5FSFile;

          HTML5FSFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (!this.isDirty()) {
              return cb();
            }

            this._entry.createWriter(function (writer) {
              var buffer$$1 = this$1.getBuffer();
              var blob = new Blob([buffer2ArrayBuffer(buffer$$1)]);
              var length = blob.size;

              writer.onwriteend = function (err) {
                writer.onwriteend = null;
                writer.onerror = null;
                writer.truncate(length);
                this$1.resetDirty();
                cb();
              };

              writer.onerror = function (err) {
                cb(convertError$1(err, this$1.getPath(), false));
              };

              writer.write(blob);
            });
          };

          HTML5FSFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return HTML5FSFile;
        }(PreloadFile);
        /**
         * A read-write filesystem backed by the HTML5 FileSystem API.
         *
         * As the HTML5 FileSystem is only implemented in Blink, this interface is
         * only available in Chrome.
         */


        var HTML5FS = function (BaseFileSystem$$1) {
          function HTML5FS(size, type, deprecateMsg) {
            if (size === void 0) size = 5;
            if (type === void 0) type = global$1.PERSISTENT;
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this); // Convert MB to bytes.

            this.size = 1024 * 1024 * size;
            this.type = type;
            deprecationMessage(deprecateMsg, HTML5FS.Name, {
              size: size,
              type: type
            });
          }

          if (BaseFileSystem$$1) HTML5FS.__proto__ = BaseFileSystem$$1;
          HTML5FS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          HTML5FS.prototype.constructor = HTML5FS;
          /**
           * Creates an HTML5FS instance with the given options.
           */

          HTML5FS.Create = function Create(opts, cb) {
            var fs = new HTML5FS(opts.size, opts.type, false);
            fs.allocate(function (e) {
              return e ? cb(e) : cb(null, fs);
            }, false);
          };

          HTML5FS.isAvailable = function isAvailable() {
            return !!_getFS;
          };

          HTML5FS.prototype.getName = function getName() {
            return HTML5FS.Name;
          };

          HTML5FS.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          HTML5FS.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          HTML5FS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          HTML5FS.prototype.supportsSynch = function supportsSynch() {
            return false;
          };
          /**
           * **Deprecated. Please use Create() method instead to create and allocate an HTML5FS.**
           *
           * Requests a storage quota from the browser to back this FS.
           * Must be called before file system can be used!
           */


          HTML5FS.prototype.allocate = function allocate(cb, deprecateMsg) {
            var this$1 = this;
            if (cb === void 0) cb = function () {};
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[HTML5FS] HTML5FS.allocate() is deprecated and will be removed in the next major release. Please use 'HTML5FS.Create({type: " + this.type + ", size: " + this.size + "}, cb)' to create and allocate HTML5FS instances.");
            }

            var success = function (fs) {
              this$1.fs = fs;
              cb();
            };

            var error = function (err) {
              cb(convertError$1(err, "/", true));
            };

            if (this.type === global$1.PERSISTENT) {
              _requestQuota(this.type, this.size, function (granted) {
                _getFS(this$1.type, granted, success, error);
              }, error);
            } else {
              _getFS(this.type, this.size, success, error);
            }
          };
          /**
           * Deletes everything in the FS. Used for testing.
           * Karma clears the storage after you quit it but not between runs of the test
           * suite, and the tests expect an empty FS every time.
           */


          HTML5FS.prototype.empty = function empty(mainCb) {
            // Get a list of all entries in the root directory to delete them
            this._readdir('/', function (err, entries) {
              if (err) {
                console.error('Failed to empty FS');
                mainCb(err);
              } else {
                // Called when every entry has been operated on
                var finished = function (er) {
                  if (err) {
                    console.error("Failed to empty FS");
                    mainCb(err);
                  } else {
                    mainCb();
                  }
                }; // Removes files and recursively removes directories


                var deleteEntry = function (entry, cb) {
                  var succ = function () {
                    cb();
                  };

                  var error = function (err) {
                    cb(convertError$1(err, entry.fullPath, !entry.isDirectory));
                  };

                  if (isDirectoryEntry(entry)) {
                    entry.removeRecursively(succ, error);
                  } else {
                    entry.remove(succ, error);
                  }
                }; // Loop through the entries and remove them, then call the callback
                // when they're all finished.


                eachLimit(entries, deleteEntry, finished);
              }
            });
          };

          HTML5FS.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;
            var semaphore = 2;
            var successCount = 0;
            var root = this.fs.root;
            var currentPath = oldPath;

            var error = function (err) {
              if (--semaphore <= 0) {
                cb(convertError$1(err, currentPath, false));
              }
            };

            var success = function (file) {
              if (++successCount === 2) {
                return cb(new ApiError(ErrorCode.EINVAL, "Something was identified as both a file and a directory. This should never happen."));
              } // SPECIAL CASE: If newPath === oldPath, and the path exists, then
              // this operation trivially succeeds.


              if (oldPath === newPath) {
                return cb();
              } // Get the new parent directory.


              currentPath = path.dirname(newPath);
              root.getDirectory(currentPath, {}, function (parentDir) {
                currentPath = path.basename(newPath);
                file.moveTo(parentDir, currentPath, function (entry) {
                  cb();
                }, function (err) {
                  // SPECIAL CASE: If oldPath is a directory, and newPath is a
                  // file, rename should delete the file and perform the move.
                  if (file.isDirectory) {
                    currentPath = newPath; // Unlink only works on files. Try to delete newPath.

                    this$1.unlink(newPath, function (e) {
                      if (e) {
                        // newPath is probably a directory.
                        error(err);
                      } else {
                        // Recur, now that newPath doesn't exist.
                        this$1.rename(oldPath, newPath, cb);
                      }
                    });
                  } else {
                    error(err);
                  }
                });
              }, error);
            }; // We don't know if oldPath is a *file* or a *directory*, and there's no
            // way to stat items. So launch both requests, see which one succeeds.


            root.getFile(oldPath, {}, success, error);
            root.getDirectory(oldPath, {}, success, error);
          };

          HTML5FS.prototype.stat = function stat(path$$1, isLstat, cb) {
            var this$1 = this; // Throw an error if the entry doesn't exist, because then there's nothing
            // to stat.

            var opts = {
              create: false
            }; // Called when the path has been successfully loaded as a file.

            var loadAsFile = function (entry) {
              var fileFromEntry = function (file) {
                var stat = new Stats(FileType.FILE, file.size);
                cb(null, stat);
              };

              entry.file(fileFromEntry, failedToLoad);
            }; // Called when the path has been successfully loaded as a directory.


            var loadAsDir = function (dir$$1) {
              // Directory entry size can't be determined from the HTML5 FS API, and is
              // implementation-dependant anyway, so a dummy value is used.
              var size = 4096;
              var stat = new Stats(FileType.DIRECTORY, size);
              cb(null, stat);
            }; // Called when the path couldn't be opened as a directory or a file.


            var failedToLoad = function (err) {
              cb(convertError$1(err, path$$1, false
              /* Unknown / irrelevant */
              ));
            }; // Called when the path couldn't be opened as a file, but might still be a
            // directory.


            var failedToLoadAsFile = function () {
              this$1.fs.root.getDirectory(path$$1, opts, loadAsDir, failedToLoad);
            }; // No method currently exists to determine whether a path refers to a
            // directory or a file, so this implementation tries both and uses the first
            // one that succeeds.


            this.fs.root.getFile(path$$1, opts, loadAsFile, failedToLoadAsFile);
          };

          HTML5FS.prototype.open = function open(p, flags, mode, cb) {
            var this$1 = this; // XXX: err is a DOMError

            var error = function (err) {
              if (err.name === 'InvalidModificationError' && flags.isExclusive()) {
                cb(ApiError.EEXIST(p));
              } else {
                cb(convertError$1(err, p, false));
              }
            };

            this.fs.root.getFile(p, {
              create: flags.pathNotExistsAction() === ActionType.CREATE_FILE,
              exclusive: flags.isExclusive()
            }, function (entry) {
              // Try to fetch corresponding file.
              entry.file(function (file) {
                var reader = new FileReader();

                reader.onloadend = function (event) {
                  var bfsFile = this$1._makeFile(p, entry, flags, file, reader.result);

                  cb(null, bfsFile);
                };

                reader.onerror = function (ev) {
                  error(reader.error);
                };

                reader.readAsArrayBuffer(file);
              }, error);
            }, error);
          };

          HTML5FS.prototype.unlink = function unlink(path$$1, cb) {
            this._remove(path$$1, cb, true);
          };

          HTML5FS.prototype.rmdir = function rmdir(path$$1, cb) {
            var this$1 = this; // Check if directory is non-empty, first.

            this.readdir(path$$1, function (e, files) {
              if (e) {
                cb(e);
              } else if (files.length > 0) {
                cb(ApiError.ENOTEMPTY(path$$1));
              } else {
                this$1._remove(path$$1, cb, false);
              }
            });
          };

          HTML5FS.prototype.mkdir = function mkdir(path$$1, mode, cb) {
            // Create the directory, but throw an error if it already exists, as per
            // mkdir(1)
            var opts = {
              create: true,
              exclusive: true
            };

            var success = function (dir$$1) {
              cb();
            };

            var error = function (err) {
              cb(convertError$1(err, path$$1, true));
            };

            this.fs.root.getDirectory(path$$1, opts, success, error);
          };
          /**
           * Map _readdir's list of `FileEntry`s to their names and return that.
           */


          HTML5FS.prototype.readdir = function readdir(path$$1, cb) {
            this._readdir(path$$1, function (e, entries) {
              if (entries) {
                var rv = [];

                for (var i = 0, list = entries; i < list.length; i += 1) {
                  var entry = list[i];
                  rv.push(entry.name);
                }

                cb(null, rv);
              } else {
                return cb(e);
              }
            });
          };
          /**
           * Returns a BrowserFS object representing a File.
           */


          HTML5FS.prototype._makeFile = function _makeFile(path$$1, entry, flag, stat, data) {
            if (data === void 0) data = new ArrayBuffer(0);
            var stats = new Stats(FileType.FILE, stat.size);
            var buffer$$1 = arrayBuffer2Buffer(data);
            return new HTML5FSFile(this, entry, path$$1, flag, stats, buffer$$1);
          };
          /**
           * Returns an array of `FileEntry`s. Used internally by empty and readdir.
           */


          HTML5FS.prototype._readdir = function _readdir(path$$1, cb) {
            var error = function (err) {
              cb(convertError$1(err, path$$1, true));
            }; // Grab the requested directory.


            this.fs.root.getDirectory(path$$1, {
              create: false
            }, function (dirEntry) {
              var reader = dirEntry.createReader();
              var entries = []; // Call the reader.readEntries() until no more results are returned.

              var readEntries = function () {
                reader.readEntries(function (results) {
                  if (results.length) {
                    entries = entries.concat(_toArray(results));
                    readEntries();
                  } else {
                    cb(null, entries);
                  }
                }, error);
              };

              readEntries();
            }, error);
          };
          /**
           * Delete a file or directory from the file system
           * isFile should reflect which call was made to remove the it (`unlink` or
           * `rmdir`). If this doesn't match what's actually at `path`, an error will be
           * returned
           */


          HTML5FS.prototype._remove = function _remove(path$$1, cb, isFile) {
            var success = function (entry) {
              var succ = function () {
                cb();
              };

              var err = function (err) {
                cb(convertError$1(err, path$$1, !isFile));
              };

              entry.remove(succ, err);
            };

            var error = function (err) {
              cb(convertError$1(err, path$$1, !isFile));
            }; // Deleting the entry, so don't create it


            var opts = {
              create: false
            };

            if (isFile) {
              this.fs.root.getFile(path$$1, opts, success, error);
            } else {
              this.fs.root.getDirectory(path$$1, opts, success, error);
            }
          };

          return HTML5FS;
        }(BaseFileSystem);

        HTML5FS.Name = "HTML5FS";
        HTML5FS.Options = {
          size: {
            type: "number",
            optional: true,
            description: "Storage quota to request, in megabytes. Allocated value may be less. Defaults to 5."
          },
          type: {
            type: "number",
            optional: true,
            description: "window.PERSISTENT or window.TEMPORARY. Defaults to PERSISTENT."
          }
        };
        /**
         * Generic inode definition that can easily be serialized.
         */

        var Inode = function Inode(id, size, mode, atime, mtime, ctime) {
          this.id = id;
          this.size = size;
          this.mode = mode;
          this.atime = atime;
          this.mtime = mtime;
          this.ctime = ctime;
        };
        /**
         * Converts the buffer into an Inode.
         */


        Inode.fromBuffer = function fromBuffer(buffer$$1) {
          if (buffer$$1 === undefined) {
            throw new Error("NO");
          }

          return new Inode(buffer$$1.toString('ascii', 30), buffer$$1.readUInt32LE(0), buffer$$1.readUInt16LE(4), buffer$$1.readDoubleLE(6), buffer$$1.readDoubleLE(14), buffer$$1.readDoubleLE(22));
        };
        /**
         * Handy function that converts the Inode to a Node Stats object.
         */


        Inode.prototype.toStats = function toStats() {
          return new Stats((this.mode & 0xF000) === FileType.DIRECTORY ? FileType.DIRECTORY : FileType.FILE, this.size, this.mode, new Date(this.atime), new Date(this.mtime), new Date(this.ctime));
        };
        /**
         * Get the size of this Inode, in bytes.
         */


        Inode.prototype.getSize = function getSize() {
          // ASSUMPTION: ID is ASCII (1 byte per char).
          return 30 + this.id.length;
        };
        /**
         * Writes the inode into the start of the buffer.
         */


        Inode.prototype.toBuffer = function toBuffer(buff) {
          if (buff === void 0) buff = Buffer.alloc(this.getSize());
          buff.writeUInt32LE(this.size, 0);
          buff.writeUInt16LE(this.mode, 4);
          buff.writeDoubleLE(this.atime, 6);
          buff.writeDoubleLE(this.mtime, 14);
          buff.writeDoubleLE(this.ctime, 22);
          buff.write(this.id, 30, this.id.length, 'ascii');
          return buff;
        };
        /**
         * Updates the Inode using information from the stats object. Used by file
         * systems at sync time, e.g.:
         * - Program opens file and gets a File object.
         * - Program mutates file. File object is responsible for maintaining
         *   metadata changes locally -- typically in a Stats object.
         * - Program closes file. File object's metadata changes are synced with the
         *   file system.
         * @return True if any changes have occurred.
         */


        Inode.prototype.update = function update(stats) {
          var hasChanged = false;

          if (this.size !== stats.size) {
            this.size = stats.size;
            hasChanged = true;
          }

          if (this.mode !== stats.mode) {
            this.mode = stats.mode;
            hasChanged = true;
          }

          var atimeMs = stats.atime.getTime();

          if (this.atime !== atimeMs) {
            this.atime = atimeMs;
            hasChanged = true;
          }

          var mtimeMs = stats.mtime.getTime();

          if (this.mtime !== mtimeMs) {
            this.mtime = mtimeMs;
            hasChanged = true;
          }

          var ctimeMs = stats.ctime.getTime();

          if (this.ctime !== ctimeMs) {
            this.ctime = ctimeMs;
            hasChanged = true;
          }

          return hasChanged;
        }; // XXX: Copied from Stats. Should reconcile these two into something more
        //  compact.

        /**
         * @return [Boolean] True if this item is a file.
         */


        Inode.prototype.isFile = function isFile() {
          return (this.mode & 0xF000) === FileType.FILE;
        };
        /**
         * @return [Boolean] True if this item is a directory.
         */


        Inode.prototype.isDirectory = function isDirectory() {
          return (this.mode & 0xF000) === FileType.DIRECTORY;
        };
        /**
         * @hidden
         */


        var ROOT_NODE_ID = "/";
        /**
         * @hidden
         */

        var emptyDirNode = null;
        /**
         * Returns an empty directory node.
         * @hidden
         */

        function getEmptyDirNode() {
          if (emptyDirNode) {
            return emptyDirNode;
          }

          return emptyDirNode = Buffer.from("{}");
        }
        /**
         * Generates a random ID.
         * @hidden
         */


        function GenerateRandomID() {
          // From http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript
          return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0;
            var v = c === 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
          });
        }
        /**
         * Helper function. Checks if 'e' is defined. If so, it triggers the callback
         * with 'e' and returns false. Otherwise, returns true.
         * @hidden
         */


        function noError(e, cb) {
          if (e) {
            cb(e);
            return false;
          }

          return true;
        }
        /**
         * Helper function. Checks if 'e' is defined. If so, it aborts the transaction,
         * triggers the callback with 'e', and returns false. Otherwise, returns true.
         * @hidden
         */


        function noErrorTx(e, tx, cb) {
          if (e) {
            tx.abort(function () {
              cb(e);
            });
            return false;
          }

          return true;
        }
        /**
         * A simple RW transaction for simple synchronous key-value stores.
         */


        var SimpleSyncRWTransaction = function SimpleSyncRWTransaction(store) {
          this.store = store;
          /**
           * Stores data in the keys we modify prior to modifying them.
           * Allows us to roll back commits.
           */

          this.originalData = {};
          /**
           * List of keys modified in this transaction, if any.
           */

          this.modifiedKeys = [];
        };

        SimpleSyncRWTransaction.prototype.get = function get(key) {
          var val = this.store.get(key);
          this.stashOldValue(key, val);
          return val;
        };

        SimpleSyncRWTransaction.prototype.put = function put(key, data, overwrite) {
          this.markModified(key);
          return this.store.put(key, data, overwrite);
        };

        SimpleSyncRWTransaction.prototype.del = function del(key) {
          this.markModified(key);
          this.store.del(key);
        };

        SimpleSyncRWTransaction.prototype.commit = function commit() {};

        SimpleSyncRWTransaction.prototype.abort = function abort() {
          var this$1 = this; // Rollback old values.

          for (var i = 0, list = this$1.modifiedKeys; i < list.length; i += 1) {
            var key = list[i];
            var value = this$1.originalData[key];

            if (!value) {
              // Key didn't exist.
              this$1.store.del(key);
            } else {
              // Key existed. Store old value.
              this$1.store.put(key, value, true);
            }
          }
        };
        /**
         * Stashes given key value pair into `originalData` if it doesn't already
         * exist. Allows us to stash values the program is requesting anyway to
         * prevent needless `get` requests if the program modifies the data later
         * on during the transaction.
         */


        SimpleSyncRWTransaction.prototype.stashOldValue = function stashOldValue(key, value) {
          // Keep only the earliest value in the transaction.
          if (!this.originalData.hasOwnProperty(key)) {
            this.originalData[key] = value;
          }
        };
        /**
         * Marks the given key as modified, and stashes its value if it has not been
         * stashed already.
         */


        SimpleSyncRWTransaction.prototype.markModified = function markModified(key) {
          if (this.modifiedKeys.indexOf(key) === -1) {
            this.modifiedKeys.push(key);

            if (!this.originalData.hasOwnProperty(key)) {
              this.originalData[key] = this.store.get(key);
            }
          }
        };

        var SyncKeyValueFile = function (PreloadFile$$1) {
          function SyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) SyncKeyValueFile.__proto__ = PreloadFile$$1;
          SyncKeyValueFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          SyncKeyValueFile.prototype.constructor = SyncKeyValueFile;

          SyncKeyValueFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this.getPath(), this.getBuffer(), this.getStats());

              this.resetDirty();
            }
          };

          SyncKeyValueFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return SyncKeyValueFile;
        }(PreloadFile);
        /**
         * A "Synchronous key-value file system". Stores data to/retrieves data from an
         * underlying key-value store.
         *
         * We use a unique ID for each node in the file system. The root node has a
         * fixed ID.
         * @todo Introduce Node ID caching.
         * @todo Check modes.
         */


        var SyncKeyValueFileSystem = function (SynchronousFileSystem$$1) {
          function SyncKeyValueFileSystem(options) {
            SynchronousFileSystem$$1.call(this);
            this.store = options.store; // INVARIANT: Ensure that the root exists.

            this.makeRootDirectory();
          }

          if (SynchronousFileSystem$$1) SyncKeyValueFileSystem.__proto__ = SynchronousFileSystem$$1;
          SyncKeyValueFileSystem.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          SyncKeyValueFileSystem.prototype.constructor = SyncKeyValueFileSystem;

          SyncKeyValueFileSystem.isAvailable = function isAvailable() {
            return true;
          };

          SyncKeyValueFileSystem.prototype.getName = function getName() {
            return this.store.name();
          };

          SyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          SyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Delete all contents stored in the file system.
           */


          SyncKeyValueFileSystem.prototype.empty = function empty() {
            this.store.clear(); // INVARIANT: Root always exists.

            this.makeRootDirectory();
          };

          SyncKeyValueFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            var tx = this.store.beginTransaction('readwrite'),
                oldParent = path.dirname(oldPath),
                oldName = path.basename(oldPath),
                newParent = path.dirname(newPath),
                newName = path.basename(newPath),
                // Remove oldPath from parent's directory listing.
            oldDirNode = this.findINode(tx, oldParent),
                oldDirList = this.getDirListing(tx, oldParent, oldDirNode);

            if (!oldDirList[oldName]) {
              throw ApiError.ENOENT(oldPath);
            }

            var nodeId = oldDirList[oldName];
            delete oldDirList[oldName]; // Invariant: Can't move a folder inside itself.
            // This funny little hack ensures that the check passes only if oldPath
            // is a subpath of newParent. We append '/' to avoid matching folders that
            // are a substring of the bottom-most folder in the path.

            if ((newParent + '/').indexOf(oldPath + '/') === 0) {
              throw new ApiError(ErrorCode.EBUSY, oldParent);
            } // Add newPath to parent's directory listing.


            var newDirNode, newDirList;

            if (newParent === oldParent) {
              // Prevent us from re-grabbing the same directory listing, which still
              // contains oldName.
              newDirNode = oldDirNode;
              newDirList = oldDirList;
            } else {
              newDirNode = this.findINode(tx, newParent);
              newDirList = this.getDirListing(tx, newParent, newDirNode);
            }

            if (newDirList[newName]) {
              // If it's a file, delete it.
              var newNameNode = this.getINode(tx, newPath, newDirList[newName]);

              if (newNameNode.isFile()) {
                try {
                  tx.del(newNameNode.id);
                  tx.del(newDirList[newName]);
                } catch (e) {
                  tx.abort();
                  throw e;
                }
              } else {
                // If it's a directory, throw a permissions error.
                throw ApiError.EPERM(newPath);
              }
            }

            newDirList[newName] = nodeId; // Commit the two changed directory listings.

            try {
              tx.put(oldDirNode.id, Buffer.from(JSON.stringify(oldDirList)), true);
              tx.put(newDirNode.id, Buffer.from(JSON.stringify(newDirList)), true);
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
          };

          SyncKeyValueFileSystem.prototype.statSync = function statSync(p, isLstat) {
            // Get the inode to the item, convert it into a Stats object.
            return this.findINode(this.store.beginTransaction('readonly'), p).toStats();
          };

          SyncKeyValueFileSystem.prototype.createFileSync = function createFileSync(p, flag, mode) {
            var tx = this.store.beginTransaction('readwrite'),
                data = emptyBuffer(),
                newFile = this.commitNewFile(tx, p, FileType.FILE, mode, data); // Open the file.

            return new SyncKeyValueFile(this, p, flag, newFile.toStats(), data);
          };

          SyncKeyValueFileSystem.prototype.openFileSync = function openFileSync(p, flag) {
            var tx = this.store.beginTransaction('readonly'),
                node = this.findINode(tx, p),
                data = tx.get(node.id);

            if (data === undefined) {
              throw ApiError.ENOENT(p);
            }

            return new SyncKeyValueFile(this, p, flag, node.toStats(), data);
          };

          SyncKeyValueFileSystem.prototype.unlinkSync = function unlinkSync(p) {
            this.removeEntry(p, false);
          };

          SyncKeyValueFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            // Check first if directory is empty.
            if (this.readdirSync(p).length > 0) {
              throw ApiError.ENOTEMPTY(p);
            } else {
              this.removeEntry(p, true);
            }
          };

          SyncKeyValueFileSystem.prototype.mkdirSync = function mkdirSync(p, mode) {
            var tx = this.store.beginTransaction('readwrite'),
                data = Buffer.from('{}');
            this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data);
          };

          SyncKeyValueFileSystem.prototype.readdirSync = function readdirSync(p) {
            var tx = this.store.beginTransaction('readonly');
            return Object.keys(this.getDirListing(tx, p, this.findINode(tx, p)));
          };

          SyncKeyValueFileSystem.prototype._syncSync = function _syncSync(p, data, stats) {
            // @todo Ensure mtime updates properly, and use that to determine if a data
            //       update is required.
            var tx = this.store.beginTransaction('readwrite'),
                // We use the _findInode helper because we actually need the INode id.
            fileInodeId = this._findINode(tx, path.dirname(p), path.basename(p)),
                fileInode = this.getINode(tx, p, fileInodeId),
                inodeChanged = fileInode.update(stats);

            try {
              // Sync data.
              tx.put(fileInode.id, data, true); // Sync metadata.

              if (inodeChanged) {
                tx.put(fileInodeId, fileInode.toBuffer(), true);
              }
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
          };
          /**
           * Checks if the root directory exists. Creates it if it doesn't.
           */


          SyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory() {
            var tx = this.store.beginTransaction('readwrite');

            if (tx.get(ROOT_NODE_ID) === undefined) {
              // Create new inode.
              var currTime = new Date().getTime(),
                  // Mode 0666
              dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime); // If the root doesn't exist, the first random ID shouldn't exist,
              // either.

              tx.put(dirInode.id, getEmptyDirNode(), false);
              tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false);
              tx.commit();
            }
          };
          /**
           * Helper function for findINode.
           * @param parent The parent directory of the file we are attempting to find.
           * @param filename The filename of the inode we are attempting to find, minus
           *   the parent.
           * @return string The ID of the file's inode in the file system.
           */


          SyncKeyValueFileSystem.prototype._findINode = function _findINode(tx, parent, filename) {
            var this$1 = this;

            var readDirectory = function (inode) {
              // Get the root's directory listing.
              var dirList = this$1.getDirListing(tx, parent, inode); // Get the file's ID.

              if (dirList[filename]) {
                return dirList[filename];
              } else {
                throw ApiError.ENOENT(path.resolve(parent, filename));
              }
            };

            if (parent === '/') {
              if (filename === '') {
                // BASE CASE #1: Return the root's ID.
                return ROOT_NODE_ID;
              } else {
                // BASE CASE #2: Find the item in the root ndoe.
                return readDirectory(this.getINode(tx, parent, ROOT_NODE_ID));
              }
            } else {
              return readDirectory(this.getINode(tx, parent + path.sep + filename, this._findINode(tx, path.dirname(parent), path.basename(parent))));
            }
          };
          /**
           * Finds the Inode of the given path.
           * @param p The path to look up.
           * @return The Inode of the path p.
           * @todo memoize/cache
           */


          SyncKeyValueFileSystem.prototype.findINode = function findINode(tx, p) {
            return this.getINode(tx, p, this._findINode(tx, path.dirname(p), path.basename(p)));
          };
          /**
           * Given the ID of a node, retrieves the corresponding Inode.
           * @param tx The transaction to use.
           * @param p The corresponding path to the file (used for error messages).
           * @param id The ID to look up.
           */


          SyncKeyValueFileSystem.prototype.getINode = function getINode(tx, p, id) {
            var inode = tx.get(id);

            if (inode === undefined) {
              throw ApiError.ENOENT(p);
            }

            return Inode.fromBuffer(inode);
          };
          /**
           * Given the Inode of a directory, retrieves the corresponding directory
           * listing.
           */


          SyncKeyValueFileSystem.prototype.getDirListing = function getDirListing(tx, p, inode) {
            if (!inode.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            }

            var data = tx.get(inode.id);

            if (data === undefined) {
              throw ApiError.ENOENT(p);
            }

            return JSON.parse(data.toString());
          };
          /**
           * Creates a new node under a random ID. Retries 5 times before giving up in
           * the exceedingly unlikely chance that we try to reuse a random GUID.
           * @return The GUID that the data was stored under.
           */


          SyncKeyValueFileSystem.prototype.addNewNode = function addNewNode(tx, data) {
            var retries = 0;
            var currId;

            while (retries < 5) {
              try {
                currId = GenerateRandomID();
                tx.put(currId, data, false);
                return currId;
              } catch (e) {// Ignore and reroll.
              }
            }

            throw new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.');
          };
          /**
           * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
           * the given mode.
           * Note: This will commit the transaction.
           * @param p The path to the new file.
           * @param type The type of the new file.
           * @param mode The mode to create the new file with.
           * @param data The data to store at the file's data node.
           * @return The Inode for the new file.
           */


          SyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data) {
            var parentDir = path.dirname(p),
                fname = path.basename(p),
                parentNode = this.findINode(tx, parentDir),
                dirListing = this.getDirListing(tx, parentDir, parentNode),
                currTime = new Date().getTime(); // Invariant: The root always exists.
            // If we don't check this prior to taking steps below, we will create a
            // file with name '' in root should p == '/'.

            if (p === '/') {
              throw ApiError.EEXIST(p);
            } // Check if file already exists.


            if (dirListing[fname]) {
              throw ApiError.EEXIST(p);
            }

            var fileNode;

            try {
              // Commit data.
              var dataId = this.addNewNode(tx, data);
              fileNode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime); // Commit file node.

              var fileNodeId = this.addNewNode(tx, fileNode.toBuffer()); // Update and commit parent directory listing.

              dirListing[fname] = fileNodeId;
              tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true);
            } catch (e) {
              tx.abort();
              throw e;
            }

            tx.commit();
            return fileNode;
          };
          /**
           * Remove all traces of the given path from the file system.
           * @param p The path to remove from the file system.
           * @param isDir Does the path belong to a directory, or a file?
           * @todo Update mtime.
           */


          SyncKeyValueFileSystem.prototype.removeEntry = function removeEntry(p, isDir) {
            var tx = this.store.beginTransaction('readwrite'),
                parent = path.dirname(p),
                parentNode = this.findINode(tx, parent),
                parentListing = this.getDirListing(tx, parent, parentNode),
                fileName = path.basename(p);

            if (!parentListing[fileName]) {
              throw ApiError.ENOENT(p);
            } // Remove from directory listing of parent.


            var fileNodeId = parentListing[fileName];
            delete parentListing[fileName]; // Get file inode.

            var fileNode = this.getINode(tx, p, fileNodeId);

            if (!isDir && fileNode.isDirectory()) {
              throw ApiError.EISDIR(p);
            } else if (isDir && !fileNode.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            }

            try {
              // Delete data.
              tx.del(fileNode.id); // Delete node.

              tx.del(fileNodeId); // Update directory listing.

              tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true);
            } catch (e) {
              tx.abort();
              throw e;
            } // Success.


            tx.commit();
          };

          return SyncKeyValueFileSystem;
        }(SynchronousFileSystem);

        var AsyncKeyValueFile = function (PreloadFile$$1) {
          function AsyncKeyValueFile(_fs, _path, _flag, _stat, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
          }

          if (PreloadFile$$1) AsyncKeyValueFile.__proto__ = PreloadFile$$1;
          AsyncKeyValueFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          AsyncKeyValueFile.prototype.constructor = AsyncKeyValueFile;

          AsyncKeyValueFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (this.isDirty()) {
              this._fs._sync(this.getPath(), this.getBuffer(), this.getStats(), function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          AsyncKeyValueFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          return AsyncKeyValueFile;
        }(PreloadFile);
        /**
         * An "Asynchronous key-value file system". Stores data to/retrieves data from
         * an underlying asynchronous key-value store.
         */


        var AsyncKeyValueFileSystem = function (BaseFileSystem$$1) {
          function AsyncKeyValueFileSystem() {
            BaseFileSystem$$1.apply(this, arguments);
          }

          if (BaseFileSystem$$1) AsyncKeyValueFileSystem.__proto__ = BaseFileSystem$$1;
          AsyncKeyValueFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          AsyncKeyValueFileSystem.prototype.constructor = AsyncKeyValueFileSystem;

          AsyncKeyValueFileSystem.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Initializes the file system. Typically called by subclasses' async
           * constructors.
           */


          AsyncKeyValueFileSystem.prototype.init = function init(store, cb) {
            this.store = store; // INVARIANT: Ensure that the root exists.

            this.makeRootDirectory(cb);
          };

          AsyncKeyValueFileSystem.prototype.getName = function getName() {
            return this.store.name();
          };

          AsyncKeyValueFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsSymlinks = function supportsSymlinks() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          AsyncKeyValueFileSystem.prototype.supportsSynch = function supportsSynch() {
            return false;
          };
          /**
           * Delete all contents stored in the file system.
           */


          AsyncKeyValueFileSystem.prototype.empty = function empty(cb) {
            var this$1 = this;
            this.store.clear(function (e) {
              if (noError(e, cb)) {
                // INVARIANT: Root always exists.
                this$1.makeRootDirectory(cb);
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite');
            var oldParent = path.dirname(oldPath),
                oldName = path.basename(oldPath);
            var newParent = path.dirname(newPath),
                newName = path.basename(newPath);
            var inodes = {};
            var lists = {};
            var errorOccurred = false; // Invariant: Can't move a folder inside itself.
            // This funny little hack ensures that the check passes only if oldPath
            // is a subpath of newParent. We append '/' to avoid matching folders that
            // are a substring of the bottom-most folder in the path.

            if ((newParent + '/').indexOf(oldPath + '/') === 0) {
              return cb(new ApiError(ErrorCode.EBUSY, oldParent));
            }
            /**
             * Responsible for Phase 2 of the rename operation: Modifying and
             * committing the directory listings. Called once we have successfully
             * retrieved both the old and new parent's inodes and listings.
             */


            var theOleSwitcharoo = function () {
              // Sanity check: Ensure both paths are present, and no error has occurred.
              if (errorOccurred || !lists.hasOwnProperty(oldParent) || !lists.hasOwnProperty(newParent)) {
                return;
              }

              var oldParentList = lists[oldParent],
                  oldParentINode = inodes[oldParent],
                  newParentList = lists[newParent],
                  newParentINode = inodes[newParent]; // Delete file from old parent.

              if (!oldParentList[oldName]) {
                cb(ApiError.ENOENT(oldPath));
              } else {
                var fileId = oldParentList[oldName];
                delete oldParentList[oldName]; // Finishes off the renaming process by adding the file to the new
                // parent.

                var completeRename = function () {
                  newParentList[newName] = fileId; // Commit old parent's list.

                  tx.put(oldParentINode.id, Buffer.from(JSON.stringify(oldParentList)), true, function (e) {
                    if (noErrorTx(e, tx, cb)) {
                      if (oldParent === newParent) {
                        // DONE!
                        tx.commit(cb);
                      } else {
                        // Commit new parent's list.
                        tx.put(newParentINode.id, Buffer.from(JSON.stringify(newParentList)), true, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            tx.commit(cb);
                          }
                        });
                      }
                    }
                  });
                };

                if (newParentList[newName]) {
                  // 'newPath' already exists. Check if it's a file or a directory, and
                  // act accordingly.
                  this$1.getINode(tx, newPath, newParentList[newName], function (e, inode) {
                    if (noErrorTx(e, tx, cb)) {
                      if (inode.isFile()) {
                        // Delete the file and continue.
                        tx.del(inode.id, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            tx.del(newParentList[newName], function (e) {
                              if (noErrorTx(e, tx, cb)) {
                                completeRename();
                              }
                            });
                          }
                        });
                      } else {
                        // Can't overwrite a directory using rename.
                        tx.abort(function (e) {
                          cb(ApiError.EPERM(newPath));
                        });
                      }
                    }
                  });
                } else {
                  completeRename();
                }
              }
            };
            /**
             * Grabs a path's inode and directory listing, and shoves it into the
             * inodes and lists hashes.
             */


            var processInodeAndListings = function (p) {
              this$1.findINodeAndDirListing(tx, p, function (e, node, dirList) {
                if (e) {
                  if (!errorOccurred) {
                    errorOccurred = true;
                    tx.abort(function () {
                      cb(e);
                    });
                  } // If error has occurred already, just stop here.

                } else {
                  inodes[p] = node;
                  lists[p] = dirList;
                  theOleSwitcharoo();
                }
              });
            };

            processInodeAndListings(oldParent);

            if (oldParent !== newParent) {
              processInodeAndListings(newParent);
            }
          };

          AsyncKeyValueFileSystem.prototype.stat = function stat(p, isLstat, cb) {
            var tx = this.store.beginTransaction('readonly');
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                cb(null, inode.toStats());
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.createFile = function createFile(p, flag, mode, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite'),
                data = emptyBuffer();
            this.commitNewFile(tx, p, FileType.FILE, mode, data, function (e, newFile) {
              if (noError(e, cb)) {
                cb(null, new AsyncKeyValueFile(this$1, p, flag, newFile.toStats(), data));
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.openFile = function openFile(p, flag, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readonly'); // Step 1: Grab the file's inode.

            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                // Step 2: Grab the file's data.
                tx.get(inode.id, function (e, data) {
                  if (noError(e, cb)) {
                    if (data === undefined) {
                      cb(ApiError.ENOENT(p));
                    } else {
                      cb(null, new AsyncKeyValueFile(this$1, p, flag, inode.toStats(), data));
                    }
                  }
                });
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.unlink = function unlink(p, cb) {
            this.removeEntry(p, false, cb);
          };

          AsyncKeyValueFileSystem.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this; // Check first if directory is empty.

            this.readdir(p, function (err, files) {
              if (err) {
                cb(err);
              } else if (files.length > 0) {
                cb(ApiError.ENOTEMPTY(p));
              } else {
                this$1.removeEntry(p, true, cb);
              }
            });
          };

          AsyncKeyValueFileSystem.prototype.mkdir = function mkdir(p, mode, cb) {
            var tx = this.store.beginTransaction('readwrite'),
                data = Buffer.from('{}');
            this.commitNewFile(tx, p, FileType.DIRECTORY, mode, data, cb);
          };

          AsyncKeyValueFileSystem.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readonly');
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                this$1.getDirListing(tx, p, inode, function (e, dirListing) {
                  if (noError(e, cb)) {
                    cb(null, Object.keys(dirListing));
                  }
                });
              }
            });
          };

          AsyncKeyValueFileSystem.prototype._sync = function _sync(p, data, stats, cb) {
            var this$1 = this; // @todo Ensure mtime updates properly, and use that to determine if a data
            //       update is required.

            var tx = this.store.beginTransaction('readwrite'); // Step 1: Get the file node's ID.

            this._findINode(tx, path.dirname(p), path.basename(p), function (e, fileInodeId) {
              if (noErrorTx(e, tx, cb)) {
                // Step 2: Get the file inode.
                this$1.getINode(tx, p, fileInodeId, function (e, fileInode) {
                  if (noErrorTx(e, tx, cb)) {
                    var inodeChanged = fileInode.update(stats); // Step 3: Sync the data.

                    tx.put(fileInode.id, data, true, function (e) {
                      if (noErrorTx(e, tx, cb)) {
                        // Step 4: Sync the metadata (if it changed)!
                        if (inodeChanged) {
                          tx.put(fileInodeId, fileInode.toBuffer(), true, function (e) {
                            if (noErrorTx(e, tx, cb)) {
                              tx.commit(cb);
                            }
                          });
                        } else {
                          // No need to sync metadata; return.
                          tx.commit(cb);
                        }
                      }
                    });
                  }
                });
              }
            });
          };
          /**
           * Checks if the root directory exists. Creates it if it doesn't.
           */


          AsyncKeyValueFileSystem.prototype.makeRootDirectory = function makeRootDirectory(cb) {
            var tx = this.store.beginTransaction('readwrite');
            tx.get(ROOT_NODE_ID, function (e, data) {
              if (e || data === undefined) {
                // Create new inode.
                var currTime = new Date().getTime(),
                    // Mode 0666
                dirInode = new Inode(GenerateRandomID(), 4096, 511 | FileType.DIRECTORY, currTime, currTime, currTime); // If the root doesn't exist, the first random ID shouldn't exist,
                // either.

                tx.put(dirInode.id, getEmptyDirNode(), false, function (e) {
                  if (noErrorTx(e, tx, cb)) {
                    tx.put(ROOT_NODE_ID, dirInode.toBuffer(), false, function (e) {
                      if (e) {
                        tx.abort(function () {
                          cb(e);
                        });
                      } else {
                        tx.commit(cb);
                      }
                    });
                  }
                });
              } else {
                // We're good.
                tx.commit(cb);
              }
            });
          };
          /**
           * Helper function for findINode.
           * @param parent The parent directory of the file we are attempting to find.
           * @param filename The filename of the inode we are attempting to find, minus
           *   the parent.
           * @param cb Passed an error or the ID of the file's inode in the file system.
           */


          AsyncKeyValueFileSystem.prototype._findINode = function _findINode(tx, parent, filename, cb) {
            var this$1 = this;

            var handleDirectoryListings = function (e, inode, dirList) {
              if (e) {
                cb(e);
              } else if (dirList[filename]) {
                cb(null, dirList[filename]);
              } else {
                cb(ApiError.ENOENT(path.resolve(parent, filename)));
              }
            };

            if (parent === '/') {
              if (filename === '') {
                // BASE CASE #1: Return the root's ID.
                cb(null, ROOT_NODE_ID);
              } else {
                // BASE CASE #2: Find the item in the root node.
                this.getINode(tx, parent, ROOT_NODE_ID, function (e, inode) {
                  if (noError(e, cb)) {
                    this$1.getDirListing(tx, parent, inode, function (e, dirList) {
                      // handle_directory_listings will handle e for us.
                      handleDirectoryListings(e, inode, dirList);
                    });
                  }
                });
              }
            } else {
              // Get the parent directory's INode, and find the file in its directory
              // listing.
              this.findINodeAndDirListing(tx, parent, handleDirectoryListings);
            }
          };
          /**
           * Finds the Inode of the given path.
           * @param p The path to look up.
           * @param cb Passed an error or the Inode of the path p.
           * @todo memoize/cache
           */


          AsyncKeyValueFileSystem.prototype.findINode = function findINode(tx, p, cb) {
            var this$1 = this;

            this._findINode(tx, path.dirname(p), path.basename(p), function (e, id) {
              if (noError(e, cb)) {
                this$1.getINode(tx, p, id, cb);
              }
            });
          };
          /**
           * Given the ID of a node, retrieves the corresponding Inode.
           * @param tx The transaction to use.
           * @param p The corresponding path to the file (used for error messages).
           * @param id The ID to look up.
           * @param cb Passed an error or the inode under the given id.
           */


          AsyncKeyValueFileSystem.prototype.getINode = function getINode(tx, p, id, cb) {
            tx.get(id, function (e, data) {
              if (noError(e, cb)) {
                if (data === undefined) {
                  cb(ApiError.ENOENT(p));
                } else {
                  cb(null, Inode.fromBuffer(data));
                }
              }
            });
          };
          /**
           * Given the Inode of a directory, retrieves the corresponding directory
           * listing.
           */


          AsyncKeyValueFileSystem.prototype.getDirListing = function getDirListing(tx, p, inode, cb) {
            if (!inode.isDirectory()) {
              cb(ApiError.ENOTDIR(p));
            } else {
              tx.get(inode.id, function (e, data) {
                if (noError(e, cb)) {
                  try {
                    cb(null, JSON.parse(data.toString()));
                  } catch (e) {
                    // Occurs when data is undefined, or corresponds to something other
                    // than a directory listing. The latter should never occur unless
                    // the file system is corrupted.
                    cb(ApiError.ENOENT(p));
                  }
                }
              });
            }
          };
          /**
           * Given a path to a directory, retrieves the corresponding INode and
           * directory listing.
           */


          AsyncKeyValueFileSystem.prototype.findINodeAndDirListing = function findINodeAndDirListing(tx, p, cb) {
            var this$1 = this;
            this.findINode(tx, p, function (e, inode) {
              if (noError(e, cb)) {
                this$1.getDirListing(tx, p, inode, function (e, listing) {
                  if (noError(e, cb)) {
                    cb(null, inode, listing);
                  }
                });
              }
            });
          };
          /**
           * Adds a new node under a random ID. Retries 5 times before giving up in
           * the exceedingly unlikely chance that we try to reuse a random GUID.
           * @param cb Passed an error or the GUID that the data was stored under.
           */


          AsyncKeyValueFileSystem.prototype.addNewNode = function addNewNode(tx, data, cb) {
            var retries = 0,
                currId;

            var reroll = function () {
              if (++retries === 5) {
                // Max retries hit. Return with an error.
                cb(new ApiError(ErrorCode.EIO, 'Unable to commit data to key-value store.'));
              } else {
                // Try again.
                currId = GenerateRandomID();
                tx.put(currId, data, false, function (e, committed) {
                  if (e || !committed) {
                    reroll();
                  } else {
                    // Successfully stored under 'currId'.
                    cb(null, currId);
                  }
                });
              }
            };

            reroll();
          };
          /**
           * Commits a new file (well, a FILE or a DIRECTORY) to the file system with
           * the given mode.
           * Note: This will commit the transaction.
           * @param p The path to the new file.
           * @param type The type of the new file.
           * @param mode The mode to create the new file with.
           * @param data The data to store at the file's data node.
           * @param cb Passed an error or the Inode for the new file.
           */


          AsyncKeyValueFileSystem.prototype.commitNewFile = function commitNewFile(tx, p, type, mode, data, cb) {
            var this$1 = this;
            var parentDir = path.dirname(p),
                fname = path.basename(p),
                currTime = new Date().getTime(); // Invariant: The root always exists.
            // If we don't check this prior to taking steps below, we will create a
            // file with name '' in root should p == '/'.

            if (p === '/') {
              return cb(ApiError.EEXIST(p));
            } // Let's build a pyramid of code!
            // Step 1: Get the parent directory's inode and directory listing


            this.findINodeAndDirListing(tx, parentDir, function (e, parentNode, dirListing) {
              if (noErrorTx(e, tx, cb)) {
                if (dirListing[fname]) {
                  // File already exists.
                  tx.abort(function () {
                    cb(ApiError.EEXIST(p));
                  });
                } else {
                  // Step 2: Commit data to store.
                  this$1.addNewNode(tx, data, function (e, dataId) {
                    if (noErrorTx(e, tx, cb)) {
                      // Step 3: Commit the file's inode to the store.
                      var fileInode = new Inode(dataId, data.length, mode | type, currTime, currTime, currTime);
                      this$1.addNewNode(tx, fileInode.toBuffer(), function (e, fileInodeId) {
                        if (noErrorTx(e, tx, cb)) {
                          // Step 4: Update parent directory's listing.
                          dirListing[fname] = fileInodeId;
                          tx.put(parentNode.id, Buffer.from(JSON.stringify(dirListing)), true, function (e) {
                            if (noErrorTx(e, tx, cb)) {
                              // Step 5: Commit and return the new inode.
                              tx.commit(function (e) {
                                if (noErrorTx(e, tx, cb)) {
                                  cb(null, fileInode);
                                }
                              });
                            }
                          });
                        }
                      });
                    }
                  });
                }
              }
            });
          };
          /**
           * Remove all traces of the given path from the file system.
           * @param p The path to remove from the file system.
           * @param isDir Does the path belong to a directory, or a file?
           * @todo Update mtime.
           */


          AsyncKeyValueFileSystem.prototype.removeEntry = function removeEntry(p, isDir, cb) {
            var this$1 = this;
            var tx = this.store.beginTransaction('readwrite'),
                parent = path.dirname(p),
                fileName = path.basename(p); // Step 1: Get parent directory's node and directory listing.

            this.findINodeAndDirListing(tx, parent, function (e, parentNode, parentListing) {
              if (noErrorTx(e, tx, cb)) {
                if (!parentListing[fileName]) {
                  tx.abort(function () {
                    cb(ApiError.ENOENT(p));
                  });
                } else {
                  // Remove from directory listing of parent.
                  var fileNodeId = parentListing[fileName];
                  delete parentListing[fileName]; // Step 2: Get file inode.

                  this$1.getINode(tx, p, fileNodeId, function (e, fileNode) {
                    if (noErrorTx(e, tx, cb)) {
                      if (!isDir && fileNode.isDirectory()) {
                        tx.abort(function () {
                          cb(ApiError.EISDIR(p));
                        });
                      } else if (isDir && !fileNode.isDirectory()) {
                        tx.abort(function () {
                          cb(ApiError.ENOTDIR(p));
                        });
                      } else {
                        // Step 3: Delete data.
                        tx.del(fileNode.id, function (e) {
                          if (noErrorTx(e, tx, cb)) {
                            // Step 4: Delete node.
                            tx.del(fileNodeId, function (e) {
                              if (noErrorTx(e, tx, cb)) {
                                // Step 5: Update directory listing.
                                tx.put(parentNode.id, Buffer.from(JSON.stringify(parentListing)), true, function (e) {
                                  if (noErrorTx(e, tx, cb)) {
                                    tx.commit(cb);
                                  }
                                });
                              }
                            });
                          }
                        });
                      }
                    }
                  });
                }
              }
            });
          };

          return AsyncKeyValueFileSystem;
        }(BaseFileSystem);
        /**
         * A simple in-memory key-value store backed by a JavaScript object.
         */


        var InMemoryStore = function InMemoryStore() {
          this.store = {};
        };

        InMemoryStore.prototype.name = function name() {
          return InMemoryFileSystem.Name;
        };

        InMemoryStore.prototype.clear = function clear() {
          this.store = {};
        };

        InMemoryStore.prototype.beginTransaction = function beginTransaction(type) {
          return new SimpleSyncRWTransaction(this);
        };

        InMemoryStore.prototype.get = function get(key) {
          return this.store[key];
        };

        InMemoryStore.prototype.put = function put(key, data, overwrite) {
          if (!overwrite && this.store.hasOwnProperty(key)) {
            return false;
          }

          this.store[key] = data;
          return true;
        };

        InMemoryStore.prototype.del = function del(key) {
          delete this.store[key];
        };
        /**
         * A simple in-memory file system backed by an InMemoryStore.
         * Files are not persisted across page loads.
         */


        var InMemoryFileSystem = function (SyncKeyValueFileSystem$$1) {
          function InMemoryFileSystem() {
            SyncKeyValueFileSystem$$1.call(this, {
              store: new InMemoryStore()
            });
          }

          if (SyncKeyValueFileSystem$$1) InMemoryFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
          InMemoryFileSystem.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
          InMemoryFileSystem.prototype.constructor = InMemoryFileSystem;
          /**
           * Creates an InMemoryFileSystem instance.
           */

          InMemoryFileSystem.Create = function Create(options, cb) {
            cb(null, new InMemoryFileSystem());
          };

          return InMemoryFileSystem;
        }(SyncKeyValueFileSystem);

        InMemoryFileSystem.Name = "InMemory";
        InMemoryFileSystem.Options = {};
        /**
         * Get the indexedDB constructor for the current browser.
         * @hidden
         */

        var indexedDB = global$1.indexedDB || global$1.mozIndexedDB || global$1.webkitIndexedDB || global$1.msIndexedDB;
        /**
         * Converts a DOMException or a DOMError from an IndexedDB event into a
         * standardized BrowserFS API error.
         * @hidden
         */

        function convertError$2(e, message) {
          if (message === void 0) message = e.toString();

          switch (e.name) {
            case "NotFoundError":
              return new ApiError(ErrorCode.ENOENT, message);

            case "QuotaExceededError":
              return new ApiError(ErrorCode.ENOSPC, message);

            default:
              // The rest do not seem to map cleanly to standard error codes.
              return new ApiError(ErrorCode.EIO, message);
          }
        }
        /**
         * Produces a new onerror handler for IDB. Our errors are always fatal, so we
         * handle them generically: Call the user-supplied callback with a translated
         * version of the error, and let the error bubble up.
         * @hidden
         */


        function onErrorHandler(cb, code, message) {
          if (code === void 0) code = ErrorCode.EIO;
          if (message === void 0) message = null;
          return function (e) {
            // Prevent the error from canceling the transaction.
            e.preventDefault();
            cb(new ApiError(code, message !== null ? message : undefined));
          };
        }
        /**
         * @hidden
         */


        var IndexedDBROTransaction = function IndexedDBROTransaction(tx, store) {
          this.tx = tx;
          this.store = store;
        };

        IndexedDBROTransaction.prototype.get = function get(key, cb) {
          try {
            var r = this.store.get(key);
            r.onerror = onErrorHandler(cb);

            r.onsuccess = function (event) {
              // IDB returns the value 'undefined' when you try to get keys that
              // don't exist. The caller expects this behavior.
              var result = event.target.result;

              if (result === undefined) {
                cb(null, result);
              } else {
                // IDB data is stored as an ArrayBuffer
                cb(null, arrayBuffer2Buffer(result));
              }
            };
          } catch (e) {
            cb(convertError$2(e));
          }
        };
        /**
         * @hidden
         */


        var IndexedDBRWTransaction = function (IndexedDBROTransaction) {
          function IndexedDBRWTransaction(tx, store) {
            IndexedDBROTransaction.call(this, tx, store);
          }

          if (IndexedDBROTransaction) IndexedDBRWTransaction.__proto__ = IndexedDBROTransaction;
          IndexedDBRWTransaction.prototype = Object.create(IndexedDBROTransaction && IndexedDBROTransaction.prototype);
          IndexedDBRWTransaction.prototype.constructor = IndexedDBRWTransaction;

          IndexedDBRWTransaction.prototype.put = function put(key, data, overwrite, cb) {
            try {
              var arraybuffer = buffer2ArrayBuffer(data);
              var r;

              if (overwrite) {
                r = this.store.put(arraybuffer, key);
              } else {
                // 'add' will never overwrite an existing key.
                r = this.store.add(arraybuffer, key);
              } // XXX: NEED TO RETURN FALSE WHEN ADD HAS A KEY CONFLICT. NO ERROR.


              r.onerror = onErrorHandler(cb);

              r.onsuccess = function (event) {
                cb(null, true);
              };
            } catch (e) {
              cb(convertError$2(e));
            }
          };

          IndexedDBRWTransaction.prototype.del = function del(key, cb) {
            try {
              // NOTE: IE8 has a bug with identifiers named 'delete' unless used as a string
              // like this.
              // http://stackoverflow.com/a/26479152
              var r = this.store['delete'](key);
              r.onerror = onErrorHandler(cb);

              r.onsuccess = function (event) {
                cb();
              };
            } catch (e) {
              cb(convertError$2(e));
            }
          };

          IndexedDBRWTransaction.prototype.commit = function commit(cb) {
            // Return to the event loop to commit the transaction.
            setTimeout(cb, 0);
          };

          IndexedDBRWTransaction.prototype.abort = function abort(cb) {
            var _e = null;

            try {
              this.tx.abort();
            } catch (e) {
              _e = convertError$2(e);
            } finally {
              cb(_e);
            }
          };

          return IndexedDBRWTransaction;
        }(IndexedDBROTransaction);

        var IndexedDBStore = function IndexedDBStore(cb, storeName) {
          var this$1 = this;
          if (storeName === void 0) storeName = 'browserfs';
          this.storeName = storeName;
          var openReq = indexedDB.open(this.storeName, 1);

          openReq.onupgradeneeded = function (event) {
            var db = event.target.result; // Huh. This should never happen; we're at version 1. Why does another
            // database exist?

            if (db.objectStoreNames.contains(this$1.storeName)) {
              db.deleteObjectStore(this$1.storeName);
            }

            db.createObjectStore(this$1.storeName);
          };

          openReq.onsuccess = function (event) {
            this$1.db = event.target.result;
            cb(null, this$1);
          };

          openReq.onerror = onErrorHandler(cb, ErrorCode.EACCES);
        };

        IndexedDBStore.prototype.name = function name() {
          return IndexedDBFileSystem.Name + " - " + this.storeName;
        };

        IndexedDBStore.prototype.clear = function clear(cb) {
          try {
            var tx = this.db.transaction(this.storeName, 'readwrite'),
                objectStore = tx.objectStore(this.storeName),
                r = objectStore.clear();

            r.onsuccess = function (event) {
              // Use setTimeout to commit transaction.
              setTimeout(cb, 0);
            };

            r.onerror = onErrorHandler(cb);
          } catch (e) {
            cb(convertError$2(e));
          }
        };

        IndexedDBStore.prototype.beginTransaction = function beginTransaction(type) {
          if (type === void 0) type = 'readonly';
          var tx = this.db.transaction(this.storeName, type),
              objectStore = tx.objectStore(this.storeName);

          if (type === 'readwrite') {
            return new IndexedDBRWTransaction(tx, objectStore);
          } else if (type === 'readonly') {
            return new IndexedDBROTransaction(tx, objectStore);
          } else {
            throw new ApiError(ErrorCode.EINVAL, 'Invalid transaction type.');
          }
        };
        /**
         * A file system that uses the IndexedDB key value file system.
         */


        var IndexedDBFileSystem = function (AsyncKeyValueFileSystem$$1) {
          function IndexedDBFileSystem(cb, storeName, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;
            AsyncKeyValueFileSystem$$1.call(this);
            this.store = new IndexedDBStore(function (e) {
              if (e) {
                cb(e);
              } else {
                this$1.init(this$1.store, function (e) {
                  cb(e, this$1);
                });
              }
            }, storeName);
            deprecationMessage(deprecateMsg, IndexedDBFileSystem.Name, {
              storeName: storeName
            });
          }

          if (AsyncKeyValueFileSystem$$1) IndexedDBFileSystem.__proto__ = AsyncKeyValueFileSystem$$1;
          IndexedDBFileSystem.prototype = Object.create(AsyncKeyValueFileSystem$$1 && AsyncKeyValueFileSystem$$1.prototype);
          IndexedDBFileSystem.prototype.constructor = IndexedDBFileSystem;
          /**
           * Constructs an IndexedDB file system with the given options.
           */

          IndexedDBFileSystem.Create = function Create(opts, cb) {
            // tslint:disable-next-line:no-unused-new
            new IndexedDBFileSystem(cb, opts.storeName, false); // tslint:enable-next-line:no-unused-new
          };

          IndexedDBFileSystem.isAvailable = function isAvailable() {
            // In Safari's private browsing mode, indexedDB.open returns NULL.
            // In Firefox, it throws an exception.
            // In Chrome, it "just works", and clears the database when you leave the page.
            // Untested: Opera, IE.
            try {
              return typeof indexedDB !== 'undefined' && null !== indexedDB.open("__browserfs_test__");
            } catch (e) {
              return false;
            }
          };

          return IndexedDBFileSystem;
        }(AsyncKeyValueFileSystem);

        IndexedDBFileSystem.Name = "IndexedDB";
        IndexedDBFileSystem.Options = {
          storeName: {
            type: "string",
            optional: true,
            description: "The name of this file system. You can have multiple IndexedDB file systems operating at once, but each must have a different name."
          }
        };
        /**
         * Some versions of FF and all versions of IE do not support the full range of
         * 16-bit numbers encoded as characters, as they enforce UTF-16 restrictions.
         * @url http://stackoverflow.com/questions/11170716/are-there-any-characters-that-are-not-allowed-in-localstorage/11173673#11173673
         * @hidden
         */

        var supportsBinaryString = false;
        var binaryEncoding;

        try {
          global$1.localStorage.setItem("__test__", String.fromCharCode(0xD800));
          supportsBinaryString = global$1.localStorage.getItem("__test__") === String.fromCharCode(0xD800);
        } catch (e) {
          // IE throws an exception.
          supportsBinaryString = false;
        }

        binaryEncoding = supportsBinaryString ? 'binary_string' : 'binary_string_ie';

        if (!Buffer.isEncoding(binaryEncoding)) {
          // Fallback for non BrowserFS implementations of buffer that lack a
          // binary_string format.
          binaryEncoding = "base64";
        }
        /**
         * A synchronous key-value store backed by localStorage.
         */


        var LocalStorageStore = function LocalStorageStore() {};

        LocalStorageStore.prototype.name = function name() {
          return LocalStorageFileSystem.Name;
        };

        LocalStorageStore.prototype.clear = function clear() {
          global$1.localStorage.clear();
        };

        LocalStorageStore.prototype.beginTransaction = function beginTransaction(type) {
          // No need to differentiate.
          return new SimpleSyncRWTransaction(this);
        };

        LocalStorageStore.prototype.get = function get(key) {
          try {
            var data = global$1.localStorage.getItem(key);

            if (data !== null) {
              return Buffer.from(data, binaryEncoding);
            }
          } catch (e) {} // Do nothing.
          // Key doesn't exist, or a failure occurred.


          return undefined;
        };

        LocalStorageStore.prototype.put = function put(key, data, overwrite) {
          try {
            if (!overwrite && global$1.localStorage.getItem(key) !== null) {
              // Don't want to overwrite the key!
              return false;
            }

            global$1.localStorage.setItem(key, data.toString(binaryEncoding));
            return true;
          } catch (e) {
            throw new ApiError(ErrorCode.ENOSPC, "LocalStorage is full.");
          }
        };

        LocalStorageStore.prototype.del = function del(key) {
          try {
            global$1.localStorage.removeItem(key);
          } catch (e) {
            throw new ApiError(ErrorCode.EIO, "Unable to delete key " + key + ": " + e);
          }
        };
        /**
         * A synchronous file system backed by localStorage. Connects our
         * LocalStorageStore to our SyncKeyValueFileSystem.
         */


        var LocalStorageFileSystem = function (SyncKeyValueFileSystem$$1) {
          function LocalStorageFileSystem() {
            SyncKeyValueFileSystem$$1.call(this, {
              store: new LocalStorageStore()
            });
          }

          if (SyncKeyValueFileSystem$$1) LocalStorageFileSystem.__proto__ = SyncKeyValueFileSystem$$1;
          LocalStorageFileSystem.prototype = Object.create(SyncKeyValueFileSystem$$1 && SyncKeyValueFileSystem$$1.prototype);
          LocalStorageFileSystem.prototype.constructor = LocalStorageFileSystem;
          /**
           * Creates a LocalStorageFileSystem instance.
           */

          LocalStorageFileSystem.Create = function Create(options, cb) {
            cb(null, new LocalStorageFileSystem());
          };

          LocalStorageFileSystem.isAvailable = function isAvailable() {
            return typeof global$1.localStorage !== 'undefined';
          };

          return LocalStorageFileSystem;
        }(SyncKeyValueFileSystem);

        LocalStorageFileSystem.Name = "LocalStorage";
        LocalStorageFileSystem.Options = {};
        /**
         * The MountableFileSystem allows you to mount multiple backend types or
         * multiple instantiations of the same backend into a single file system tree.
         * The file systems do not need to know about each other; all interactions are
         * automatically facilitated through this interface.
         *
         * For example, if a file system is mounted at /mnt/blah, and a request came in
         * for /mnt/blah/foo.txt, the file system would see a request for /foo.txt.
         *
         * You can mount file systems when you configure the file system:
         * ```javascript
         * BrowserFS.configure({
         *   fs: "MountableFileSystem",
         *   options: {
         *     '/data': { fs: 'XmlHttpRequest', options: { index: "http://mysite.com/files/index.json" } },
         *     '/home': { fs: 'LocalStorage' }
         *   }
         * }, function(e) {
         *
         * });
         * ```
         *
         * For advanced users, you can also mount file systems *after* MFS is constructed:
         * ```javascript
         * BrowserFS.FileSystem.XmlHttpRequest.Create({
         *   index: "http://mysite.com/files/index.json"
         * }, function(e, xhrfs) {
         *   BrowserFS.FileSystem.MountableFileSystem.Create({
         *     '/data': xhrfs
         *   }, function(e, mfs) {
         *     BrowserFS.initialize(mfs);
         *
         *     // Added after-the-fact...
         *     BrowserFS.FileSystem.LocalStorage.Create(function(e, lsfs) {
         *       mfs.mount('/home', lsfs);
         *     });
         *   });
         * });
         * ```
         *
         * Since MountableFileSystem simply proxies requests to mounted file systems, it supports all of the operations that the mounted file systems support.
         *
         * With no mounted file systems, `MountableFileSystem` acts as a simple `InMemory` filesystem.
         */

        var MountableFileSystem = function (BaseFileSystem$$1) {
          function MountableFileSystem() {
            BaseFileSystem$$1.call(this); // Contains the list of mount points in mntMap, sorted by string length in decreasing order.
            // Ensures that we scan the most specific mount points for a match first, which lets us
            // nest mount points.

            this.mountList = [];
            this.mntMap = {}; // The InMemory file system serves purely to provide directory listings for
            // mounted file systems.

            this.rootFs = new InMemoryFileSystem();
          }

          if (BaseFileSystem$$1) MountableFileSystem.__proto__ = BaseFileSystem$$1;
          MountableFileSystem.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          MountableFileSystem.prototype.constructor = MountableFileSystem;
          /**
           * Creates a MountableFileSystem instance with the given options.
           */

          MountableFileSystem.Create = function Create(opts, cb) {
            var fs = new MountableFileSystem();
            Object.keys(opts).forEach(function (mountPoint) {
              fs.mount(mountPoint, opts[mountPoint]);
            });
            cb(null, fs);
          };

          MountableFileSystem.isAvailable = function isAvailable() {
            return true;
          };
          /**
           * Mounts the file system at the given mount point.
           */


          MountableFileSystem.prototype.mount = function mount(mountPoint, fs) {
            if (mountPoint[0] !== '/') {
              mountPoint = "/" + mountPoint;
            }

            mountPoint = path.resolve(mountPoint);

            if (this.mntMap[mountPoint]) {
              throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already taken.");
            }

            mkdirpSync(mountPoint, 0x1ff, this.rootFs);
            this.mntMap[mountPoint] = fs;
            this.mountList.push(mountPoint);
            this.mountList = this.mountList.sort(function (a, b) {
              return b.length - a.length;
            });
          };

          MountableFileSystem.prototype.umount = function umount(mountPoint) {
            var this$1 = this;

            if (mountPoint[0] !== '/') {
              mountPoint = "/" + mountPoint;
            }

            mountPoint = path.resolve(mountPoint);

            if (!this.mntMap[mountPoint]) {
              throw new ApiError(ErrorCode.EINVAL, "Mount point " + mountPoint + " is already unmounted.");
            }

            delete this.mntMap[mountPoint];
            this.mountList.splice(this.mountList.indexOf(mountPoint), 1);

            while (mountPoint !== '/') {
              if (this$1.rootFs.readdirSync(mountPoint).length === 0) {
                this$1.rootFs.rmdirSync(mountPoint);
                mountPoint = path.dirname(mountPoint);
              } else {
                break;
              }
            }
          };
          /**
           * Returns the file system that the path points to.
           */


          MountableFileSystem.prototype._getFs = function _getFs(path$$1) {
            var this$1 = this;
            var mountList = this.mountList,
                len = mountList.length;

            for (var i = 0; i < len; i++) {
              var mountPoint = mountList[i]; // We know path is normalized, so it is a substring of the mount point.

              if (mountPoint.length <= path$$1.length && path$$1.indexOf(mountPoint) === 0) {
                path$$1 = path$$1.substr(mountPoint.length > 1 ? mountPoint.length : 0);

                if (path$$1 === '') {
                  path$$1 = '/';
                }

                return {
                  fs: this$1.mntMap[mountPoint],
                  path: path$$1
                };
              }
            } // Query our root file system.


            return {
              fs: this.rootFs,
              path: path$$1
            };
          }; // Global information methods


          MountableFileSystem.prototype.getName = function getName() {
            return MountableFileSystem.Name;
          };

          MountableFileSystem.prototype.diskSpace = function diskSpace(path$$1, cb) {
            cb(0, 0);
          };

          MountableFileSystem.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          MountableFileSystem.prototype.supportsLinks = function supportsLinks() {
            // I'm not ready for cross-FS links yet.
            return false;
          };

          MountableFileSystem.prototype.supportsProps = function supportsProps() {
            return false;
          };

          MountableFileSystem.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Fixes up error messages so they mention the mounted file location relative
           * to the MFS root, not to the particular FS's root.
           * Mutates the input error, and returns it.
           */


          MountableFileSystem.prototype.standardizeError = function standardizeError(err, path$$1, realPath) {
            var index = err.message.indexOf(path$$1);

            if (index !== -1) {
              err.message = err.message.substr(0, index) + realPath + err.message.substr(index + path$$1.length);
              err.path = realPath;
            }

            return err;
          }; // The following methods involve multiple file systems, and thus have custom
          // logic.
          // Note that we go through the Node API to use its robust default argument
          // processing.


          MountableFileSystem.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this; // Scenario 1: old and new are on same FS.

            var fs1rv = this._getFs(oldPath);

            var fs2rv = this._getFs(newPath);

            if (fs1rv.fs === fs2rv.fs) {
              return fs1rv.fs.rename(fs1rv.path, fs2rv.path, function (e) {
                if (e) {
                  this$1.standardizeError(this$1.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                }

                cb(e);
              });
            } // Scenario 2: Different file systems.
            // Read old file, write new file, delete old file.


            return _fsMock.readFile(oldPath, function (err, data) {
              if (err) {
                return cb(err);
              }

              _fsMock.writeFile(newPath, data, function (err) {
                if (err) {
                  return cb(err);
                }

                _fsMock.unlink(oldPath, cb);
              });
            });
          };

          MountableFileSystem.prototype.renameSync = function renameSync(oldPath, newPath) {
            // Scenario 1: old and new are on same FS.
            var fs1rv = this._getFs(oldPath);

            var fs2rv = this._getFs(newPath);

            if (fs1rv.fs === fs2rv.fs) {
              try {
                return fs1rv.fs.renameSync(fs1rv.path, fs2rv.path);
              } catch (e) {
                this.standardizeError(this.standardizeError(e, fs1rv.path, oldPath), fs2rv.path, newPath);
                throw e;
              }
            } // Scenario 2: Different file systems.


            var data = _fsMock.readFileSync(oldPath);

            _fsMock.writeFileSync(newPath, data);

            return _fsMock.unlinkSync(oldPath);
          };

          MountableFileSystem.prototype.readdirSync = function readdirSync(p) {
            var fsInfo = this._getFs(p); // If null, rootfs did not have the directory
            // (or the target FS is the root fs).


            var rv = null; // Mount points are all defined in the root FS.
            // Ensure that we list those, too.

            if (fsInfo.fs !== this.rootFs) {
              try {
                rv = this.rootFs.readdirSync(p);
              } catch (e) {// Ignore.
              }
            }

            try {
              var rv2 = fsInfo.fs.readdirSync(fsInfo.path);

              if (rv === null) {
                return rv2;
              } else {
                // Filter out duplicates.
                return rv2.concat(rv.filter(function (val) {
                  return rv2.indexOf(val) === -1;
                }));
              }
            } catch (e) {
              if (rv === null) {
                throw this.standardizeError(e, fsInfo.path, p);
              } else {
                // The root FS had something.
                return rv;
              }
            }
          };

          MountableFileSystem.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;

            var fsInfo = this._getFs(p);

            fsInfo.fs.readdir(fsInfo.path, function (err, files) {
              if (fsInfo.fs !== this$1.rootFs) {
                try {
                  var rv = this$1.rootFs.readdirSync(p);

                  if (files) {
                    // Filter out duplicates.
                    files = files.concat(rv.filter(function (val) {
                      return files.indexOf(val) === -1;
                    }));
                  } else {
                    files = rv;
                  }
                } catch (e) {
                  // Root FS and target FS did not have directory.
                  if (err) {
                    return cb(this$1.standardizeError(err, fsInfo.path, p));
                  }
                }
              } else if (err) {
                // Root FS and target FS are the same, and did not have directory.
                return cb(this$1.standardizeError(err, fsInfo.path, p));
              }

              cb(null, files);
            });
          };

          MountableFileSystem.prototype.rmdirSync = function rmdirSync(p) {
            var fsInfo = this._getFs(p);

            if (this._containsMountPt(p)) {
              throw ApiError.ENOTEMPTY(p);
            } else {
              try {
                fsInfo.fs.rmdirSync(fsInfo.path);
              } catch (e) {
                throw this.standardizeError(e, fsInfo.path, p);
              }
            }
          };

          MountableFileSystem.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this;

            var fsInfo = this._getFs(p);

            if (this._containsMountPt(p)) {
              cb(ApiError.ENOTEMPTY(p));
            } else {
              fsInfo.fs.rmdir(fsInfo.path, function (err) {
                cb(err ? this$1.standardizeError(err, fsInfo.path, p) : null);
              });
            }
          };
          /**
           * Returns true if the given path contains a mount point.
           */


          MountableFileSystem.prototype._containsMountPt = function _containsMountPt(p) {
            var mountPoints = this.mountList,
                len = mountPoints.length;

            for (var i = 0; i < len; i++) {
              var pt = mountPoints[i];

              if (pt.length >= p.length && pt.slice(0, p.length) === p) {
                return true;
              }
            }

            return false;
          };

          return MountableFileSystem;
        }(BaseFileSystem);

        MountableFileSystem.Name = "MountableFileSystem";
        MountableFileSystem.Options = {};
        /**
         * Tricky: Define all of the functions that merely forward arguments to the
         * relevant file system, or return/throw an error.
         * Take advantage of the fact that the *first* argument is always the path, and
         * the *last* is the callback function (if async).
         * @todo Can use numArgs to make proxying more efficient.
         * @hidden
         */

        function defineFcn(name, isSync, numArgs) {
          if (isSync) {
            return function () {
              var args = [],
                  len = arguments.length;

              while (len--) args[len] = arguments[len];

              var path$$1 = args[0];

              var rv = this._getFs(path$$1);

              args[0] = rv.path;

              try {
                return rv.fs[name].apply(rv.fs, args);
              } catch (e) {
                this.standardizeError(e, rv.path, path$$1);
                throw e;
              }
            };
          } else {
            return function () {
              var this$1 = this;
              var args = [],
                  len = arguments.length;

              while (len--) args[len] = arguments[len];

              var path$$1 = args[0];

              var rv = this._getFs(path$$1);

              args[0] = rv.path;

              if (typeof args[args.length - 1] === 'function') {
                var cb = args[args.length - 1];

                args[args.length - 1] = function () {
                  var args = [],
                      len = arguments.length;

                  while (len--) args[len] = arguments[len];

                  if (args.length > 0 && args[0] instanceof ApiError) {
                    this$1.standardizeError(args[0], rv.path, path$$1);
                  }

                  cb.apply(null, args);
                };
              }

              return rv.fs[name].apply(rv.fs, args);
            };
          }
        }
        /**
         * @hidden
         */


        var fsCmdMap = [// 1 arg functions
        ['exists', 'unlink', 'readlink'], // 2 arg functions
        ['stat', 'mkdir', 'realpath', 'truncate'], // 3 arg functions
        ['open', 'readFile', 'chmod', 'utimes'], // 4 arg functions
        ['chown'], // 5 arg functions
        ['writeFile', 'appendFile']];

        for (var i = 0; i < fsCmdMap.length; i++) {
          var cmds = fsCmdMap[i];

          for (var i$1 = 0, list = cmds; i$1 < list.length; i$1 += 1) {
            var fnName = list[i$1];
            MountableFileSystem.prototype[fnName] = defineFcn(fnName, false, i + 1);
            MountableFileSystem.prototype[fnName + 'Sync'] = defineFcn(fnName + 'Sync', true, i + 1);
          }
        }
        /**
         * @hidden
         */


        var bfsSetImmediate;

        if (typeof setImmediate !== "undefined") {
          bfsSetImmediate = setImmediate;
        } else {
          var gScope = global$1;
          var timeouts = [];
          var messageName = "zero-timeout-message";

          var canUsePostMessage = function () {
            if (typeof gScope.importScripts !== 'undefined' || !gScope.postMessage) {
              return false;
            }

            var postMessageIsAsync = true;
            var oldOnMessage = gScope.onmessage;

            gScope.onmessage = function () {
              postMessageIsAsync = false;
            };

            gScope.postMessage('', '*');
            gScope.onmessage = oldOnMessage;
            return postMessageIsAsync;
          };

          if (canUsePostMessage()) {
            bfsSetImmediate = function (fn) {
              timeouts.push(fn);
              gScope.postMessage(messageName, "*");
            };

            var handleMessage = function (event) {
              if (event.source === self && event.data === messageName) {
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else {
                  event.cancelBubble = true;
                }

                if (timeouts.length > 0) {
                  var fn = timeouts.shift();
                  return fn();
                }
              }
            };

            if (gScope.addEventListener) {
              gScope.addEventListener('message', handleMessage, true);
            } else {
              gScope.attachEvent('onmessage', handleMessage);
            }
          } else if (gScope.MessageChannel) {
            // WebWorker MessageChannel
            var channel = new gScope.MessageChannel();

            channel.port1.onmessage = function (event) {
              if (timeouts.length > 0) {
                return timeouts.shift()();
              }
            };

            bfsSetImmediate = function (fn) {
              timeouts.push(fn);
              channel.port2.postMessage('');
            };
          } else {
            bfsSetImmediate = function (fn) {
              return setTimeout(fn, 0);
            };
          }
        }

        var setImmediate$3 = bfsSetImmediate;
        /**
         * Non-recursive mutex
         * @hidden
         */

        var Mutex = function Mutex() {
          this._locked = false;
          this._waiters = [];
        };

        Mutex.prototype.lock = function lock(cb) {
          if (this._locked) {
            this._waiters.push(cb);

            return;
          }

          this._locked = true;
          cb();
        };

        Mutex.prototype.unlock = function unlock() {
          if (!this._locked) {
            throw new Error('unlock of a non-locked mutex');
          }

          var next = this._waiters.shift(); // don't unlock - we want to queue up next for the
          // _end_ of the current task execution, but we don't
          // want it to be called inline with whatever the
          // current stack is.  This way we still get the nice
          // behavior that an unlock immediately followed by a
          // lock won't cause starvation.


          if (next) {
            setImmediate$3(next);
            return;
          }

          this._locked = false;
        };

        Mutex.prototype.tryLock = function tryLock() {
          if (this._locked) {
            return false;
          }

          this._locked = true;
          return true;
        };

        Mutex.prototype.isLocked = function isLocked() {
          return this._locked;
        };
        /**
         * This class serializes access to an underlying async filesystem.
         * For example, on an OverlayFS instance with an async lower
         * directory operations like rename and rmdir may involve multiple
         * requests involving both the upper and lower filesystems -- they
         * are not executed in a single atomic step.  OverlayFS uses this
         * LockedFS to avoid having to reason about the correctness of
         * multiple requests interleaving.
         */


        var LockedFS = function LockedFS(fs) {
          this._fs = fs;
          this._mu = new Mutex();
        };

        LockedFS.prototype.getName = function getName() {
          return 'LockedFS<' + this._fs.getName() + '>';
        };

        LockedFS.prototype.getFSUnlocked = function getFSUnlocked() {
          return this._fs;
        };

        LockedFS.prototype.initialize = function initialize(cb) {
          // FIXME: check to see if FS supports initialization
          this._fs.initialize(cb);
        };

        LockedFS.prototype.diskSpace = function diskSpace(p, cb) {
          // FIXME: should this lock?
          this._fs.diskSpace(p, cb);
        };

        LockedFS.prototype.isReadOnly = function isReadOnly() {
          return this._fs.isReadOnly();
        };

        LockedFS.prototype.supportsLinks = function supportsLinks() {
          return this._fs.supportsLinks();
        };

        LockedFS.prototype.supportsProps = function supportsProps() {
          return this._fs.supportsProps();
        };

        LockedFS.prototype.supportsSynch = function supportsSynch() {
          return this._fs.supportsSynch();
        };

        LockedFS.prototype.rename = function rename(oldPath, newPath, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.rename(oldPath, newPath, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.renameSync = function renameSync(oldPath, newPath) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.renameSync(oldPath, newPath);
        };

        LockedFS.prototype.stat = function stat(p, isLstat, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.stat(p, isLstat, function (err, stat) {
              this$1._mu.unlock();

              cb(err, stat);
            });
          });
        };

        LockedFS.prototype.statSync = function statSync(p, isLstat) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.statSync(p, isLstat);
        };

        LockedFS.prototype.open = function open(p, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.open(p, flag, mode, function (err, fd) {
              this$1._mu.unlock();

              cb(err, fd);
            });
          });
        };

        LockedFS.prototype.openSync = function openSync(p, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.openSync(p, flag, mode);
        };

        LockedFS.prototype.unlink = function unlink(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.unlink(p, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.unlinkSync = function unlinkSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.unlinkSync(p);
        };

        LockedFS.prototype.rmdir = function rmdir(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.rmdir(p, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.rmdirSync = function rmdirSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.rmdirSync(p);
        };

        LockedFS.prototype.mkdir = function mkdir(p, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.mkdir(p, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.mkdirSync = function mkdirSync(p, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.mkdirSync(p, mode);
        };

        LockedFS.prototype.readdir = function readdir(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readdir(p, function (err, files) {
              this$1._mu.unlock();

              cb(err, files);
            });
          });
        };

        LockedFS.prototype.readdirSync = function readdirSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readdirSync(p);
        };

        LockedFS.prototype.exists = function exists(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.exists(p, function (exists) {
              this$1._mu.unlock();

              cb(exists);
            });
          });
        };

        LockedFS.prototype.existsSync = function existsSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.existsSync(p);
        };

        LockedFS.prototype.realpath = function realpath(p, cache, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.realpath(p, cache, function (err, resolvedPath) {
              this$1._mu.unlock();

              cb(err, resolvedPath);
            });
          });
        };

        LockedFS.prototype.realpathSync = function realpathSync(p, cache) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.realpathSync(p, cache);
        };

        LockedFS.prototype.truncate = function truncate(p, len, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.truncate(p, len, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.truncateSync = function truncateSync(p, len) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.truncateSync(p, len);
        };

        LockedFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readFile(fname, encoding, flag, function (err, data) {
              this$1._mu.unlock();

              cb(err, data);
            });
          });
        };

        LockedFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readFileSync(fname, encoding, flag);
        };

        LockedFS.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.writeFile(fname, data, encoding, flag, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.writeFileSync = function writeFileSync(fname, data, encoding, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.writeFileSync(fname, data, encoding, flag, mode);
        };

        LockedFS.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.appendFile(fname, data, encoding, flag, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.appendFileSync = function appendFileSync(fname, data, encoding, flag, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.appendFileSync(fname, data, encoding, flag, mode);
        };

        LockedFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.chmod(p, isLchmod, mode, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.chmodSync(p, isLchmod, mode);
        };

        LockedFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.chown(p, isLchown, uid, gid, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.chownSync(p, isLchown, uid, gid);
        };

        LockedFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.utimes(p, atime, mtime, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.utimesSync(p, atime, mtime);
        };

        LockedFS.prototype.link = function link(srcpath, dstpath, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.link(srcpath, dstpath, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.linkSync = function linkSync(srcpath, dstpath) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.linkSync(srcpath, dstpath);
        };

        LockedFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.symlink(srcpath, dstpath, type, function (err) {
              this$1._mu.unlock();

              cb(err);
            });
          });
        };

        LockedFS.prototype.symlinkSync = function symlinkSync(srcpath, dstpath, type) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.symlinkSync(srcpath, dstpath, type);
        };

        LockedFS.prototype.readlink = function readlink(p, cb) {
          var this$1 = this;

          this._mu.lock(function () {
            this$1._fs.readlink(p, function (err, linkString) {
              this$1._mu.unlock();

              cb(err, linkString);
            });
          });
        };

        LockedFS.prototype.readlinkSync = function readlinkSync(p) {
          if (this._mu.isLocked()) {
            throw new Error('invalid sync call');
          }

          return this._fs.readlinkSync(p);
        };
        /**
         * @hidden
         */


        var deletionLogPath = '/.deletedFiles.log';
        /**
         * Given a read-only mode, makes it writable.
         * @hidden
         */

        function makeModeWritable(mode) {
          return 146 | mode;
        }
        /**
         * @hidden
         */


        function getFlag(f) {
          return FileFlag.getFileFlag(f);
        }
        /**
         * Overlays a RO file to make it writable.
         */


        var OverlayFile = function (PreloadFile$$1) {
          function OverlayFile(fs, path$$1, flag, stats, data) {
            PreloadFile$$1.call(this, fs, path$$1, flag, stats, data);
          }

          if (PreloadFile$$1) OverlayFile.__proto__ = PreloadFile$$1;
          OverlayFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          OverlayFile.prototype.constructor = OverlayFile;

          OverlayFile.prototype.sync = function sync(cb) {
            var this$1 = this;

            if (!this.isDirty()) {
              cb(null);
              return;
            }

            this._fs._syncAsync(this, function (err) {
              this$1.resetDirty();
              cb(err);
            });
          };

          OverlayFile.prototype.syncSync = function syncSync() {
            if (this.isDirty()) {
              this._fs._syncSync(this);

              this.resetDirty();
            }
          };

          OverlayFile.prototype.close = function close(cb) {
            this.sync(cb);
          };

          OverlayFile.prototype.closeSync = function closeSync() {
            this.syncSync();
          };

          return OverlayFile;
        }(PreloadFile);
        /**
         * *INTERNAL, DO NOT USE DIRECTLY!*
         *
         * Core OverlayFS class that contains no locking whatsoever. We wrap these objects
         * in a LockedFS to prevent races.
         */


        var UnlockedOverlayFS = function (BaseFileSystem$$1) {
          function UnlockedOverlayFS(writable, readable) {
            BaseFileSystem$$1.call(this);
            this._isInitialized = false;
            this._initializeCallbacks = [];
            this._deletedFiles = {};
            this._deleteLog = ''; // If 'true', we have scheduled a delete log update.

            this._deleteLogUpdatePending = false; // If 'true', a delete log update is needed after the scheduled delete log
            // update finishes.

            this._deleteLogUpdateNeeded = false; // If there was an error updating the delete log...

            this._deleteLogError = null;
            this._writable = writable;
            this._readable = readable;

            if (this._writable.isReadOnly()) {
              throw new ApiError(ErrorCode.EINVAL, "Writable file system must be writable.");
            }
          }

          if (BaseFileSystem$$1) UnlockedOverlayFS.__proto__ = BaseFileSystem$$1;
          UnlockedOverlayFS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          UnlockedOverlayFS.prototype.constructor = UnlockedOverlayFS;

          UnlockedOverlayFS.isAvailable = function isAvailable() {
            return true;
          };

          UnlockedOverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
            return {
              readable: this._readable,
              writable: this._writable
            };
          };

          UnlockedOverlayFS.prototype._syncAsync = function _syncAsync(file, cb) {
            var this$1 = this;
            this.createParentDirectoriesAsync(file.getPath(), function (err) {
              if (err) {
                return cb(err);
              }

              this$1._writable.writeFile(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode, cb);
            });
          };

          UnlockedOverlayFS.prototype._syncSync = function _syncSync(file) {
            this.createParentDirectories(file.getPath());

            this._writable.writeFileSync(file.getPath(), file.getBuffer(), null, getFlag('w'), file.getStats().mode);
          };

          UnlockedOverlayFS.prototype.getName = function getName() {
            return OverlayFS.Name;
          };
          /**
           * Called once to load up metadata stored on the writable file system.
           */


          UnlockedOverlayFS.prototype.initialize = function initialize(cb) {
            var this$1 = this;
            var callbackArray = this._initializeCallbacks;

            var end = function (e) {
              this$1._isInitialized = !e;
              this$1._initializeCallbacks = [];
              callbackArray.forEach(function (cb) {
                return cb(e);
              });
            }; // if we're already initialized, immediately invoke the callback


            if (this._isInitialized) {
              return cb();
            }

            callbackArray.push(cb); // The first call to initialize initializes, the rest wait for it to complete.

            if (callbackArray.length !== 1) {
              return;
            } // Read deletion log, process into metadata.


            this._writable.readFile(deletionLogPath, 'utf8', getFlag('r'), function (err, data) {
              if (err) {
                // ENOENT === Newly-instantiated file system, and thus empty log.
                if (err.errno !== ErrorCode.ENOENT) {
                  return end(err);
                }
              } else {
                this$1._deleteLog = data;
              }

              this$1._reparseDeletionLog();

              end();
            });
          };

          UnlockedOverlayFS.prototype.isReadOnly = function isReadOnly() {
            return false;
          };

          UnlockedOverlayFS.prototype.supportsSynch = function supportsSynch() {
            return this._readable.supportsSynch() && this._writable.supportsSynch();
          };

          UnlockedOverlayFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          UnlockedOverlayFS.prototype.supportsProps = function supportsProps() {
            return this._readable.supportsProps() && this._writable.supportsProps();
          };

          UnlockedOverlayFS.prototype.getDeletionLog = function getDeletionLog() {
            return this._deleteLog;
          };

          UnlockedOverlayFS.prototype.restoreDeletionLog = function restoreDeletionLog(log) {
            this._deleteLog = log;

            this._reparseDeletionLog();

            this.updateLog('');
          };

          UnlockedOverlayFS.prototype.rename = function rename(oldPath, newPath, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(oldPath, cb) || this.checkPathAsync(newPath, cb)) {
              return;
            }

            if (oldPath === deletionLogPath || newPath === deletionLogPath) {
              return cb(ApiError.EPERM('Cannot rename deletion log.'));
            } // nothing to do if paths match


            if (oldPath === newPath) {
              return cb();
            }

            this.stat(oldPath, false, function (oldErr, oldStats) {
              if (oldErr) {
                return cb(oldErr);
              }

              return this$1.stat(newPath, false, function (newErr, newStats) {
                var self = this$1; // precondition: both oldPath and newPath exist and are dirs.
                // decreases: |files|
                // Need to move *every file/folder* currently stored on
                // readable to its new location on writable.

                function copyDirContents(files) {
                  var file = files.shift();

                  if (!file) {
                    return cb();
                  }

                  var oldFile = path.resolve(oldPath, file);
                  var newFile = path.resolve(newPath, file); // Recursion! Should work for any nested files / folders.

                  self.rename(oldFile, newFile, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    copyDirContents(files);
                  });
                }

                var mode = 511; // from linux's rename(2) manpage: oldpath can specify a
                // directory.  In this case, newpath must either not exist, or
                // it must specify an empty directory.

                if (oldStats.isDirectory()) {
                  if (newErr) {
                    if (newErr.errno !== ErrorCode.ENOENT) {
                      return cb(newErr);
                    }

                    return this$1._writable.exists(oldPath, function (exists) {
                      // simple case - both old and new are on the writable layer
                      if (exists) {
                        return this$1._writable.rename(oldPath, newPath, cb);
                      }

                      this$1._writable.mkdir(newPath, mode, function (mkdirErr) {
                        if (mkdirErr) {
                          return cb(mkdirErr);
                        }

                        this$1._readable.readdir(oldPath, function (err, files) {
                          if (err) {
                            return cb();
                          }

                          copyDirContents(files);
                        });
                      });
                    });
                  }

                  mode = newStats.mode;

                  if (!newStats.isDirectory()) {
                    return cb(ApiError.ENOTDIR(newPath));
                  }

                  this$1.readdir(newPath, function (readdirErr, files) {
                    if (files && files.length) {
                      return cb(ApiError.ENOTEMPTY(newPath));
                    }

                    this$1._readable.readdir(oldPath, function (err, files) {
                      if (err) {
                        return cb();
                      }

                      copyDirContents(files);
                    });
                  });
                }

                if (newStats && newStats.isDirectory()) {
                  return cb(ApiError.EISDIR(newPath));
                }

                this$1.readFile(oldPath, null, getFlag('r'), function (err, data) {
                  if (err) {
                    return cb(err);
                  }

                  return this$1.writeFile(newPath, data, null, getFlag('w'), oldStats.mode, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    return this$1.unlink(oldPath, cb);
                  });
                });
              });
            });
          };

          UnlockedOverlayFS.prototype.renameSync = function renameSync(oldPath, newPath) {
            var this$1 = this;
            this.checkInitialized();
            this.checkPath(oldPath);
            this.checkPath(newPath);

            if (oldPath === deletionLogPath || newPath === deletionLogPath) {
              throw ApiError.EPERM('Cannot rename deletion log.');
            } // Write newPath using oldPath's contents, delete oldPath.


            var oldStats = this.statSync(oldPath, false);

            if (oldStats.isDirectory()) {
              // Optimization: Don't bother moving if old === new.
              if (oldPath === newPath) {
                return;
              }

              var mode = 511;

              if (this.existsSync(newPath)) {
                var stats = this.statSync(newPath, false);
                mode = stats.mode;

                if (stats.isDirectory()) {
                  if (this.readdirSync(newPath).length > 0) {
                    throw ApiError.ENOTEMPTY(newPath);
                  }
                } else {
                  throw ApiError.ENOTDIR(newPath);
                }
              } // Take care of writable first. Move any files there, or create an empty directory
              // if it doesn't exist.


              if (this._writable.existsSync(oldPath)) {
                this._writable.renameSync(oldPath, newPath);
              } else if (!this._writable.existsSync(newPath)) {
                this._writable.mkdirSync(newPath, mode);
              } // Need to move *every file/folder* currently stored on readable to its new location
              // on writable.


              if (this._readable.existsSync(oldPath)) {
                this._readable.readdirSync(oldPath).forEach(function (name) {
                  // Recursion! Should work for any nested files / folders.
                  this$1.renameSync(path.resolve(oldPath, name), path.resolve(newPath, name));
                });
              }
            } else {
              if (this.existsSync(newPath) && this.statSync(newPath, false).isDirectory()) {
                throw ApiError.EISDIR(newPath);
              }

              this.writeFileSync(newPath, this.readFileSync(oldPath, null, getFlag('r')), null, getFlag('w'), oldStats.mode);
            }

            if (oldPath !== newPath && this.existsSync(oldPath)) {
              this.unlinkSync(oldPath);
            }
          };

          UnlockedOverlayFS.prototype.stat = function stat(p, isLstat, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this._writable.stat(p, isLstat, function (err, stat) {
              if (err && err.errno === ErrorCode.ENOENT) {
                if (this$1._deletedFiles[p]) {
                  cb(ApiError.ENOENT(p));
                }

                this$1._readable.stat(p, isLstat, function (err, stat) {
                  if (stat) {
                    // Make the oldStat's mode writable. Preserve the topmost
                    // part of the mode, which specifies if it is a file or a
                    // directory.
                    stat = stat.clone();
                    stat.mode = makeModeWritable(stat.mode);
                  }

                  cb(err, stat);
                });
              } else {
                cb(err, stat);
              }
            });
          };

          UnlockedOverlayFS.prototype.statSync = function statSync(p, isLstat) {
            this.checkInitialized();

            try {
              return this._writable.statSync(p, isLstat);
            } catch (e) {
              if (this._deletedFiles[p]) {
                throw ApiError.ENOENT(p);
              }

              var oldStat = this._readable.statSync(p, isLstat).clone(); // Make the oldStat's mode writable. Preserve the topmost part of the
              // mode, which specifies if it is a file or a directory.


              oldStat.mode = makeModeWritable(oldStat.mode);
              return oldStat;
            }
          };

          UnlockedOverlayFS.prototype.open = function open(p, flag, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
              return;
            }

            this.stat(p, false, function (err, stats) {
              if (stats) {
                switch (flag.pathExistsAction()) {
                  case ActionType.TRUNCATE_FILE:
                    return this$1.createParentDirectoriesAsync(p, function (err) {
                      if (err) {
                        return cb(err);
                      }

                      this$1._writable.open(p, flag, mode, cb);
                    });

                  case ActionType.NOP:
                    return this$1._writable.exists(p, function (exists) {
                      if (exists) {
                        this$1._writable.open(p, flag, mode, cb);
                      } else {
                        // at this point we know the stats object we got is from
                        // the readable FS.
                        stats = stats.clone();
                        stats.mode = mode;

                        this$1._readable.readFile(p, null, getFlag('r'), function (readFileErr, data) {
                          if (readFileErr) {
                            return cb(readFileErr);
                          }

                          if (stats.size === -1) {
                            stats.size = data.length;
                          }

                          var f = new OverlayFile(this$1, p, flag, stats, data);
                          cb(null, f);
                        });
                      }
                    });

                  default:
                    return cb(ApiError.EEXIST(p));
                }
              } else {
                switch (flag.pathNotExistsAction()) {
                  case ActionType.CREATE_FILE:
                    return this$1.createParentDirectoriesAsync(p, function (err) {
                      if (err) {
                        return cb(err);
                      }

                      return this$1._writable.open(p, flag, mode, cb);
                    });

                  default:
                    return cb(ApiError.ENOENT(p));
                }
              }
            });
          };

          UnlockedOverlayFS.prototype.openSync = function openSync(p, flag, mode) {
            this.checkInitialized();
            this.checkPath(p);

            if (p === deletionLogPath) {
              throw ApiError.EPERM('Cannot open deletion log.');
            }

            if (this.existsSync(p)) {
              switch (flag.pathExistsAction()) {
                case ActionType.TRUNCATE_FILE:
                  this.createParentDirectories(p);
                  return this._writable.openSync(p, flag, mode);

                case ActionType.NOP:
                  if (this._writable.existsSync(p)) {
                    return this._writable.openSync(p, flag, mode);
                  } else {
                    // Create an OverlayFile.
                    var buf = this._readable.readFileSync(p, null, getFlag('r'));

                    var stats = this._readable.statSync(p, false).clone();

                    stats.mode = mode;
                    return new OverlayFile(this, p, flag, stats, buf);
                  }

                default:
                  throw ApiError.EEXIST(p);
              }
            } else {
              switch (flag.pathNotExistsAction()) {
                case ActionType.CREATE_FILE:
                  this.createParentDirectories(p);
                  return this._writable.openSync(p, flag, mode);

                default:
                  throw ApiError.ENOENT(p);
              }
            }
          };

          UnlockedOverlayFS.prototype.unlink = function unlink(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb) || this.checkPathAsync(p, cb)) {
              return;
            }

            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (writableExists) {
                if (writableExists) {
                  return this$1._writable.unlink(p, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    this$1.exists(p, function (readableExists) {
                      if (readableExists) {
                        this$1.deletePath(p);
                      }

                      cb(null);
                    });
                  });
                } else {
                  // if this only exists on the readable FS, add it to the
                  // delete map.
                  this$1.deletePath(p);
                  cb(null);
                }
              });
            });
          };

          UnlockedOverlayFS.prototype.unlinkSync = function unlinkSync(p) {
            this.checkInitialized();
            this.checkPath(p);

            if (this.existsSync(p)) {
              if (this._writable.existsSync(p)) {
                this._writable.unlinkSync(p);
              } // if it still exists add to the delete log


              if (this.existsSync(p)) {
                this.deletePath(p);
              }
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.rmdir = function rmdir(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            var rmdirLower = function () {
              this$1.readdir(p, function (err, files) {
                if (err) {
                  return cb(err);
                }

                if (files.length) {
                  return cb(ApiError.ENOTEMPTY(p));
                }

                this$1.deletePath(p);
                cb(null);
              });
            };

            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (writableExists) {
                if (writableExists) {
                  this$1._writable.rmdir(p, function (err) {
                    if (err) {
                      return cb(err);
                    }

                    this$1._readable.exists(p, function (readableExists) {
                      if (readableExists) {
                        rmdirLower();
                      } else {
                        cb();
                      }
                    });
                  });
                } else {
                  rmdirLower();
                }
              });
            });
          };

          UnlockedOverlayFS.prototype.rmdirSync = function rmdirSync(p) {
            this.checkInitialized();

            if (this.existsSync(p)) {
              if (this._writable.existsSync(p)) {
                this._writable.rmdirSync(p);
              }

              if (this.existsSync(p)) {
                // Check if directory is empty.
                if (this.readdirSync(p).length > 0) {
                  throw ApiError.ENOTEMPTY(p);
                } else {
                  this.deletePath(p);
                }
              }
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.mkdir = function mkdir(p, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.exists(p, function (exists) {
              if (exists) {
                return cb(ApiError.EEXIST(p));
              } // The below will throw should any of the parent directories
              // fail to exist on _writable.


              this$1.createParentDirectoriesAsync(p, function (err) {
                if (err) {
                  return cb(err);
                }

                this$1._writable.mkdir(p, mode, cb);
              });
            });
          };

          UnlockedOverlayFS.prototype.mkdirSync = function mkdirSync(p, mode) {
            this.checkInitialized();

            if (this.existsSync(p)) {
              throw ApiError.EEXIST(p);
            } else {
              // The below will throw should any of the parent directories fail to exist
              // on _writable.
              this.createParentDirectories(p);

              this._writable.mkdirSync(p, mode);
            }
          };

          UnlockedOverlayFS.prototype.readdir = function readdir(p, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.stat(p, false, function (err, dirStats) {
              if (err) {
                return cb(err);
              }

              if (!dirStats.isDirectory()) {
                return cb(ApiError.ENOTDIR(p));
              }

              this$1._writable.readdir(p, function (err, wFiles) {
                if (err && err.code !== 'ENOENT') {
                  return cb(err);
                } else if (err || !wFiles) {
                  wFiles = [];
                }

                this$1._readable.readdir(p, function (err, rFiles) {
                  // if the directory doesn't exist on the lower FS set rFiles
                  // here to simplify the following code.
                  if (err || !rFiles) {
                    rFiles = [];
                  } // Readdir in both, check delete log on read-only file system's files, merge, return.


                  var seenMap = {};
                  var filtered = wFiles.concat(rFiles.filter(function (fPath) {
                    return !this$1._deletedFiles[p + "/" + fPath];
                  })).filter(function (fPath) {
                    // Remove duplicates.
                    var result = !seenMap[fPath];
                    seenMap[fPath] = true;
                    return result;
                  });
                  cb(null, filtered);
                });
              });
            });
          };

          UnlockedOverlayFS.prototype.readdirSync = function readdirSync(p) {
            var this$1 = this;
            this.checkInitialized();
            var dirStats = this.statSync(p, false);

            if (!dirStats.isDirectory()) {
              throw ApiError.ENOTDIR(p);
            } // Readdir in both, check delete log on RO file system's listing, merge, return.


            var contents = [];

            try {
              contents = contents.concat(this._writable.readdirSync(p));
            } catch (e) {// NOP.
            }

            try {
              contents = contents.concat(this._readable.readdirSync(p).filter(function (fPath) {
                return !this$1._deletedFiles[p + "/" + fPath];
              }));
            } catch (e) {// NOP.
            }

            var seenMap = {};
            return contents.filter(function (fileP) {
              var result = !seenMap[fileP];
              seenMap[fileP] = true;
              return result;
            });
          };

          UnlockedOverlayFS.prototype.exists = function exists(p, cb) {
            var this$1 = this; // Cannot pass an error back to callback, so throw an exception instead
            // if not initialized.

            this.checkInitialized();

            this._writable.exists(p, function (existsWritable) {
              if (existsWritable) {
                return cb(true);
              }

              this$1._readable.exists(p, function (existsReadable) {
                cb(existsReadable && this$1._deletedFiles[p] !== true);
              });
            });
          };

          UnlockedOverlayFS.prototype.existsSync = function existsSync(p) {
            this.checkInitialized();
            return this._writable.existsSync(p) || this._readable.existsSync(p) && this._deletedFiles[p] !== true;
          };

          UnlockedOverlayFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.chmod(p, isLchmod, mode, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.chmodSync = function chmodSync(p, isLchmod, mode) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.chmodSync(p, isLchmod, mode);
            });
          };

          UnlockedOverlayFS.prototype.chown = function chown(p, isLchmod, uid, gid, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.chown(p, isLchmod, uid, gid, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.chownSync = function chownSync(p, isLchown, uid, gid) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.chownSync(p, isLchown, uid, gid);
            });
          };

          UnlockedOverlayFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
            var this$1 = this;

            if (!this.checkInitAsync(cb)) {
              return;
            }

            this.operateOnWritableAsync(p, function (err) {
              if (err) {
                return cb(err);
              } else {
                this$1._writable.utimes(p, atime, mtime, cb);
              }
            });
          };

          UnlockedOverlayFS.prototype.utimesSync = function utimesSync(p, atime, mtime) {
            var this$1 = this;
            this.checkInitialized();
            this.operateOnWritable(p, function () {
              this$1._writable.utimesSync(p, atime, mtime);
            });
          };

          UnlockedOverlayFS.prototype.deletePath = function deletePath(p) {
            this._deletedFiles[p] = true;
            this.updateLog("d" + p + "\n");
          };

          UnlockedOverlayFS.prototype.updateLog = function updateLog(addition) {
            var this$1 = this;
            this._deleteLog += addition;

            if (this._deleteLogUpdatePending) {
              this._deleteLogUpdateNeeded = true;
            } else {
              this._deleteLogUpdatePending = true;

              this._writable.writeFile(deletionLogPath, this._deleteLog, 'utf8', FileFlag.getFileFlag('w'), 420, function (e) {
                this$1._deleteLogUpdatePending = false;

                if (e) {
                  this$1._deleteLogError = e;
                } else if (this$1._deleteLogUpdateNeeded) {
                  this$1._deleteLogUpdateNeeded = false;
                  this$1.updateLog('');
                }
              });
            }
          };

          UnlockedOverlayFS.prototype._reparseDeletionLog = function _reparseDeletionLog() {
            var this$1 = this;
            this._deletedFiles = {};

            this._deleteLog.split('\n').forEach(function (path$$1) {
              // If the log entry begins w/ 'd', it's a deletion.
              this$1._deletedFiles[path$$1.slice(1)] = path$$1.slice(0, 1) === 'd';
            });
          };

          UnlockedOverlayFS.prototype.checkInitialized = function checkInitialized() {
            if (!this._isInitialized) {
              throw new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it.");
            } else if (this._deleteLogError !== null) {
              var e = this._deleteLogError;
              this._deleteLogError = null;
              throw e;
            }
          };

          UnlockedOverlayFS.prototype.checkInitAsync = function checkInitAsync(cb) {
            if (!this._isInitialized) {
              cb(new ApiError(ErrorCode.EPERM, "OverlayFS is not initialized. Please initialize OverlayFS using its initialize() method before using it."));
              return false;
            } else if (this._deleteLogError !== null) {
              var e = this._deleteLogError;
              this._deleteLogError = null;
              cb(e);
              return false;
            }

            return true;
          };

          UnlockedOverlayFS.prototype.checkPath = function checkPath(p) {
            if (p === deletionLogPath) {
              throw ApiError.EPERM(p);
            }
          };

          UnlockedOverlayFS.prototype.checkPathAsync = function checkPathAsync(p, cb) {
            if (p === deletionLogPath) {
              cb(ApiError.EPERM(p));
              return true;
            }

            return false;
          };

          UnlockedOverlayFS.prototype.createParentDirectoriesAsync = function createParentDirectoriesAsync(p, cb) {
            var parent = path.dirname(p);
            var toCreate = [];
            var self = this;

            this._writable.stat(parent, false, statDone);

            function statDone(err, stat) {
              if (err) {
                toCreate.push(parent);
                parent = path.dirname(parent);

                self._writable.stat(parent, false, statDone);
              } else {
                createParents();
              }
            }

            function createParents() {
              if (!toCreate.length) {
                return cb();
              }

              var dir = toCreate.pop();

              self._readable.stat(dir, false, function (err, stats) {
                // stop if we couldn't read the dir
                if (!stats) {
                  return cb();
                }

                self._writable.mkdir(dir, stats.mode, function (err) {
                  if (err) {
                    return cb(err);
                  }

                  createParents();
                });
              });
            }
          };
          /**
           * With the given path, create the needed parent directories on the writable storage
           * should they not exist. Use modes from the read-only storage.
           */


          UnlockedOverlayFS.prototype.createParentDirectories = function createParentDirectories(p) {
            var this$1 = this;
            var parent = path.dirname(p),
                toCreate = [];

            while (!this._writable.existsSync(parent)) {
              toCreate.push(parent);
              parent = path.dirname(parent);
            }

            toCreate = toCreate.reverse();
            toCreate.forEach(function (p) {
              this$1._writable.mkdirSync(p, this$1.statSync(p, false).mode);
            });
          };
          /**
           * Helper function:
           * - Ensures p is on writable before proceeding. Throws an error if it doesn't exist.
           * - Calls f to perform operation on writable.
           */


          UnlockedOverlayFS.prototype.operateOnWritable = function operateOnWritable(p, f) {
            if (this.existsSync(p)) {
              if (!this._writable.existsSync(p)) {
                // File is on readable storage. Copy to writable storage before
                // changing its mode.
                this.copyToWritable(p);
              }

              f();
            } else {
              throw ApiError.ENOENT(p);
            }
          };

          UnlockedOverlayFS.prototype.operateOnWritableAsync = function operateOnWritableAsync(p, cb) {
            var this$1 = this;
            this.exists(p, function (exists) {
              if (!exists) {
                return cb(ApiError.ENOENT(p));
              }

              this$1._writable.exists(p, function (existsWritable) {
                if (existsWritable) {
                  cb();
                } else {
                  return this$1.copyToWritableAsync(p, cb);
                }
              });
            });
          };
          /**
           * Copy from readable to writable storage.
           * PRECONDITION: File does not exist on writable storage.
           */


          UnlockedOverlayFS.prototype.copyToWritable = function copyToWritable(p) {
            var pStats = this.statSync(p, false);

            if (pStats.isDirectory()) {
              this._writable.mkdirSync(p, pStats.mode);
            } else {
              this.writeFileSync(p, this._readable.readFileSync(p, null, getFlag('r')), null, getFlag('w'), this.statSync(p, false).mode);
            }
          };

          UnlockedOverlayFS.prototype.copyToWritableAsync = function copyToWritableAsync(p, cb) {
            var this$1 = this;
            this.stat(p, false, function (err, pStats) {
              if (err) {
                return cb(err);
              }

              if (pStats.isDirectory()) {
                return this$1._writable.mkdir(p, pStats.mode, cb);
              } // need to copy file.


              this$1._readable.readFile(p, null, getFlag('r'), function (err, data) {
                if (err) {
                  return cb(err);
                }

                this$1.writeFile(p, data, null, getFlag('w'), pStats.mode, cb);
              });
            });
          };

          return UnlockedOverlayFS;
        }(BaseFileSystem);
        /**
         * OverlayFS makes a read-only filesystem writable by storing writes on a second,
         * writable file system. Deletes are persisted via metadata stored on the writable
         * file system.
         */


        var OverlayFS = function (LockedFS$$1) {
          function OverlayFS(writable, readable, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;
            LockedFS$$1.call(this, new UnlockedOverlayFS(writable, readable));
            deprecationMessage(deprecateMsg, OverlayFS.Name, {
              readable: "readable file system",
              writable: "writable file system"
            });
          }

          if (LockedFS$$1) OverlayFS.__proto__ = LockedFS$$1;
          OverlayFS.prototype = Object.create(LockedFS$$1 && LockedFS$$1.prototype);
          OverlayFS.prototype.constructor = OverlayFS;
          /**
           * Constructs and initializes an OverlayFS instance with the given options.
           */

          OverlayFS.Create = function Create(opts, cb) {
            try {
              var fs = new OverlayFS(opts.writable, opts.readable, false);
              fs.initialize(function (e) {
                cb(e, fs);
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          OverlayFS.isAvailable = function isAvailable() {
            return UnlockedOverlayFS.isAvailable();
          };
          /**
           * **Deprecated. Please use OverlayFS.Create() to construct and initialize OverlayFS instances.**
           */


          OverlayFS.prototype.initialize = function initialize(cb, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[OverlayFS] OverlayFS.initialize() is deprecated and will be removed in the next major release. Please use 'OverlayFS.Create({readable: readable file system instance, writable: writable file system instance}, cb)' to create and initialize OverlayFS instances.");
            }

            LockedFS$$1.prototype.initialize.call(this, cb);
          };

          OverlayFS.prototype.getOverlayedFileSystems = function getOverlayedFileSystems() {
            return LockedFS$$1.prototype.getFSUnlocked.call(this).getOverlayedFileSystems();
          };

          OverlayFS.prototype.unwrap = function unwrap() {
            return LockedFS$$1.prototype.getFSUnlocked.call(this);
          };

          return OverlayFS;
        }(LockedFS);

        OverlayFS.Name = "OverlayFS";
        OverlayFS.Options = {
          writable: {
            type: "object",
            description: "The file system to write modified files to."
          },
          readable: {
            type: "object",
            description: "The file system that initially populates this file system."
          }
        };
        /**
         * @hidden
         */

        var SpecialArgType;

        (function (SpecialArgType) {
          // Callback
          SpecialArgType[SpecialArgType["CB"] = 0] = "CB"; // File descriptor

          SpecialArgType[SpecialArgType["FD"] = 1] = "FD"; // API error

          SpecialArgType[SpecialArgType["API_ERROR"] = 2] = "API_ERROR"; // Stats object

          SpecialArgType[SpecialArgType["STATS"] = 3] = "STATS"; // Initial probe for file system information.

          SpecialArgType[SpecialArgType["PROBE"] = 4] = "PROBE"; // FileFlag object.

          SpecialArgType[SpecialArgType["FILEFLAG"] = 5] = "FILEFLAG"; // Buffer object.

          SpecialArgType[SpecialArgType["BUFFER"] = 6] = "BUFFER"; // Generic Error object.

          SpecialArgType[SpecialArgType["ERROR"] = 7] = "ERROR";
        })(SpecialArgType || (SpecialArgType = {}));
        /**
         * Converts callback arguments into ICallbackArgument objects, and back
         * again.
         * @hidden
         */


        var CallbackArgumentConverter = function CallbackArgumentConverter() {
          this._callbacks = {};
          this._nextId = 0;
        };

        CallbackArgumentConverter.prototype.toRemoteArg = function toRemoteArg(cb) {
          var id = this._nextId++;
          this._callbacks[id] = cb;
          return {
            type: SpecialArgType.CB,
            id: id
          };
        };

        CallbackArgumentConverter.prototype.toLocalArg = function toLocalArg(id) {
          var cb = this._callbacks[id];
          delete this._callbacks[id];
          return cb;
        };
        /**
         * @hidden
         */


        var FileDescriptorArgumentConverter = function FileDescriptorArgumentConverter() {
          this._fileDescriptors = {};
          this._nextId = 0;
        };

        FileDescriptorArgumentConverter.prototype.toRemoteArg = function toRemoteArg(fd, p, flag, cb) {
          var id = this._nextId++;
          var data;
          var stat;
          this._fileDescriptors[id] = fd; // Extract needed information asynchronously.

          fd.stat(function (err, stats) {
            if (err) {
              cb(err);
            } else {
              stat = bufferToTransferrableObject(stats.toBuffer()); // If it's a readable flag, we need to grab contents.

              if (flag.isReadable()) {
                fd.read(Buffer.alloc(stats.size), 0, stats.size, 0, function (err, bytesRead, buff) {
                  if (err) {
                    cb(err);
                  } else {
                    data = bufferToTransferrableObject(buff);
                    cb(null, {
                      type: SpecialArgType.FD,
                      id: id,
                      data: data,
                      stat: stat,
                      path: p,
                      flag: flag.getFlagString()
                    });
                  }
                });
              } else {
                // File is not readable, which means writing to it will append or
                // truncate/replace existing contents. Return an empty arraybuffer.
                cb(null, {
                  type: SpecialArgType.FD,
                  id: id,
                  data: new ArrayBuffer(0),
                  stat: stat,
                  path: p,
                  flag: flag.getFlagString()
                });
              }
            }
          });
        };

        FileDescriptorArgumentConverter.prototype.applyFdAPIRequest = function applyFdAPIRequest(request, cb) {
          var this$1 = this;
          var fdArg = request.args[0];

          this._applyFdChanges(fdArg, function (err, fd) {
            if (err) {
              cb(err);
            } else {
              // Apply method on now-changed file descriptor.
              fd[request.method](function (e) {
                if (request.method === 'close') {
                  delete this$1._fileDescriptors[fdArg.id];
                }

                cb(e);
              });
            }
          });
        };

        FileDescriptorArgumentConverter.prototype._applyFdChanges = function _applyFdChanges(remoteFd, cb) {
          var fd = this._fileDescriptors[remoteFd.id],
              data = transferrableObjectToBuffer(remoteFd.data),
              remoteStats = Stats.fromBuffer(transferrableObjectToBuffer(remoteFd.stat)); // Write data if the file is writable.

          var flag = FileFlag.getFileFlag(remoteFd.flag);

          if (flag.isWriteable()) {
            // Appendable: Write to end of file.
            // Writeable: Replace entire contents of file.
            fd.write(data, 0, data.length, flag.isAppendable() ? fd.getPos() : 0, function (e) {
              function applyStatChanges() {
                // Check if mode changed.
                fd.stat(function (e, stats) {
                  if (e) {
                    cb(e);
                  } else {
                    if (stats.mode !== remoteStats.mode) {
                      fd.chmod(remoteStats.mode, function (e) {
                        cb(e, fd);
                      });
                    } else {
                      cb(e, fd);
                    }
                  }
                });
              }

              if (e) {
                cb(e);
              } else {
                // If writeable & not appendable, we need to ensure file contents are
                // identical to those from the remote FD. Thus, we truncate to the
                // length of the remote file.
                if (!flag.isAppendable()) {
                  fd.truncate(data.length, function () {
                    applyStatChanges();
                  });
                } else {
                  applyStatChanges();
                }
              }
            });
          } else {
            cb(null, fd);
          }
        };
        /**
         * @hidden
         */


        function apiErrorLocal2Remote(e) {
          return {
            type: SpecialArgType.API_ERROR,
            errorData: bufferToTransferrableObject(e.writeToBuffer())
          };
        }
        /**
         * @hidden
         */


        function apiErrorRemote2Local(e) {
          return ApiError.fromBuffer(transferrableObjectToBuffer(e.errorData));
        }
        /**
         * @hidden
         */


        function errorLocal2Remote(e) {
          return {
            type: SpecialArgType.ERROR,
            name: e.name,
            message: e.message,
            stack: e.stack
          };
        }
        /**
         * @hidden
         */


        function errorRemote2Local(e) {
          var cnstr = global$1[e.name];

          if (typeof cnstr !== 'function') {
            cnstr = Error;
          }

          var err = new cnstr(e.message);
          err.stack = e.stack;
          return err;
        }
        /**
         * @hidden
         */


        function statsLocal2Remote(stats) {
          return {
            type: SpecialArgType.STATS,
            statsData: bufferToTransferrableObject(stats.toBuffer())
          };
        }
        /**
         * @hidden
         */


        function statsRemote2Local(stats) {
          return Stats.fromBuffer(transferrableObjectToBuffer(stats.statsData));
        }
        /**
         * @hidden
         */


        function fileFlagLocal2Remote(flag) {
          return {
            type: SpecialArgType.FILEFLAG,
            flagStr: flag.getFlagString()
          };
        }
        /**
         * @hidden
         */


        function fileFlagRemote2Local(remoteFlag) {
          return FileFlag.getFileFlag(remoteFlag.flagStr);
        }
        /**
         * @hidden
         */


        function bufferToTransferrableObject(buff) {
          return buffer2ArrayBuffer(buff);
        }
        /**
         * @hidden
         */


        function transferrableObjectToBuffer(buff) {
          return arrayBuffer2Buffer(buff);
        }
        /**
         * @hidden
         */


        function bufferLocal2Remote(buff) {
          return {
            type: SpecialArgType.BUFFER,
            data: bufferToTransferrableObject(buff)
          };
        }
        /**
         * @hidden
         */


        function bufferRemote2Local(buffArg) {
          return transferrableObjectToBuffer(buffArg.data);
        }
        /**
         * @hidden
         */


        function isAPIRequest(data) {
          return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
        }
        /**
         * @hidden
         */


        function isAPIResponse(data) {
          return data && typeof data === 'object' && data.hasOwnProperty('browserfsMessage') && data['browserfsMessage'];
        }
        /**
         * Represents a remote file in a different worker/thread.
         */


        var WorkerFile = function (PreloadFile$$1) {
          function WorkerFile(_fs, _path, _flag, _stat, remoteFdId, contents) {
            PreloadFile$$1.call(this, _fs, _path, _flag, _stat, contents);
            this._remoteFdId = remoteFdId;
          }

          if (PreloadFile$$1) WorkerFile.__proto__ = PreloadFile$$1;
          WorkerFile.prototype = Object.create(PreloadFile$$1 && PreloadFile$$1.prototype);
          WorkerFile.prototype.constructor = WorkerFile;

          WorkerFile.prototype.getRemoteFdId = function getRemoteFdId() {
            return this._remoteFdId;
          };
          /**
           * @hidden
           */


          WorkerFile.prototype.toRemoteArg = function toRemoteArg() {
            return {
              type: SpecialArgType.FD,
              id: this._remoteFdId,
              data: bufferToTransferrableObject(this.getBuffer()),
              stat: bufferToTransferrableObject(this.getStats().toBuffer()),
              path: this.getPath(),
              flag: this.getFlag().getFlagString()
            };
          };

          WorkerFile.prototype.sync = function sync(cb) {
            this._syncClose('sync', cb);
          };

          WorkerFile.prototype.close = function close(cb) {
            this._syncClose('close', cb);
          };

          WorkerFile.prototype._syncClose = function _syncClose(type, cb) {
            var this$1 = this;

            if (this.isDirty()) {
              this._fs.syncClose(type, this, function (e) {
                if (!e) {
                  this$1.resetDirty();
                }

                cb(e);
              });
            } else {
              cb();
            }
          };

          return WorkerFile;
        }(PreloadFile);
        /**
         * WorkerFS lets you access a BrowserFS instance that is running in a different
         * JavaScript context (e.g. access BrowserFS in one of your WebWorkers, or
         * access BrowserFS running on the main page from a WebWorker).
         *
         * For example, to have a WebWorker access files in the main browser thread,
         * do the following:
         *
         * MAIN BROWSER THREAD:
         *
         * ```javascript
         *   // Listen for remote file system requests.
         *   BrowserFS.FileSystem.WorkerFS.attachRemoteListener(webWorkerObject);
         * ```
         *
         * WEBWORKER THREAD:
         *
         * ```javascript
         *   // Set the remote file system as the root file system.
         *   BrowserFS.configure({ fs: "WorkerFS", options: { worker: self }}, function(e) {
         *     // Ready!
         *   });
         * ```
         *
         * Note that synchronous operations are not permitted on the WorkerFS, regardless
         * of the configuration option of the remote FS.
         */


        var WorkerFS = function (BaseFileSystem$$1) {
          function WorkerFS(worker, deprecateMsg) {
            var this$1 = this;
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);
            this._callbackConverter = new CallbackArgumentConverter();
            this._isInitialized = false;
            this._isReadOnly = false;
            this._supportLinks = false;
            this._supportProps = false;
            this._worker = worker;
            deprecationMessage(deprecateMsg, WorkerFS.Name, {
              worker: "Web Worker instance"
            });

            this._worker.addEventListener('message', function (e) {
              var resp = e.data;

              if (isAPIResponse(resp)) {
                var i;
                var args = resp.args;
                var fixedArgs = new Array(args.length); // Dispatch event to correct id.

                for (i = 0; i < fixedArgs.length; i++) {
                  fixedArgs[i] = this$1._argRemote2Local(args[i]);
                }

                this$1._callbackConverter.toLocalArg(resp.cbId).apply(null, fixedArgs);
              }
            });
          }

          if (BaseFileSystem$$1) WorkerFS.__proto__ = BaseFileSystem$$1;
          WorkerFS.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          WorkerFS.prototype.constructor = WorkerFS;

          WorkerFS.Create = function Create(opts, cb) {
            var fs = new WorkerFS(opts.worker, false);
            fs.initialize(function () {
              cb(null, fs);
            });
          };

          WorkerFS.isAvailable = function isAvailable() {
            return typeof importScripts !== 'undefined' || typeof Worker !== 'undefined';
          };
          /**
           * Attaches a listener to the remote worker for file system requests.
           */


          WorkerFS.attachRemoteListener = function attachRemoteListener(worker) {
            var fdConverter = new FileDescriptorArgumentConverter();

            function argLocal2Remote(arg, requestArgs, cb) {
              switch (typeof arg) {
                case 'object':
                  if (arg instanceof Stats) {
                    cb(null, statsLocal2Remote(arg));
                  } else if (arg instanceof ApiError) {
                    cb(null, apiErrorLocal2Remote(arg));
                  } else if (arg instanceof BaseFile) {
                    // Pass in p and flags from original request.
                    cb(null, fdConverter.toRemoteArg(arg, requestArgs[0], requestArgs[1], cb));
                  } else if (arg instanceof FileFlag) {
                    cb(null, fileFlagLocal2Remote(arg));
                  } else if (arg instanceof Buffer) {
                    cb(null, bufferLocal2Remote(arg));
                  } else if (arg instanceof Error) {
                    cb(null, errorLocal2Remote(arg));
                  } else {
                    cb(null, arg);
                  }

                  break;

                default:
                  cb(null, arg);
                  break;
              }
            }

            function argRemote2Local(arg, fixedRequestArgs) {
              if (!arg) {
                return arg;
              }

              switch (typeof arg) {
                case 'object':
                  if (typeof arg['type'] === 'number') {
                    var specialArg = arg;

                    switch (specialArg.type) {
                      case SpecialArgType.CB:
                        var cbId = arg.id;
                        return function () {
                          var arguments$1 = arguments;
                          var i;
                          var fixedArgs = new Array(arguments.length);
                          var message,
                              countdown = arguments.length;

                          function abortAndSendError(err) {
                            if (countdown > 0) {
                              countdown = -1;
                              message = {
                                browserfsMessage: true,
                                cbId: cbId,
                                args: [apiErrorLocal2Remote(err)]
                              };
                              worker.postMessage(message);
                            }
                          }

                          for (i = 0; i < arguments.length; i++) {
                            // Capture i and argument.
                            (function (i, arg) {
                              argLocal2Remote(arg, fixedRequestArgs, function (err, fixedArg) {
                                fixedArgs[i] = fixedArg;

                                if (err) {
                                  abortAndSendError(err);
                                } else if (--countdown === 0) {
                                  message = {
                                    browserfsMessage: true,
                                    cbId: cbId,
                                    args: fixedArgs
                                  };
                                  worker.postMessage(message);
                                }
                              });
                            })(i, arguments$1[i]);
                          }

                          if (arguments.length === 0) {
                            message = {
                              browserfsMessage: true,
                              cbId: cbId,
                              args: fixedArgs
                            };
                            worker.postMessage(message);
                          }
                        };

                      case SpecialArgType.API_ERROR:
                        return apiErrorRemote2Local(specialArg);

                      case SpecialArgType.STATS:
                        return statsRemote2Local(specialArg);

                      case SpecialArgType.FILEFLAG:
                        return fileFlagRemote2Local(specialArg);

                      case SpecialArgType.BUFFER:
                        return bufferRemote2Local(specialArg);

                      case SpecialArgType.ERROR:
                        return errorRemote2Local(specialArg);

                      default:
                        // No idea what this is.
                        return arg;
                    }
                  } else {
                    return arg;
                  }

                default:
                  return arg;
              }
            }

            worker.addEventListener('message', function (e) {
              var request = e.data;

              if (isAPIRequest(request)) {
                var args = request.args,
                    fixedArgs = new Array(args.length);

                switch (request.method) {
                  case 'close':
                  case 'sync':
                    (function () {
                      // File descriptor-relative methods.
                      var remoteCb = args[1];
                      fdConverter.applyFdAPIRequest(request, function (err) {
                        // Send response.
                        var response = {
                          browserfsMessage: true,
                          cbId: remoteCb.id,
                          args: err ? [apiErrorLocal2Remote(err)] : []
                        };
                        worker.postMessage(response);
                      });
                    })();

                    break;

                  case 'probe':
                    (function () {
                      var rootFs = _fsMock.getRootFS(),
                          remoteCb = args[1],
                          probeResponse = {
                        type: SpecialArgType.PROBE,
                        isReadOnly: rootFs.isReadOnly(),
                        supportsLinks: rootFs.supportsLinks(),
                        supportsProps: rootFs.supportsProps()
                      },
                          response = {
                        browserfsMessage: true,
                        cbId: remoteCb.id,
                        args: [probeResponse]
                      };

                      worker.postMessage(response);
                    })();

                    break;

                  default:
                    // File system methods.
                    for (var i = 0; i < args.length; i++) {
                      fixedArgs[i] = argRemote2Local(args[i], fixedArgs);
                    }

                    var rootFS = _fsMock.getRootFS();

                    rootFS[request.method].apply(rootFS, fixedArgs);
                    break;
                }
              }
            });
          };

          WorkerFS.prototype.getName = function getName() {
            return WorkerFS.Name;
          };
          /**
           * **Deprecated. Please use WorkerFS.Create() method to construct and initialize WorkerFS instances.**
           *
           * Called once both local and remote sides are set up.
           */


          WorkerFS.prototype.initialize = function initialize(cb) {
            var this$1 = this;

            if (!this._isInitialized) {
              var message = {
                browserfsMessage: true,
                method: 'probe',
                args: [this._argLocal2Remote(emptyBuffer()), this._callbackConverter.toRemoteArg(function (probeResponse) {
                  this$1._isInitialized = true;
                  this$1._isReadOnly = probeResponse.isReadOnly;
                  this$1._supportLinks = probeResponse.supportsLinks;
                  this$1._supportProps = probeResponse.supportsProps;
                  cb();
                })]
              };

              this._worker.postMessage(message);
            } else {
              cb();
            }
          };

          WorkerFS.prototype.isReadOnly = function isReadOnly() {
            return this._isReadOnly;
          };

          WorkerFS.prototype.supportsSynch = function supportsSynch() {
            return false;
          };

          WorkerFS.prototype.supportsLinks = function supportsLinks() {
            return this._supportLinks;
          };

          WorkerFS.prototype.supportsProps = function supportsProps() {
            return this._supportProps;
          };

          WorkerFS.prototype.rename = function rename(oldPath, newPath, cb) {
            this._rpc('rename', arguments);
          };

          WorkerFS.prototype.stat = function stat(p, isLstat, cb) {
            this._rpc('stat', arguments);
          };

          WorkerFS.prototype.open = function open(p, flag, mode, cb) {
            this._rpc('open', arguments);
          };

          WorkerFS.prototype.unlink = function unlink(p, cb) {
            this._rpc('unlink', arguments);
          };

          WorkerFS.prototype.rmdir = function rmdir(p, cb) {
            this._rpc('rmdir', arguments);
          };

          WorkerFS.prototype.mkdir = function mkdir(p, mode, cb) {
            this._rpc('mkdir', arguments);
          };

          WorkerFS.prototype.readdir = function readdir(p, cb) {
            this._rpc('readdir', arguments);
          };

          WorkerFS.prototype.exists = function exists(p, cb) {
            this._rpc('exists', arguments);
          };

          WorkerFS.prototype.realpath = function realpath(p, cache, cb) {
            this._rpc('realpath', arguments);
          };

          WorkerFS.prototype.truncate = function truncate(p, len, cb) {
            this._rpc('truncate', arguments);
          };

          WorkerFS.prototype.readFile = function readFile(fname, encoding, flag, cb) {
            this._rpc('readFile', arguments);
          };

          WorkerFS.prototype.writeFile = function writeFile(fname, data, encoding, flag, mode, cb) {
            this._rpc('writeFile', arguments);
          };

          WorkerFS.prototype.appendFile = function appendFile(fname, data, encoding, flag, mode, cb) {
            this._rpc('appendFile', arguments);
          };

          WorkerFS.prototype.chmod = function chmod(p, isLchmod, mode, cb) {
            this._rpc('chmod', arguments);
          };

          WorkerFS.prototype.chown = function chown(p, isLchown, uid, gid, cb) {
            this._rpc('chown', arguments);
          };

          WorkerFS.prototype.utimes = function utimes(p, atime, mtime, cb) {
            this._rpc('utimes', arguments);
          };

          WorkerFS.prototype.link = function link(srcpath, dstpath, cb) {
            this._rpc('link', arguments);
          };

          WorkerFS.prototype.symlink = function symlink(srcpath, dstpath, type, cb) {
            this._rpc('symlink', arguments);
          };

          WorkerFS.prototype.readlink = function readlink(p, cb) {
            this._rpc('readlink', arguments);
          };

          WorkerFS.prototype.syncClose = function syncClose(method, fd, cb) {
            this._worker.postMessage({
              browserfsMessage: true,
              method: method,
              args: [fd.toRemoteArg(), this._callbackConverter.toRemoteArg(cb)]
            });
          };

          WorkerFS.prototype._argRemote2Local = function _argRemote2Local(arg) {
            if (!arg) {
              return arg;
            }

            switch (typeof arg) {
              case 'object':
                if (typeof arg['type'] === 'number') {
                  var specialArg = arg;

                  switch (specialArg.type) {
                    case SpecialArgType.API_ERROR:
                      return apiErrorRemote2Local(specialArg);

                    case SpecialArgType.FD:
                      var fdArg = specialArg;
                      return new WorkerFile(this, fdArg.path, FileFlag.getFileFlag(fdArg.flag), Stats.fromBuffer(transferrableObjectToBuffer(fdArg.stat)), fdArg.id, transferrableObjectToBuffer(fdArg.data));

                    case SpecialArgType.STATS:
                      return statsRemote2Local(specialArg);

                    case SpecialArgType.FILEFLAG:
                      return fileFlagRemote2Local(specialArg);

                    case SpecialArgType.BUFFER:
                      return bufferRemote2Local(specialArg);

                    case SpecialArgType.ERROR:
                      return errorRemote2Local(specialArg);

                    default:
                      return arg;
                  }
                } else {
                  return arg;
                }

              default:
                return arg;
            }
          };

          WorkerFS.prototype._rpc = function _rpc(methodName, args) {
            var this$1 = this;
            var fixedArgs = new Array(args.length);

            for (var i = 0; i < args.length; i++) {
              fixedArgs[i] = this$1._argLocal2Remote(args[i]);
            }

            var message = {
              browserfsMessage: true,
              method: methodName,
              args: fixedArgs
            };

            this._worker.postMessage(message);
          };
          /**
           * Converts a local argument into a remote argument. Public so WorkerFile objects can call it.
           */


          WorkerFS.prototype._argLocal2Remote = function _argLocal2Remote(arg) {
            if (!arg) {
              return arg;
            }

            switch (typeof arg) {
              case "object":
                if (arg instanceof Stats) {
                  return statsLocal2Remote(arg);
                } else if (arg instanceof ApiError) {
                  return apiErrorLocal2Remote(arg);
                } else if (arg instanceof WorkerFile) {
                  return arg.toRemoteArg();
                } else if (arg instanceof FileFlag) {
                  return fileFlagLocal2Remote(arg);
                } else if (arg instanceof Buffer) {
                  return bufferLocal2Remote(arg);
                } else if (arg instanceof Error) {
                  return errorLocal2Remote(arg);
                } else {
                  return "Unknown argument";
                }

              case "function":
                return this._callbackConverter.toRemoteArg(arg);

              default:
                return arg;
            }
          };

          return WorkerFS;
        }(BaseFileSystem);

        WorkerFS.Name = "WorkerFS";
        WorkerFS.Options = {
          worker: {
            type: "object",
            description: "The target worker that you want to connect to, or the current worker if in a worker context.",
            validator: function (v, cb) {
              // Check for a `postMessage` function.
              if (v['postMessage']) {
                cb();
              } else {
                cb(new ApiError(ErrorCode.EINVAL, "option must be a Web Worker instance."));
              }
            }
          }
        };
        /**
         * Contains utility methods for performing a variety of tasks with
         * XmlHttpRequest across browsers.
         */

        function asyncDownloadFileModern(p, type, cb) {
          var req = new XMLHttpRequest();
          req.open('GET', p, true);
          var jsonSupported = true;

          switch (type) {
            case 'buffer':
              req.responseType = 'arraybuffer';
              break;

            case 'json':
              // Some browsers don't support the JSON response type.
              // They either reset responseType, or throw an exception.
              // @see https://github.com/Modernizr/Modernizr/blob/master/src/testXhrType.js
              try {
                req.responseType = 'json';
                jsonSupported = req.responseType === 'json';
              } catch (e) {
                jsonSupported = false;
              }

              break;

            default:
              return cb(new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type));
          }

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    // XXX: WebKit-based browsers return *null* when XHRing an empty file.
                    return cb(null, req.response ? Buffer.from(req.response) : emptyBuffer());

                  case 'json':
                    if (jsonSupported) {
                      return cb(null, req.response);
                    } else {
                      return cb(null, JSON.parse(req.responseText));
                    }

                }
              } else {
                return cb(new ApiError(req.status, "XHR error."));
              }
            }
          };

          req.send();
        }

        function syncDownloadFileModern(p, type) {
          var req = new XMLHttpRequest();
          req.open('GET', p, false); // On most platforms, we cannot set the responseType of synchronous downloads.
          // @todo Test for this; IE10 allows this, as do older versions of Chrome/FF.

          var data = null;
          var err = null; // Classic hack to download binary data as a string.

          req.overrideMimeType('text/plain; charset=x-user-defined');

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    // Convert the text into a buffer.
                    var text = req.responseText;
                    data = Buffer.alloc(text.length); // Throw away the upper bits of each character.

                    for (var i = 0; i < text.length; i++) {
                      // This will automatically throw away the upper bit of each
                      // character for us.
                      data[i] = text.charCodeAt(i);
                    }

                    return;

                  case 'json':
                    data = JSON.parse(req.responseText);
                    return;
                }
              } else {
                err = new ApiError(req.status, "XHR error.");
                return;
              }
            }
          };

          req.send();

          if (err) {
            throw err;
          }

          return data;
        }

        function syncDownloadFileIE10(p, type) {
          var req = new XMLHttpRequest();
          req.open('GET', p, false);

          switch (type) {
            case 'buffer':
              req.responseType = 'arraybuffer';
              break;

            case 'json':
              // IE10 does not support the JSON type.
              break;

            default:
              throw new ApiError(ErrorCode.EINVAL, "Invalid download type: " + type);
          }

          var data;
          var err;

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                switch (type) {
                  case 'buffer':
                    data = Buffer.from(req.response);
                    break;

                  case 'json':
                    data = JSON.parse(req.response);
                    break;
                }
              } else {
                err = new ApiError(req.status, "XHR error.");
              }
            }
          };

          req.send();

          if (err) {
            throw err;
          }

          return data;
        }
        /**
         * @hidden
         */


        function getFileSize(async, p, cb) {
          var req = new XMLHttpRequest();
          req.open('HEAD', p, async);

          req.onreadystatechange = function (e) {
            if (req.readyState === 4) {
              if (req.status === 200) {
                try {
                  return cb(null, parseInt(req.getResponseHeader('Content-Length') || '-1', 10));
                } catch (e) {
                  // In the event that the header isn't present or there is an error...
                  return cb(new ApiError(ErrorCode.EIO, "XHR HEAD error: Could not read content-length."));
                }
              } else {
                return cb(new ApiError(req.status, "XHR HEAD error."));
              }
            }
          };

          req.send();
        }
        /**
         * Asynchronously download a file as a buffer or a JSON object.
         * Note that the third function signature with a non-specialized type is
         * invalid, but TypeScript requires it when you specialize string arguments to
         * constants.
         * @hidden
         */


        var asyncDownloadFile = asyncDownloadFileModern;
        /**
         * Synchronously download a file as a buffer or a JSON object.
         * Note that the third function signature with a non-specialized type is
         * invalid, but TypeScript requires it when you specialize string arguments to
         * constants.
         * @hidden
         */

        var syncDownloadFile = isIE && typeof Blob !== 'undefined' ? syncDownloadFileIE10 : syncDownloadFileModern;
        /**
         * Synchronously retrieves the size of the given file in bytes.
         * @hidden
         */

        function getFileSizeSync(p) {
          var rv = -1;
          getFileSize(false, p, function (err, size) {
            if (err) {
              throw err;
            }

            rv = size;
          });
          return rv;
        }
        /**
         * Asynchronously retrieves the size of the given file in bytes.
         * @hidden
         */


        function getFileSizeAsync(p, cb) {
          getFileSize(true, p, cb);
        }
        /**
         * A simple class for storing a filesystem index. Assumes that all paths passed
         * to it are *absolute* paths.
         *
         * Can be used as a partial or a full index, although care must be taken if used
         * for the former purpose, especially when directories are concerned.
         */


        var FileIndex = function FileIndex() {
          // _index is a single-level key,value store that maps *directory* paths to
          // DirInodes. File information is only contained in DirInodes themselves.
          this._index = {}; // Create the root directory.

          this.addPath('/', new DirInode());
        };
        /**
         * Static method for constructing indices from a JSON listing.
         * @param listing Directory listing generated by tools/XHRIndexer.coffee
         * @return A new FileIndex object.
         */


        FileIndex.fromListing = function fromListing(listing) {
          var idx = new FileIndex(); // Add a root DirNode.

          var rootInode = new DirInode();
          idx._index['/'] = rootInode;
          var queue = [['', listing, rootInode]];

          while (queue.length > 0) {
            var inode = void 0;
            var next = queue.pop();
            var pwd = next[0];
            var tree = next[1];
            var parent = next[2];

            for (var node in tree) {
              if (tree.hasOwnProperty(node)) {
                var children = tree[node];
                var name = pwd + "/" + node;

                if (children) {
                  idx._index[name] = inode = new DirInode();
                  queue.push([name, children, inode]);
                } else {
                  // This inode doesn't have correct size information, noted with -1.
                  inode = new FileInode(new Stats(FileType.FILE, -1, 0x16D));
                }

                if (parent) {
                  parent._ls[node] = inode;
                }
              }
            }
          }

          return idx;
        };
        /**
         * Runs the given function over all files in the index.
         */


        FileIndex.prototype.fileIterator = function fileIterator(cb) {
          var this$1 = this;

          for (var path$$1 in this$1._index) {
            if (this$1._index.hasOwnProperty(path$$1)) {
              var dir = this$1._index[path$$1];
              var files = dir.getListing();

              for (var i = 0, list = files; i < list.length; i += 1) {
                var file = list[i];
                var item = dir.getItem(file);

                if (isFileInode(item)) {
                  cb(item.getData());
                }
              }
            }
          }
        };
        /**
         * Adds the given absolute path to the index if it is not already in the index.
         * Creates any needed parent directories.
         * @param path The path to add to the index.
         * @param inode The inode for the
         *   path to add.
         * @return 'True' if it was added or already exists, 'false' if there
         *   was an issue adding it (e.g. item in path is a file, item exists but is
         *   different).
         * @todo If adding fails and implicitly creates directories, we do not clean up
         *   the new empty directories.
         */


        FileIndex.prototype.addPath = function addPath(path$$1, inode) {
          if (!inode) {
            throw new Error('Inode must be specified');
          }

          if (path$$1[0] !== '/') {
            throw new Error('Path must be absolute, got: ' + path$$1);
          } // Check if it already exists.


          if (this._index.hasOwnProperty(path$$1)) {
            return this._index[path$$1] === inode;
          }

          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Try to add to its parent directory first.

          var parent = this._index[dirpath];

          if (parent === undefined && path$$1 !== '/') {
            // Create parent.
            parent = new DirInode();

            if (!this.addPath(dirpath, parent)) {
              return false;
            }
          } // Add myself to my parent.


          if (path$$1 !== '/') {
            if (!parent.addItem(itemname, inode)) {
              return false;
            }
          } // If I'm a directory, add myself to the index.


          if (isDirInode(inode)) {
            this._index[path$$1] = inode;
          }

          return true;
        };
        /**
         * Adds the given absolute path to the index if it is not already in the index.
         * The path is added without special treatment (no joining of adjacent separators, etc).
         * Creates any needed parent directories.
         * @param path The path to add to the index.
         * @param inode The inode for the
         *   path to add.
         * @return 'True' if it was added or already exists, 'false' if there
         *   was an issue adding it (e.g. item in path is a file, item exists but is
         *   different).
         * @todo If adding fails and implicitly creates directories, we do not clean up
         *   the new empty directories.
         */


        FileIndex.prototype.addPathFast = function addPathFast(path$$1, inode) {
          var itemNameMark = path$$1.lastIndexOf('/');
          var parentPath = itemNameMark === 0 ? "/" : path$$1.substring(0, itemNameMark);
          var itemName = path$$1.substring(itemNameMark + 1); // Try to add to its parent directory first.

          var parent = this._index[parentPath];

          if (parent === undefined) {
            // Create parent.
            parent = new DirInode();
            this.addPathFast(parentPath, parent);
          }

          if (!parent.addItem(itemName, inode)) {
            return false;
          } // If adding a directory, add to the index as well.


          if (inode.isDir()) {
            this._index[path$$1] = inode;
          }

          return true;
        };
        /**
         * Removes the given path. Can be a file or a directory.
         * @return The removed item,
         *   or null if it did not exist.
         */


        FileIndex.prototype.removePath = function removePath(path$$1) {
          var this$1 = this;

          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Try to remove it from its parent directory first.

          var parent = this._index[dirpath];

          if (parent === undefined) {
            return null;
          } // Remove myself from my parent.


          var inode = parent.remItem(itemname);

          if (inode === null) {
            return null;
          } // If I'm a directory, remove myself from the index, and remove my children.


          if (isDirInode(inode)) {
            var children = inode.getListing();

            for (var i = 0, list = children; i < list.length; i += 1) {
              var child = list[i];
              this$1.removePath(path$$1 + '/' + child);
            } // Remove the directory from the index, unless it's the root.


            if (path$$1 !== '/') {
              delete this._index[path$$1];
            }
          }

          return inode;
        };
        /**
         * Retrieves the directory listing of the given path.
         * @return An array of files in the given path, or 'null' if it does not exist.
         */


        FileIndex.prototype.ls = function ls(path$$1) {
          var item = this._index[path$$1];

          if (item === undefined) {
            return null;
          }

          return item.getListing();
        };
        /**
         * Returns the inode of the given item.
         * @return Returns null if the item does not exist.
         */


        FileIndex.prototype.getInode = function getInode(path$$1) {
          var splitPath = this._split_path(path$$1);

          var dirpath = splitPath[0];
          var itemname = splitPath[1]; // Retrieve from its parent directory.

          var parent = this._index[dirpath];

          if (parent === undefined) {
            return null;
          } // Root case


          if (dirpath === path$$1) {
            return parent;
          }

          return parent.getItem(itemname);
        };
        /**
         * Split into a (directory path, item name) pair
         */


        FileIndex.prototype._split_path = function _split_path(p) {
          var dirpath = path.dirname(p);
          var itemname = p.substr(dirpath.length + (dirpath === "/" ? 0 : 1));
          return [dirpath, itemname];
        };
        /**
         * Inode for a file. Stores an arbitrary (filesystem-specific) data payload.
         */


        var FileInode = function FileInode(data) {
          this.data = data;
        };

        FileInode.prototype.isFile = function isFile() {
          return true;
        };

        FileInode.prototype.isDir = function isDir() {
          return false;
        };

        FileInode.prototype.getData = function getData() {
          return this.data;
        };

        FileInode.prototype.setData = function setData(data) {
          this.data = data;
        };
        /**
         * Inode for a directory. Currently only contains the directory listing.
         */


        var DirInode = function DirInode(data) {
          if (data === void 0) data = null;
          this.data = data;
          this._ls = {};
        };

        DirInode.prototype.isFile = function isFile() {
          return false;
        };

        DirInode.prototype.isDir = function isDir() {
          return true;
        };

        DirInode.prototype.getData = function getData() {
          return this.data;
        };
        /**
         * Return a Stats object for this inode.
         * @todo Should probably remove this at some point. This isn't the
         *   responsibility of the FileIndex.
         */


        DirInode.prototype.getStats = function getStats() {
          return new Stats(FileType.DIRECTORY, 4096, 0x16D);
        };
        /**
         * Returns the directory listing for this directory. Paths in the directory are
         * relative to the directory's path.
         * @return The directory listing for this directory.
         */


        DirInode.prototype.getListing = function getListing() {
          return Object.keys(this._ls);
        };
        /**
         * Returns the inode for the indicated item, or null if it does not exist.
         * @param p Name of item in this directory.
         */


        DirInode.prototype.getItem = function getItem(p) {
          var item = this._ls[p];
          return item ? item : null;
        };
        /**
         * Add the given item to the directory listing. Note that the given inode is
         * not copied, and will be mutated by the DirInode if it is a DirInode.
         * @param p Item name to add to the directory listing.
         * @param inode The inode for the
         *   item to add to the directory inode.
         * @return True if it was added, false if it already existed.
         */


        DirInode.prototype.addItem = function addItem(p, inode) {
          if (p in this._ls) {
            return false;
          }

          this._ls[p] = inode;
          return true;
        };
        /**
         * Removes the given item from the directory listing.
         * @param p Name of item to remove from the directory listing.
         * @return Returns the item
         *   removed, or null if the item did not exist.
         */


        DirInode.prototype.remItem = function remItem(p) {
          var item = this._ls[p];

          if (item === undefined) {
            return null;
          }

          delete this._ls[p];
          return item;
        };
        /**
         * @hidden
         */


        function isFileInode(inode) {
          return !!inode && inode.isFile();
        }
        /**
         * @hidden
         */


        function isDirInode(inode) {
          return !!inode && inode.isDir();
        }
        /**
         * Try to convert the given buffer into a string, and pass it to the callback.
         * Optimization that removes the needed try/catch into a helper function, as
         * this is an uncommon case.
         * @hidden
         */


        function tryToString(buff, encoding, cb) {
          try {
            cb(null, buff.toString(encoding));
          } catch (e) {
            cb(e);
          }
        }
        /**
         * A simple filesystem backed by XMLHttpRequests. You must create a directory listing using the
         * `make_xhrfs_index` tool provided by BrowserFS.
         *
         * If you install BrowserFS globally with `npm i -g browserfs`, you can generate a listing by
         * running `make_xhrfs_index` in your terminal in the directory you would like to index:
         *
         * ```
         * make_xhrfs_index > index.json
         * ```
         *
         * Listings objects look like the following:
         *
         * ```json
         * {
         *   "home": {
         *     "jvilk": {
         *       "someFile.txt": null,
         *       "someDir": {
         *         // Empty directory
         *       }
         *     }
         *   }
         * }
         * ```
         *
         * *This example has the folder `/home/jvilk` with subfile `someFile.txt` and subfolder `someDir`.*
         */


        var XmlHttpRequest = function (BaseFileSystem$$1) {
          function XmlHttpRequest(listingUrlOrObj, prefixUrl, deprecateMsg) {
            if (prefixUrl === void 0) prefixUrl = '';
            if (deprecateMsg === void 0) deprecateMsg = true;
            BaseFileSystem$$1.call(this);

            if (!listingUrlOrObj) {
              listingUrlOrObj = 'index.json';
            } // prefix_url must end in a directory separator.


            if (prefixUrl.length > 0 && prefixUrl.charAt(prefixUrl.length - 1) !== '/') {
              prefixUrl = prefixUrl + '/';
            }

            this.prefixUrl = prefixUrl;
            var listing = null;

            if (typeof listingUrlOrObj === "string") {
              listing = this._requestFileSync(listingUrlOrObj, 'json');

              if (!listing) {
                throw new Error("Unable to find listing at URL: ${listingUrlOrObj}");
              }
            } else {
              listing = listingUrlOrObj;
            }

            deprecationMessage(deprecateMsg, XmlHttpRequest.Name, {
              index: typeof listingUrlOrObj === "string" ? listingUrlOrObj : "file index as an object",
              baseUrl: prefixUrl
            });
            this._index = FileIndex.fromListing(listing);
          }

          if (BaseFileSystem$$1) XmlHttpRequest.__proto__ = BaseFileSystem$$1;
          XmlHttpRequest.prototype = Object.create(BaseFileSystem$$1 && BaseFileSystem$$1.prototype);
          XmlHttpRequest.prototype.constructor = XmlHttpRequest;
          /**
           * Construct an XmlHttpRequest file system backend with the given options.
           */

          XmlHttpRequest.Create = function Create(opts, cb) {
            if (opts.index === undefined) {
              opts.index = "index.json";
            }

            if (typeof opts.index === "string") {
              XmlHttpRequest.FromURL(opts.index, cb, opts.baseUrl, false);
            } else {
              cb(null, new XmlHttpRequest(opts.index, opts.baseUrl, false));
            }
          };

          XmlHttpRequest.isAvailable = function isAvailable() {
            return typeof XMLHttpRequest !== "undefined" && XMLHttpRequest !== null;
          };
          /**
           * **Deprecated. Please use XmlHttpRequest.Create() method instead to construct XmlHttpRequest objects.**
           *
           * Constructs an XmlHttpRequest object using the directory listing at the given URL.
           * Uses the base URL as the URL prefix for fetched files.
           * @param cb Called when the file system has been instantiated, or if an error occurs.
           */


          XmlHttpRequest.FromURL = function FromURL(url, cb, baseUrl, deprecateMsg) {
            if (baseUrl === void 0) baseUrl = url.slice(0, url.lastIndexOf('/') + 1);
            if (deprecateMsg === void 0) deprecateMsg = true;

            if (deprecateMsg) {
              console.warn("[XmlHttpRequest] XmlHttpRequest.FromURL() is deprecated and will be removed in the next major release. Please use 'XmlHttpRequest.Create({ index: \"" + url + "\", baseUrl: \"" + baseUrl + "\" }, cb)' instead.");
            }

            asyncDownloadFile(url, "json", function (e, data) {
              if (e) {
                cb(e);
              } else {
                cb(null, new XmlHttpRequest(data, baseUrl, false));
              }
            });
          };

          XmlHttpRequest.prototype.empty = function empty() {
            this._index.fileIterator(function (file) {
              file.fileData = null;
            });
          };

          XmlHttpRequest.prototype.getName = function getName() {
            return XmlHttpRequest.Name;
          };

          XmlHttpRequest.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system. We could calculate the total space, but that's not
            // important right now.
            cb(0, 0);
          };

          XmlHttpRequest.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          XmlHttpRequest.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          XmlHttpRequest.prototype.supportsProps = function supportsProps() {
            return false;
          };

          XmlHttpRequest.prototype.supportsSynch = function supportsSynch() {
            return true;
          };
          /**
           * Special XHR function: Preload the given file into the index.
           * @param [String] path
           * @param [BrowserFS.Buffer] buffer
           */


          XmlHttpRequest.prototype.preloadFile = function preloadFile(path$$1, buffer$$1) {
            var inode = this._index.getInode(path$$1);

            if (isFileInode(inode)) {
              if (inode === null) {
                throw ApiError.ENOENT(path$$1);
              }

              var stats = inode.getData();
              stats.size = buffer$$1.length;
              stats.fileData = buffer$$1;
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          XmlHttpRequest.prototype.stat = function stat(path$$1, isLstat, cb) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              return cb(ApiError.ENOENT(path$$1));
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData(); // At this point, a non-opened file will still have default stats from the listing.

              if (stats.size < 0) {
                this._requestFileSizeAsync(path$$1, function (e, size) {
                  if (e) {
                    return cb(e);
                  }

                  stats.size = size;
                  cb(null, stats.clone());
                });
              } else {
                cb(null, stats.clone());
              }
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
              cb(null, stats);
            } else {
              cb(ApiError.FileError(ErrorCode.EINVAL, path$$1));
            }
          };

          XmlHttpRequest.prototype.statSync = function statSync(path$$1, isLstat) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData(); // At this point, a non-opened file will still have default stats from the listing.

              if (stats.size < 0) {
                stats.size = this._requestFileSizeSync(path$$1);
              }
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
            } else {
              throw ApiError.FileError(ErrorCode.EINVAL, path$$1);
            }

            return stats;
          };

          XmlHttpRequest.prototype.open = function open(path$$1, flags, mode, cb) {
            // INVARIANT: You can't write to files on this file system.
            if (flags.isWriteable()) {
              return cb(new ApiError(ErrorCode.EPERM, path$$1));
            }

            var self = this; // Check if the path exists, and is a file.

            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              return cb(ApiError.ENOENT(path$$1));
            }

            if (isFileInode(inode)) {
              var stats = inode.getData();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  return cb(ApiError.EEXIST(path$$1));

                case ActionType.NOP:
                  // Use existing file contents.
                  // XXX: Uh, this maintains the previously-used flag.
                  if (stats.fileData) {
                    return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), stats.fileData));
                  } // @todo be lazier about actually requesting the file


                  this._requestFileAsync(path$$1, 'buffer', function (err, buffer$$1) {
                    if (err) {
                      return cb(err);
                    } // we don't initially have file sizes


                    stats.size = buffer$$1.length;
                    stats.fileData = buffer$$1;
                    return cb(null, new NoSyncFile(self, path$$1, flags, stats.clone(), buffer$$1));
                  });

                  break;

                default:
                  return cb(new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.'));
              }
            } else {
              return cb(ApiError.EISDIR(path$$1));
            }
          };

          XmlHttpRequest.prototype.openSync = function openSync(path$$1, flags, mode) {
            // INVARIANT: You can't write to files on this file system.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, path$$1);
            } // Check if the path exists, and is a file.


            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            if (isFileInode(inode)) {
              var stats = inode.getData();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(path$$1);

                case ActionType.NOP:
                  // Use existing file contents.
                  // XXX: Uh, this maintains the previously-used flag.
                  if (stats.fileData) {
                    return new NoSyncFile(this, path$$1, flags, stats.clone(), stats.fileData);
                  } // @todo be lazier about actually requesting the file


                  var buffer$$1 = this._requestFileSync(path$$1, 'buffer'); // we don't initially have file sizes


                  stats.size = buffer$$1.length;
                  stats.fileData = buffer$$1;
                  return new NoSyncFile(this, path$$1, flags, stats.clone(), buffer$$1);

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          XmlHttpRequest.prototype.readdir = function readdir(path$$1, cb) {
            try {
              cb(null, this.readdirSync(path$$1));
            } catch (e) {
              cb(e);
            }
          };

          XmlHttpRequest.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            } else if (isDirInode(inode)) {
              return inode.getListing();
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * We have the entire file as a buffer; optimize readFile.
           */


          XmlHttpRequest.prototype.readFile = function readFile(fname, encoding, flag, cb) {
            // Wrap cb in file closing code.
            var oldCb = cb; // Get file.

            this.open(fname, flag, 0x1a4, function (err, fd) {
              if (err) {
                return cb(err);
              }

              cb = function (err, arg) {
                fd.close(function (err2) {
                  if (!err) {
                    err = err2;
                  }

                  return oldCb(err, arg);
                });
              };

              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                cb(err, copyingSlice(fdBuff));
              } else {
                tryToString(fdBuff, encoding, cb);
              }
            });
          };
          /**
           * Specially-optimized readfile.
           */


          XmlHttpRequest.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          XmlHttpRequest.prototype.getXhrPath = function getXhrPath(filePath) {
            if (filePath.charAt(0) === '/') {
              filePath = filePath.slice(1);
            }

            return this.prefixUrl + filePath;
          };

          XmlHttpRequest.prototype._requestFileAsync = function _requestFileAsync(p, type, cb) {
            asyncDownloadFile(this.getXhrPath(p), type, cb);
          };

          XmlHttpRequest.prototype._requestFileSync = function _requestFileSync(p, type) {
            return syncDownloadFile(this.getXhrPath(p), type);
          };
          /**
           * Only requests the HEAD content, for the file size.
           */


          XmlHttpRequest.prototype._requestFileSizeAsync = function _requestFileSizeAsync(path$$1, cb) {
            getFileSizeAsync(this.getXhrPath(path$$1), cb);
          };

          XmlHttpRequest.prototype._requestFileSizeSync = function _requestFileSizeSync(path$$1) {
            return getFileSizeSync(this.getXhrPath(path$$1));
          };

          return XmlHttpRequest;
        }(BaseFileSystem);

        XmlHttpRequest.Name = "XmlHttpRequest";
        XmlHttpRequest.Options = {
          index: {
            type: ["string", "object"],
            optional: true,
            description: "URL to a file index as a JSON file or the file index object itself, generated with the make_xhrfs_index script. Defaults to `index.json`."
          },
          baseUrl: {
            type: "string",
            optional: true,
            description: "Used as the URL prefix for fetched files. Default: Fetch files relative to the index."
          }
        };
        /**
         * (Nonstandard) String utility function for 8-bit ASCII with the extended
         * character set. Unlike the ASCII above, we do not mask the high bits.
         *
         * Placed into a separate file so it can be used with other Buffer implementations.
         * @see http://en.wikipedia.org/wiki/Extended_ASCII
         */

        /**
         * (Nonstandard) String utility function for 8-bit ASCII with the extended
         * character set. Unlike the ASCII above, we do not mask the high bits.
         *
         * Placed into a separate file so it can be used with other Buffer implementations.
         * @see http://en.wikipedia.org/wiki/Extended_ASCII
         */

        var ExtendedASCII = function ExtendedASCII() {};

        ExtendedASCII.str2byte = function str2byte(str, buf) {
          var length = str.length > buf.length ? buf.length : str.length;

          for (var i = 0; i < length; i++) {
            var charCode = str.charCodeAt(i);

            if (charCode > 0x7F) {
              // Check if extended ASCII.
              var charIdx = ExtendedASCII.extendedChars.indexOf(str.charAt(i));

              if (charIdx > -1) {
                charCode = charIdx + 0x80;
              } // Otherwise, keep it as-is.

            }

            buf[charCode] = i;
          }

          return length;
        };

        ExtendedASCII.byte2str = function byte2str(buff) {
          var chars = new Array(buff.length);

          for (var i = 0; i < buff.length; i++) {
            var charCode = buff[i];

            if (charCode > 0x7F) {
              chars[i] = ExtendedASCII.extendedChars[charCode - 128];
            } else {
              chars[i] = String.fromCharCode(charCode);
            }
          }

          return chars.join('');
        };

        ExtendedASCII.byteLength = function byteLength(str) {
          return str.length;
        };

        ExtendedASCII.extendedChars = ['\u00C7', '\u00FC', '\u00E9', '\u00E2', '\u00E4', '\u00E0', '\u00E5', '\u00E7', '\u00EA', '\u00EB', '\u00E8', '\u00EF', '\u00EE', '\u00EC', '\u00C4', '\u00C5', '\u00C9', '\u00E6', '\u00C6', '\u00F4', '\u00F6', '\u00F2', '\u00FB', '\u00F9', '\u00FF', '\u00D6', '\u00DC', '\u00F8', '\u00A3', '\u00D8', '\u00D7', '\u0192', '\u00E1', '\u00ED', '\u00F3', '\u00FA', '\u00F1', '\u00D1', '\u00AA', '\u00BA', '\u00BF', '\u00AE', '\u00AC', '\u00BD', '\u00BC', '\u00A1', '\u00AB', '\u00BB', '_', '_', '_', '\u00A6', '\u00A6', '\u00C1', '\u00C2', '\u00C0', '\u00A9', '\u00A6', '\u00A6', '+', '+', '\u00A2', '\u00A5', '+', '+', '-', '-', '+', '-', '+', '\u00E3', '\u00C3', '+', '+', '-', '-', '\u00A6', '-', '+', '\u00A4', '\u00F0', '\u00D0', '\u00CA', '\u00CB', '\u00C8', 'i', '\u00CD', '\u00CE', '\u00CF', '+', '+', '_', '_', '\u00A6', '\u00CC', '_', '\u00D3', '\u00DF', '\u00D4', '\u00D2', '\u00F5', '\u00D5', '\u00B5', '\u00FE', '\u00DE', '\u00DA', '\u00DB', '\u00D9', '\u00FD', '\u00DD', '\u00AF', '\u00B4', '\u00AD', '\u00B1', '_', '\u00BE', '\u00B6', '\u00A7', '\u00F7', '\u00B8', '\u00B0', '\u00A8', '\u00B7', '\u00B9', '\u00B3', '\u00B2', '_', ' '];
        /**
         * @hidden
         */

        var inflateRaw = __webpack_require__(31).inflateRaw;
        /**
         * Maps CompressionMethod => function that decompresses.
         * @hidden
         */


        var decompressionMethods = {};
        /**
         * 4.4.2.2: Indicates the compatibiltiy of a file's external attributes.
         */

        var ExternalFileAttributeType;

        (function (ExternalFileAttributeType) {
          ExternalFileAttributeType[ExternalFileAttributeType["MSDOS"] = 0] = "MSDOS";
          ExternalFileAttributeType[ExternalFileAttributeType["AMIGA"] = 1] = "AMIGA";
          ExternalFileAttributeType[ExternalFileAttributeType["OPENVMS"] = 2] = "OPENVMS";
          ExternalFileAttributeType[ExternalFileAttributeType["UNIX"] = 3] = "UNIX";
          ExternalFileAttributeType[ExternalFileAttributeType["VM_CMS"] = 4] = "VM_CMS";
          ExternalFileAttributeType[ExternalFileAttributeType["ATARI_ST"] = 5] = "ATARI_ST";
          ExternalFileAttributeType[ExternalFileAttributeType["OS2_HPFS"] = 6] = "OS2_HPFS";
          ExternalFileAttributeType[ExternalFileAttributeType["MAC"] = 7] = "MAC";
          ExternalFileAttributeType[ExternalFileAttributeType["Z_SYSTEM"] = 8] = "Z_SYSTEM";
          ExternalFileAttributeType[ExternalFileAttributeType["CP_M"] = 9] = "CP_M";
          ExternalFileAttributeType[ExternalFileAttributeType["NTFS"] = 10] = "NTFS";
          ExternalFileAttributeType[ExternalFileAttributeType["MVS"] = 11] = "MVS";
          ExternalFileAttributeType[ExternalFileAttributeType["VSE"] = 12] = "VSE";
          ExternalFileAttributeType[ExternalFileAttributeType["ACORN_RISC"] = 13] = "ACORN_RISC";
          ExternalFileAttributeType[ExternalFileAttributeType["VFAT"] = 14] = "VFAT";
          ExternalFileAttributeType[ExternalFileAttributeType["ALT_MVS"] = 15] = "ALT_MVS";
          ExternalFileAttributeType[ExternalFileAttributeType["BEOS"] = 16] = "BEOS";
          ExternalFileAttributeType[ExternalFileAttributeType["TANDEM"] = 17] = "TANDEM";
          ExternalFileAttributeType[ExternalFileAttributeType["OS_400"] = 18] = "OS_400";
          ExternalFileAttributeType[ExternalFileAttributeType["OSX"] = 19] = "OSX";
        })(ExternalFileAttributeType || (ExternalFileAttributeType = {}));
        /**
         * 4.4.5
         */


        var CompressionMethod;

        (function (CompressionMethod) {
          CompressionMethod[CompressionMethod["STORED"] = 0] = "STORED";
          CompressionMethod[CompressionMethod["SHRUNK"] = 1] = "SHRUNK";
          CompressionMethod[CompressionMethod["REDUCED_1"] = 2] = "REDUCED_1";
          CompressionMethod[CompressionMethod["REDUCED_2"] = 3] = "REDUCED_2";
          CompressionMethod[CompressionMethod["REDUCED_3"] = 4] = "REDUCED_3";
          CompressionMethod[CompressionMethod["REDUCED_4"] = 5] = "REDUCED_4";
          CompressionMethod[CompressionMethod["IMPLODE"] = 6] = "IMPLODE";
          CompressionMethod[CompressionMethod["DEFLATE"] = 8] = "DEFLATE";
          CompressionMethod[CompressionMethod["DEFLATE64"] = 9] = "DEFLATE64";
          CompressionMethod[CompressionMethod["TERSE_OLD"] = 10] = "TERSE_OLD";
          CompressionMethod[CompressionMethod["BZIP2"] = 12] = "BZIP2";
          CompressionMethod[CompressionMethod["LZMA"] = 14] = "LZMA";
          CompressionMethod[CompressionMethod["TERSE_NEW"] = 18] = "TERSE_NEW";
          CompressionMethod[CompressionMethod["LZ77"] = 19] = "LZ77";
          CompressionMethod[CompressionMethod["WAVPACK"] = 97] = "WAVPACK";
          CompressionMethod[CompressionMethod["PPMD"] = 98] = "PPMD"; // PPMd version I, Rev 1
        })(CompressionMethod || (CompressionMethod = {}));
        /**
         * Converts the input time and date in MS-DOS format into a JavaScript Date
         * object.
         * @hidden
         */


        function msdos2date(time, date) {
          // MS-DOS Date
          // |0 0 0 0  0|0 0 0  0|0 0 0  0 0 0 0
          //   D (1-31)  M (1-23)  Y (from 1980)
          var day = date & 0x1F; // JS date is 0-indexed, DOS is 1-indexed.

          var month = (date >> 5 & 0xF) - 1;
          var year = (date >> 9) + 1980; // MS DOS Time
          // |0 0 0 0  0|0 0 0  0 0 0|0  0 0 0 0
          //    Second      Minute       Hour

          var second = time & 0x1F;
          var minute = time >> 5 & 0x3F;
          var hour = time >> 11;
          return new Date(year, month, day, hour, minute, second);
        }
        /**
         * Safely returns the string from the buffer, even if it is 0 bytes long.
         * (Normally, calling toString() on a buffer with start === end causes an
         * exception).
         * @hidden
         */


        function safeToString(buff, useUTF8, start, length) {
          if (length === 0) {
            return "";
          } else if (useUTF8) {
            return buff.toString('utf8', start, start + length);
          } else {
            return ExtendedASCII.byte2str(buff.slice(start, start + length));
          }
        }
        /*
           4.3.6 Overall .ZIP file format:
        
              [local file header 1]
              [encryption header 1]
              [file data 1]
              [data descriptor 1]
              .
              .
              .
              [local file header n]
              [encryption header n]
              [file data n]
              [data descriptor n]
              [archive decryption header]
              [archive extra data record]
              [central directory header 1]
              .
              .
              .
              [central directory header n]
              [zip64 end of central directory record]
              [zip64 end of central directory locator]
              [end of central directory record]
        */

        /**
         * 4.3.7  Local file header:
         *
         *     local file header signature     4 bytes  (0x04034b50)
         *     version needed to extract       2 bytes
         *     general purpose bit flag        2 bytes
         *     compression method              2 bytes
         *    last mod file time              2 bytes
         *    last mod file date              2 bytes
         *    crc-32                          4 bytes
         *    compressed size                 4 bytes
         *    uncompressed size               4 bytes
         *    file name length                2 bytes
         *    extra field length              2 bytes
         *
         *    file name (variable size)
         *    extra field (variable size)
         */


        var FileHeader = function FileHeader(data) {
          this.data = data;

          if (data.readUInt32LE(0) !== 0x04034b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Local file header has invalid signature: " + this.data.readUInt32LE(0));
          }
        };

        FileHeader.prototype.versionNeeded = function versionNeeded() {
          return this.data.readUInt16LE(4);
        };

        FileHeader.prototype.flags = function flags() {
          return this.data.readUInt16LE(6);
        };

        FileHeader.prototype.compressionMethod = function compressionMethod() {
          return this.data.readUInt16LE(8);
        };

        FileHeader.prototype.lastModFileTime = function lastModFileTime() {
          // Time and date is in MS-DOS format.
          return msdos2date(this.data.readUInt16LE(10), this.data.readUInt16LE(12));
        };

        FileHeader.prototype.rawLastModFileTime = function rawLastModFileTime() {
          return this.data.readUInt32LE(10);
        };

        FileHeader.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(14);
        };
        /**
         * These two values are COMPLETELY USELESS.
         *
         * Section 4.4.9:
         *If bit 3 of the general purpose bit flag is set,
         *these fields are set to zero in the local header and the
         *correct values are put in the data descriptor and
         *in the central directory.
         *
         * So we'll just use the central directory's values.
         */
        // public compressedSize(): number { return this.data.readUInt32LE(18); }
        // public uncompressedSize(): number { return this.data.readUInt32LE(22); }


        FileHeader.prototype.fileNameLength = function fileNameLength() {
          return this.data.readUInt16LE(26);
        };

        FileHeader.prototype.extraFieldLength = function extraFieldLength() {
          return this.data.readUInt16LE(28);
        };

        FileHeader.prototype.fileName = function fileName() {
          return safeToString(this.data, this.useUTF8(), 30, this.fileNameLength());
        };

        FileHeader.prototype.extraField = function extraField() {
          var start = 30 + this.fileNameLength();
          return this.data.slice(start, start + this.extraFieldLength());
        };

        FileHeader.prototype.totalSize = function totalSize() {
          return 30 + this.fileNameLength() + this.extraFieldLength();
        };

        FileHeader.prototype.useUTF8 = function useUTF8() {
          return (this.flags() & 0x800) === 0x800;
        };
        /**
         * 4.3.8  File data
         *
         *   Immediately following the local header for a file
         *   SHOULD be placed the compressed or stored data for the file.
         *   If the file is encrypted, the encryption header for the file
         *   SHOULD be placed after the local header and before the file
         *   data. The series of [local file header][encryption header]
         *   [file data][data descriptor] repeats for each file in the
         *   .ZIP archive.
         *
         *   Zero-byte files, directories, and other file types that
         *   contain no content MUST not include file data.
         */


        var FileData = function FileData(header, record, data) {
          this.header = header;
          this.record = record;
          this.data = data;
        };

        FileData.prototype.decompress = function decompress() {
          // Check the compression
          var compressionMethod = this.header.compressionMethod();
          var fcn = decompressionMethods[compressionMethod];

          if (fcn) {
            return fcn(this.data, this.record.compressedSize(), this.record.uncompressedSize(), this.record.flag());
          } else {
            var name = CompressionMethod[compressionMethod];

            if (!name) {
              name = "Unknown: " + compressionMethod;
            }

            throw new ApiError(ErrorCode.EINVAL, "Invalid compression method on file '" + this.header.fileName() + "': " + name);
          }
        };

        FileData.prototype.getHeader = function getHeader() {
          return this.header;
        };

        FileData.prototype.getRecord = function getRecord() {
          return this.record;
        };

        FileData.prototype.getRawData = function getRawData() {
          return this.data;
        };
        /**
         * 4.3.9  Data descriptor:
         *
         *    crc-32                          4 bytes
         *    compressed size                 4 bytes
         *    uncompressed size               4 bytes
         */


        var DataDescriptor = function DataDescriptor(data) {
          this.data = data;
        };

        DataDescriptor.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(0);
        };

        DataDescriptor.prototype.compressedSize = function compressedSize() {
          return this.data.readUInt32LE(4);
        };

        DataDescriptor.prototype.uncompressedSize = function uncompressedSize() {
          return this.data.readUInt32LE(8);
        };
        /*
        ` 4.3.10  Archive decryption header:
        
              4.3.10.1 The Archive Decryption Header is introduced in version 6.2
              of the ZIP format specification.  This record exists in support
              of the Central Directory Encryption Feature implemented as part of
              the Strong Encryption Specification as described in this document.
              When the Central Directory Structure is encrypted, this decryption
              header MUST precede the encrypted data segment.
         */

        /**
         * 4.3.11  Archive extra data record:
         *
         *      archive extra data signature    4 bytes  (0x08064b50)
         *      extra field length              4 bytes
         *      extra field data                (variable size)
         *
         *    4.3.11.1 The Archive Extra Data Record is introduced in version 6.2
         *    of the ZIP format specification.  This record MAY be used in support
         *    of the Central Directory Encryption Feature implemented as part of
         *    the Strong Encryption Specification as described in this document.
         *    When present, this record MUST immediately precede the central
         *    directory data structure.
         */


        var ArchiveExtraDataRecord = function ArchiveExtraDataRecord(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x08064b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid archive extra data record signature: " + this.data.readUInt32LE(0));
          }
        };

        ArchiveExtraDataRecord.prototype.length = function length() {
          return this.data.readUInt32LE(4);
        };

        ArchiveExtraDataRecord.prototype.extraFieldData = function extraFieldData() {
          return this.data.slice(8, 8 + this.length());
        };
        /**
         * 4.3.13 Digital signature:
         *
         *      header signature                4 bytes  (0x05054b50)
         *      size of data                    2 bytes
         *      signature data (variable size)
         *
         *    With the introduction of the Central Directory Encryption
         *    feature in version 6.2 of this specification, the Central
         *    Directory Structure MAY be stored both compressed and encrypted.
         *    Although not required, it is assumed when encrypting the
         *    Central Directory Structure, that it will be compressed
         *    for greater storage efficiency.  Information on the
         *    Central Directory Encryption feature can be found in the section
         *    describing the Strong Encryption Specification. The Digital
         *    Signature record will be neither compressed nor encrypted.
         */


        var DigitalSignature = function DigitalSignature(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x05054b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid digital signature signature: " + this.data.readUInt32LE(0));
          }
        };

        DigitalSignature.prototype.size = function size() {
          return this.data.readUInt16LE(4);
        };

        DigitalSignature.prototype.signatureData = function signatureData() {
          return this.data.slice(6, 6 + this.size());
        };
        /**
         * 4.3.12  Central directory structure:
         *
         *  central file header signature   4 bytes  (0x02014b50)
         *  version made by                 2 bytes
         *  version needed to extract       2 bytes
         *  general purpose bit flag        2 bytes
         *  compression method              2 bytes
         *  last mod file time              2 bytes
         *  last mod file date              2 bytes
         *  crc-32                          4 bytes
         *  compressed size                 4 bytes
         *  uncompressed size               4 bytes
         *  file name length                2 bytes
         *  extra field length              2 bytes
         *  file comment length             2 bytes
         *  disk number start               2 bytes
         *  internal file attributes        2 bytes
         *  external file attributes        4 bytes
         *  relative offset of local header 4 bytes
         *
         *  file name (variable size)
         *  extra field (variable size)
         *  file comment (variable size)
         */


        var CentralDirectory = function CentralDirectory(zipData, data) {
          this.zipData = zipData;
          this.data = data; // Sanity check.

          if (this.data.readUInt32LE(0) !== 0x02014b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: Central directory record has invalid signature: " + this.data.readUInt32LE(0));
          }

          this._filename = this.produceFilename();
        };

        CentralDirectory.prototype.versionMadeBy = function versionMadeBy() {
          return this.data.readUInt16LE(4);
        };

        CentralDirectory.prototype.versionNeeded = function versionNeeded() {
          return this.data.readUInt16LE(6);
        };

        CentralDirectory.prototype.flag = function flag() {
          return this.data.readUInt16LE(8);
        };

        CentralDirectory.prototype.compressionMethod = function compressionMethod() {
          return this.data.readUInt16LE(10);
        };

        CentralDirectory.prototype.lastModFileTime = function lastModFileTime() {
          // Time and date is in MS-DOS format.
          return msdos2date(this.data.readUInt16LE(12), this.data.readUInt16LE(14));
        };

        CentralDirectory.prototype.rawLastModFileTime = function rawLastModFileTime() {
          return this.data.readUInt32LE(12);
        };

        CentralDirectory.prototype.crc32 = function crc32() {
          return this.data.readUInt32LE(16);
        };

        CentralDirectory.prototype.compressedSize = function compressedSize() {
          return this.data.readUInt32LE(20);
        };

        CentralDirectory.prototype.uncompressedSize = function uncompressedSize() {
          return this.data.readUInt32LE(24);
        };

        CentralDirectory.prototype.fileNameLength = function fileNameLength() {
          return this.data.readUInt16LE(28);
        };

        CentralDirectory.prototype.extraFieldLength = function extraFieldLength() {
          return this.data.readUInt16LE(30);
        };

        CentralDirectory.prototype.fileCommentLength = function fileCommentLength() {
          return this.data.readUInt16LE(32);
        };

        CentralDirectory.prototype.diskNumberStart = function diskNumberStart() {
          return this.data.readUInt16LE(34);
        };

        CentralDirectory.prototype.internalAttributes = function internalAttributes() {
          return this.data.readUInt16LE(36);
        };

        CentralDirectory.prototype.externalAttributes = function externalAttributes() {
          return this.data.readUInt32LE(38);
        };

        CentralDirectory.prototype.headerRelativeOffset = function headerRelativeOffset() {
          return this.data.readUInt32LE(42);
        };

        CentralDirectory.prototype.produceFilename = function produceFilename() {
          /*
            4.4.17.1 claims:
            * All slashes are forward ('/') slashes.
            * Filename doesn't begin with a slash.
            * No drive letters or any nonsense like that.
            * If filename is missing, the input came from standard input.
          	       Unfortunately, this isn't true in practice. Some Windows zip utilities use
            a backslash here, but the correct Unix-style path in file headers.
          	       To avoid seeking all over the file to recover the known-good filenames
            from file headers, we simply convert '/' to '\' here.
          */
          var fileName = safeToString(this.data, this.useUTF8(), 46, this.fileNameLength());
          return fileName.replace(/\\/g, "/");
        };

        CentralDirectory.prototype.fileName = function fileName() {
          return this._filename;
        };

        CentralDirectory.prototype.rawFileName = function rawFileName() {
          return this.data.slice(46, 46 + this.fileNameLength());
        };

        CentralDirectory.prototype.extraField = function extraField() {
          var start = 44 + this.fileNameLength();
          return this.data.slice(start, start + this.extraFieldLength());
        };

        CentralDirectory.prototype.fileComment = function fileComment() {
          var start = 46 + this.fileNameLength() + this.extraFieldLength();
          return safeToString(this.data, this.useUTF8(), start, this.fileCommentLength());
        };

        CentralDirectory.prototype.rawFileComment = function rawFileComment() {
          var start = 46 + this.fileNameLength() + this.extraFieldLength();
          return this.data.slice(start, start + this.fileCommentLength());
        };

        CentralDirectory.prototype.totalSize = function totalSize() {
          return 46 + this.fileNameLength() + this.extraFieldLength() + this.fileCommentLength();
        };

        CentralDirectory.prototype.isDirectory = function isDirectory() {
          // NOTE: This assumes that the zip file implementation uses the lower byte
          //    of external attributes for DOS attributes for
          //    backwards-compatibility. This is not mandated, but appears to be
          //    commonplace.
          //    According to the spec, the layout of external attributes is
          //    platform-dependent.
          //    If that fails, we also check if the name of the file ends in '/',
          //    which is what Java's ZipFile implementation does.
          var fileName = this.fileName();
          return (this.externalAttributes() & 0x10 ? true : false) || fileName.charAt(fileName.length - 1) === '/';
        };

        CentralDirectory.prototype.isFile = function isFile() {
          return !this.isDirectory();
        };

        CentralDirectory.prototype.useUTF8 = function useUTF8() {
          return (this.flag() & 0x800) === 0x800;
        };

        CentralDirectory.prototype.isEncrypted = function isEncrypted() {
          return (this.flag() & 0x1) === 0x1;
        };

        CentralDirectory.prototype.getFileData = function getFileData() {
          // Need to grab the header before we can figure out where the actual
          // compressed data starts.
          var start = this.headerRelativeOffset();
          var header = new FileHeader(this.zipData.slice(start));
          return new FileData(header, this, this.zipData.slice(start + header.totalSize()));
        };

        CentralDirectory.prototype.getData = function getData() {
          return this.getFileData().decompress();
        };

        CentralDirectory.prototype.getRawData = function getRawData() {
          return this.getFileData().getRawData();
        };

        CentralDirectory.prototype.getStats = function getStats() {
          return new Stats(FileType.FILE, this.uncompressedSize(), 0x16D, new Date(), this.lastModFileTime());
        };
        /**
         * 4.3.16: end of central directory record
         *  end of central dir signature    4 bytes  (0x06054b50)
         *  number of this disk             2 bytes
         *  number of the disk with the
         *  start of the central directory  2 bytes
         *  total number of entries in the
         *  central directory on this disk  2 bytes
         *  total number of entries in
         *  the central directory           2 bytes
         *  size of the central directory   4 bytes
         *  offset of start of central
         *  directory with respect to
         *  the starting disk number        4 bytes
         *  .ZIP file comment length        2 bytes
         *  .ZIP file comment       (variable size)
         */


        var EndOfCentralDirectory = function EndOfCentralDirectory(data) {
          this.data = data;

          if (this.data.readUInt32LE(0) !== 0x06054b50) {
            throw new ApiError(ErrorCode.EINVAL, "Invalid Zip file: End of central directory record has invalid signature: " + this.data.readUInt32LE(0));
          }
        };

        EndOfCentralDirectory.prototype.diskNumber = function diskNumber() {
          return this.data.readUInt16LE(4);
        };

        EndOfCentralDirectory.prototype.cdDiskNumber = function cdDiskNumber() {
          return this.data.readUInt16LE(6);
        };

        EndOfCentralDirectory.prototype.cdDiskEntryCount = function cdDiskEntryCount() {
          return this.data.readUInt16LE(8);
        };

        EndOfCentralDirectory.prototype.cdTotalEntryCount = function cdTotalEntryCount() {
          return this.data.readUInt16LE(10);
        };

        EndOfCentralDirectory.prototype.cdSize = function cdSize() {
          return this.data.readUInt32LE(12);
        };

        EndOfCentralDirectory.prototype.cdOffset = function cdOffset() {
          return this.data.readUInt32LE(16);
        };

        EndOfCentralDirectory.prototype.cdZipCommentLength = function cdZipCommentLength() {
          return this.data.readUInt16LE(20);
        };

        EndOfCentralDirectory.prototype.cdZipComment = function cdZipComment() {
          // Assuming UTF-8. The specification doesn't specify.
          return safeToString(this.data, true, 22, this.cdZipCommentLength());
        };

        EndOfCentralDirectory.prototype.rawCdZipComment = function rawCdZipComment() {
          return this.data.slice(22, 22 + this.cdZipCommentLength());
        };
        /**
         * Contains the table of contents of a Zip file.
         */


        var ZipTOC = function ZipTOC(index, directoryEntries, eocd, data) {
          this.index = index;
          this.directoryEntries = directoryEntries;
          this.eocd = eocd;
          this.data = data;
        };
        /**
         * Zip file-backed filesystem
         * Implemented according to the standard:
         * http://www.pkware.com/documents/casestudies/APPNOTE.TXT
         *
         * While there are a few zip libraries for JavaScript (e.g. JSZip and zip.js),
         * they are not a good match for BrowserFS. In particular, these libraries
         * perform a lot of unneeded data copying, and eagerly decompress every file
         * in the zip file upon loading to check the CRC32. They also eagerly decode
         * strings. Furthermore, these libraries duplicate functionality already present
         * in BrowserFS (e.g. UTF-8 decoding and binary data manipulation).
         *
         * This filesystem takes advantage of BrowserFS's Buffer implementation, which
         * efficiently represents the zip file in memory (in both ArrayBuffer-enabled
         * browsers *and* non-ArrayBuffer browsers), and which can neatly be 'sliced'
         * without copying data. Each struct defined in the standard is represented with
         * a buffer slice pointing to an offset in the zip file, and has getters for
         * each field. As we anticipate that this data will not be read often, we choose
         * not to store each struct field in the JavaScript object; instead, to reduce
         * memory consumption, we retrieve it directly from the binary data each time it
         * is requested.
         *
         * When the filesystem is instantiated, we determine the directory structure
         * of the zip file as quickly as possible. We lazily decompress and check the
         * CRC32 of files. We do not cache decompressed files; if this is a desired
         * feature, it is best implemented as a generic file system wrapper that can
         * cache data from arbitrary file systems.
         *
         * For inflation, we use `pako`'s implementation:
         * https://github.com/nodeca/pako
         *
         * Current limitations:
         * * No encryption.
         * * No ZIP64 support.
         * * Read-only.
         *   Write support would require that we:
         *   - Keep track of changed/new files.
         *   - Compress changed files, and generate appropriate metadata for each.
         *   - Update file offsets for other files in the zip file.
         *   - Stream it out to a location.
         *   This isn't that bad, so we might do this at a later date.
         */


        var ZipFS = function (SynchronousFileSystem$$1) {
          function ZipFS(input, name, deprecateMsg) {
            if (name === void 0) name = '';
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            this.name = name;
            this._index = new FileIndex();
            this._directoryEntries = [];
            this._eocd = null;
            deprecationMessage(deprecateMsg, ZipFS.Name, {
              zipData: "zip data as a Buffer",
              name: name
            });

            if (input instanceof ZipTOC) {
              this._index = input.index;
              this._directoryEntries = input.directoryEntries;
              this._eocd = input.eocd;
              this.data = input.data;
            } else {
              this.data = input;
              this.populateIndex();
            }
          }

          if (SynchronousFileSystem$$1) ZipFS.__proto__ = SynchronousFileSystem$$1;
          ZipFS.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          ZipFS.prototype.constructor = ZipFS;
          /**
           * Constructs a ZipFS instance with the given options.
           */

          ZipFS.Create = function Create(opts, cb) {
            try {
              ZipFS.computeIndex(opts.zipData, function (zipTOC) {
                var fs = new ZipFS(zipTOC, opts.name, false);
                cb(null, fs);
              }, false);
            } catch (e) {
              cb(e);
            }
          };

          ZipFS.isAvailable = function isAvailable() {
            return true;
          };

          ZipFS.RegisterDecompressionMethod = function RegisterDecompressionMethod(m, fcn) {
            decompressionMethods[m] = fcn;
          };
          /**
           * **Deprecated. Please use ZipFS.Create() method instead.**
           */


          ZipFS.computeIndex = function computeIndex(data, cb, deprecateMsg) {
            if (deprecateMsg === void 0) deprecateMsg = true; // TODO: Refactor to plumb errors through. Right now, they throw.

            if (deprecateMsg) {
              console.warn("[ZipFS] ZipFS.computeIndex is now deprecated, and will be removed in the next major release. Please update your code to use 'ZipFS.Create({ zipData: zip file as a Buffer}, cb)' instead.");
            }

            var index = new FileIndex();
            var eocd = ZipFS.getEOCD(data);

            if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
            }

            var cdPtr = eocd.cdOffset();

            if (cdPtr === 0xFFFFFFFF) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
            }

            var cdEnd = cdPtr + eocd.cdSize();
            ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, [], eocd);
          };
          /**
           * Locates the end of central directory record at the end of the file.
           * Throws an exception if it cannot be found.
           */


          ZipFS.getEOCD = function getEOCD(data) {
            // Unfortunately, the comment is variable size and up to 64K in size.
            // We assume that the magic signature does not appear in the comment, and
            // in the bytes between the comment and the signature. Other ZIP
            // implementations make this same assumption, since the alternative is to
            // read thread every entry in the file to get to it. :(
            // These are *negative* offsets from the end of the file.
            var startOffset = 22;
            var endOffset = Math.min(startOffset + 0xFFFF, data.length - 1); // There's not even a byte alignment guarantee on the comment so we need to
            // search byte by byte. *grumble grumble*

            for (var i = startOffset; i < endOffset; i++) {
              // Magic number: EOCD Signature
              if (data.readUInt32LE(data.length - i) === 0x06054b50) {
                return new EndOfCentralDirectory(data.slice(data.length - i));
              }
            }

            throw new ApiError(ErrorCode.EINVAL, "Invalid ZIP file: Could not locate End of Central Directory signature.");
          };

          ZipFS.addToIndex = function addToIndex(cd, index) {
            // Paths must be absolute, yet zip file paths are always relative to the
            // zip root. So we append '/' and call it a day.
            var filename = cd.fileName();

            if (filename.charAt(0) === '/') {
              throw new Error("WHY IS THIS ABSOLUTE");
            } // XXX: For the file index, strip the trailing '/'.


            if (filename.charAt(filename.length - 1) === '/') {
              filename = filename.substr(0, filename.length - 1);
            }

            if (cd.isDirectory()) {
              index.addPathFast('/' + filename, new DirInode(cd));
            } else {
              index.addPathFast('/' + filename, new FileInode(cd));
            }
          };

          ZipFS.computeIndexResponsive = function computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd) {
            if (cdPtr < cdEnd) {
              var count = 0;

              while (count++ < 200 && cdPtr < cdEnd) {
                var cd = new CentralDirectory(data, data.slice(cdPtr));
                ZipFS.addToIndex(cd, index);
                cdPtr += cd.totalSize();
                cdEntries.push(cd);
              }

              setImmediate$3(function () {
                ZipFS.computeIndexResponsive(data, index, cdPtr, cdEnd, cb, cdEntries, eocd);
              });
            } else {
              cb(new ZipTOC(index, cdEntries, eocd, data));
            }
          };

          ZipFS.prototype.getName = function getName() {
            return ZipFS.Name + (this.name !== '' ? " " + this.name : '');
          };
          /**
           * Get the CentralDirectory object for the given path.
           */


          ZipFS.prototype.getCentralDirectoryEntry = function getCentralDirectoryEntry(path$$1) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            if (isFileInode(inode)) {
              return inode.getData();
            } else if (isDirInode(inode)) {
              return inode.getData();
            } else {
              // Should never occur.
              throw ApiError.EPERM("Invalid inode: " + inode);
            }
          };

          ZipFS.prototype.getCentralDirectoryEntryAt = function getCentralDirectoryEntryAt(index) {
            var dirEntry = this._directoryEntries[index];

            if (!dirEntry) {
              throw new RangeError("Invalid directory index: " + index + ".");
            }

            return dirEntry;
          };

          ZipFS.prototype.getNumberOfCentralDirectoryEntries = function getNumberOfCentralDirectoryEntries() {
            return this._directoryEntries.length;
          };

          ZipFS.prototype.getEndOfCentralDirectory = function getEndOfCentralDirectory() {
            return this._eocd;
          };

          ZipFS.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system.
            cb(this.data.length, 0);
          };

          ZipFS.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          ZipFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          ZipFS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          ZipFS.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          ZipFS.prototype.statSync = function statSync(path$$1, isLstat) {
            var inode = this._index.getInode(path$$1);

            if (inode === null) {
              throw ApiError.ENOENT(path$$1);
            }

            var stats;

            if (isFileInode(inode)) {
              stats = inode.getData().getStats();
            } else if (isDirInode(inode)) {
              stats = inode.getStats();
            } else {
              throw new ApiError(ErrorCode.EINVAL, "Invalid inode.");
            }

            return stats;
          };

          ZipFS.prototype.openSync = function openSync(path$$1, flags, mode) {
            // INVARIANT: Cannot write to RO file systems.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, path$$1);
            } // Check if the path exists, and is a file.


            var inode = this._index.getInode(path$$1);

            if (!inode) {
              throw ApiError.ENOENT(path$$1);
            } else if (isFileInode(inode)) {
              var cdRecord = inode.getData();
              var stats = cdRecord.getStats();

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(path$$1);

                case ActionType.NOP:
                  return new NoSyncFile(this, path$$1, flags, stats, cdRecord.getData());

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(path$$1);
            }
          };

          ZipFS.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var inode = this._index.getInode(path$$1);

            if (!inode) {
              throw ApiError.ENOENT(path$$1);
            } else if (isDirInode(inode)) {
              return inode.getListing();
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * Specially-optimized readfile.
           */


          ZipFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          ZipFS.prototype.populateIndex = function populateIndex() {
            var this$1 = this;
            var eocd = this._eocd = ZipFS.getEOCD(this.data);

            if (eocd.diskNumber() !== eocd.cdDiskNumber()) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support spanned zip files.");
            }

            var cdPtr = eocd.cdOffset();

            if (cdPtr === 0xFFFFFFFF) {
              throw new ApiError(ErrorCode.EINVAL, "ZipFS does not support Zip64.");
            }

            var cdEnd = cdPtr + eocd.cdSize();

            while (cdPtr < cdEnd) {
              var cd = new CentralDirectory(this$1.data, this$1.data.slice(cdPtr));
              cdPtr += cd.totalSize();
              ZipFS.addToIndex(cd, this$1._index);

              this$1._directoryEntries.push(cd);
            }
          };

          return ZipFS;
        }(SynchronousFileSystem);

        ZipFS.Name = "ZipFS";
        ZipFS.Options = {
          zipData: {
            type: "object",
            description: "The zip file as a Buffer object.",
            validator: bufferValidator
          },
          name: {
            type: "string",
            optional: true,
            description: "The name of the zip file (optional)."
          }
        };
        ZipFS.CompressionMethod = CompressionMethod;
        ZipFS.RegisterDecompressionMethod(CompressionMethod.DEFLATE, function (data, compressedSize, uncompressedSize) {
          return arrayish2Buffer(inflateRaw(data.slice(0, compressedSize), {
            chunkSize: uncompressedSize
          }));
        });
        ZipFS.RegisterDecompressionMethod(CompressionMethod.STORED, function (data, compressedSize, uncompressedSize) {
          return copyingSlice(data, 0, uncompressedSize);
        });
        /**
         * @hidden
         */

        var rockRidgeIdentifier = "IEEE_P1282";
        /**
         * @hidden
         */

        function getASCIIString(data, startIndex, length) {
          return data.toString('ascii', startIndex, startIndex + length).trim();
        }
        /**
         * @hidden
         */


        function getJolietString(data, startIndex, length) {
          if (length === 1) {
            // Special: Root, parent, current directory are still a single byte.
            return String.fromCharCode(data[startIndex]);
          } // UTF16-BE, which isn't natively supported by NodeJS Buffers.
          // Length should be even, but pessimistically floor just in case.


          var pairs = Math.floor(length / 2);
          var chars = new Array(pairs);

          for (var i = 0; i < pairs; i++) {
            var pos = startIndex + (i << 1);
            chars[i] = String.fromCharCode(data[pos + 1] | data[pos] << 8);
          }

          return chars.join('');
        }
        /**
         * @hidden
         */


        function getDate(data, startIndex) {
          var year = parseInt(getASCIIString(data, startIndex, 4), 10);
          var mon = parseInt(getASCIIString(data, startIndex + 4, 2), 10);
          var day = parseInt(getASCIIString(data, startIndex + 6, 2), 10);
          var hour = parseInt(getASCIIString(data, startIndex + 8, 2), 10);
          var min = parseInt(getASCIIString(data, startIndex + 10, 2), 10);
          var sec = parseInt(getASCIIString(data, startIndex + 12, 2), 10);
          var hundrethsSec = parseInt(getASCIIString(data, startIndex + 14, 2), 10); // Last is a time-zone offset, but JavaScript dates don't support time zones well.

          return new Date(year, mon, day, hour, min, sec, hundrethsSec * 100);
        }
        /**
         * @hidden
         */


        function getShortFormDate(data, startIndex) {
          var yearsSince1900 = data[startIndex];
          var month = data[startIndex + 1];
          var day = data[startIndex + 2];
          var hour = data[startIndex + 3];
          var minute = data[startIndex + 4];
          var second = data[startIndex + 5]; // JavaScript's Date support isn't so great; ignore timezone.
          // const offsetFromGMT = this._data[24];

          return new Date(yearsSince1900, month - 1, day, hour, minute, second);
        }
        /**
         * @hidden
         */


        function constructSystemUseEntry(bigData, i) {
          var data = bigData.slice(i);
          var sue = new SystemUseEntry(data);

          switch (sue.signatureWord()) {
            case 17221
            /* CE */
            :
              return new CEEntry(data);

            case 20548
            /* PD */
            :
              return new PDEntry(data);

            case 21328
            /* SP */
            :
              return new SPEntry(data);

            case 21332
            /* ST */
            :
              return new STEntry(data);

            case 17746
            /* ER */
            :
              return new EREntry(data);

            case 17747
            /* ES */
            :
              return new ESEntry(data);

            case 20568
            /* PX */
            :
              return new PXEntry(data);

            case 20558
            /* PN */
            :
              return new PNEntry(data);

            case 21324
            /* SL */
            :
              return new SLEntry(data);

            case 20045
            /* NM */
            :
              return new NMEntry(data);

            case 17228
            /* CL */
            :
              return new CLEntry(data);

            case 20556
            /* PL */
            :
              return new PLEntry(data);

            case 21061
            /* RE */
            :
              return new REEntry(data);

            case 21574
            /* TF */
            :
              return new TFEntry(data);

            case 21318
            /* SF */
            :
              return new SFEntry(data);

            case 21074
            /* RR */
            :
              return new RREntry(data);

            default:
              return sue;
          }
        }
        /**
         * @hidden
         */


        function constructSystemUseEntries(data, i, len, isoData) {
          // If the remaining allocated space following the last recorded System Use Entry in a System
          // Use field or Continuation Area is less than four bytes long, it cannot contain a System
          // Use Entry and shall be ignored
          len = len - 4;
          var entries = new Array();

          while (i < len) {
            var entry = constructSystemUseEntry(data, i);
            var length = entry.length();

            if (length === 0) {
              // Invalid SU section; prevent infinite loop.
              return entries;
            }

            i += length;

            if (entry instanceof STEntry) {
              // ST indicates the end of entries.
              break;
            }

            if (entry instanceof CEEntry) {
              entries = entries.concat(entry.getEntries(isoData));
            } else {
              entries.push(entry);
            }
          }

          return entries;
        }
        /**
         * @hidden
         */


        var VolumeDescriptor = function VolumeDescriptor(data) {
          this._data = data;
        };

        VolumeDescriptor.prototype.type = function type() {
          return this._data[0];
        };

        VolumeDescriptor.prototype.standardIdentifier = function standardIdentifier() {
          return getASCIIString(this._data, 1, 5);
        };

        VolumeDescriptor.prototype.version = function version() {
          return this._data[6];
        };

        VolumeDescriptor.prototype.data = function data() {
          return this._data.slice(7, 2048);
        };
        /**
         * @hidden
         */


        var PrimaryOrSupplementaryVolumeDescriptor = function (VolumeDescriptor) {
          function PrimaryOrSupplementaryVolumeDescriptor(data) {
            VolumeDescriptor.call(this, data);
            this._root = null;
          }

          if (VolumeDescriptor) PrimaryOrSupplementaryVolumeDescriptor.__proto__ = VolumeDescriptor;
          PrimaryOrSupplementaryVolumeDescriptor.prototype = Object.create(VolumeDescriptor && VolumeDescriptor.prototype);
          PrimaryOrSupplementaryVolumeDescriptor.prototype.constructor = PrimaryOrSupplementaryVolumeDescriptor;

          PrimaryOrSupplementaryVolumeDescriptor.prototype.systemIdentifier = function systemIdentifier() {
            return this._getString32(8);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeIdentifier = function volumeIdentifier() {
            return this._getString32(40);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSpaceSize = function volumeSpaceSize() {
            return this._data.readUInt32LE(80);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetSize = function volumeSetSize() {
            return this._data.readUInt16LE(120);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
            return this._data.readUInt16LE(124);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.logicalBlockSize = function logicalBlockSize() {
            return this._data.readUInt16LE(128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.pathTableSize = function pathTableSize() {
            return this._data.readUInt32LE(132);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeLPathTable = function locationOfTypeLPathTable() {
            return this._data.readUInt32LE(140);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeLPathTable = function locationOfOptionalTypeLPathTable() {
            return this._data.readUInt32LE(144);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfTypeMPathTable = function locationOfTypeMPathTable() {
            return this._data.readUInt32BE(148);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.locationOfOptionalTypeMPathTable = function locationOfOptionalTypeMPathTable() {
            return this._data.readUInt32BE(152);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.rootDirectoryEntry = function rootDirectoryEntry(isoData) {
            if (this._root === null) {
              this._root = this._constructRootDirectoryRecord(this._data.slice(156));

              this._root.rootCheckForRockRidge(isoData);
            }

            return this._root;
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeSetIdentifier = function volumeSetIdentifier() {
            return this._getString(190, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.publisherIdentifier = function publisherIdentifier() {
            return this._getString(318, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.dataPreparerIdentifier = function dataPreparerIdentifier() {
            return this._getString(446, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationIdentifier = function applicationIdentifier() {
            return this._getString(574, 128);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.copyrightFileIdentifier = function copyrightFileIdentifier() {
            return this._getString(702, 38);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.abstractFileIdentifier = function abstractFileIdentifier() {
            return this._getString(740, 36);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.bibliographicFileIdentifier = function bibliographicFileIdentifier() {
            return this._getString(776, 37);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeCreationDate = function volumeCreationDate() {
            return getDate(this._data, 813);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeModificationDate = function volumeModificationDate() {
            return getDate(this._data, 830);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeExpirationDate = function volumeExpirationDate() {
            return getDate(this._data, 847);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.volumeEffectiveDate = function volumeEffectiveDate() {
            return getDate(this._data, 864);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.fileStructureVersion = function fileStructureVersion() {
            return this._data[881];
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.applicationUsed = function applicationUsed() {
            return this._data.slice(883, 883 + 512);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype.reserved = function reserved() {
            return this._data.slice(1395, 1395 + 653);
          };

          PrimaryOrSupplementaryVolumeDescriptor.prototype._getString32 = function _getString32(idx) {
            return this._getString(idx, 32);
          };

          return PrimaryOrSupplementaryVolumeDescriptor;
        }(VolumeDescriptor);
        /**
         * @hidden
         */


        var PrimaryVolumeDescriptor = function (PrimaryOrSupplementaryVolumeDescriptor) {
          function PrimaryVolumeDescriptor(data) {
            PrimaryOrSupplementaryVolumeDescriptor.call(this, data);

            if (this.type() !== 1
            /* PrimaryVolumeDescriptor */
            ) {
                throw new ApiError(ErrorCode.EIO, "Invalid primary volume descriptor.");
              }
          }

          if (PrimaryOrSupplementaryVolumeDescriptor) PrimaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
          PrimaryVolumeDescriptor.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype);
          PrimaryVolumeDescriptor.prototype.constructor = PrimaryVolumeDescriptor;

          PrimaryVolumeDescriptor.prototype.name = function name() {
            return "ISO9660";
          };

          PrimaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
            return new ISODirectoryRecord(data, -1);
          };

          PrimaryVolumeDescriptor.prototype._getString = function _getString(idx, len) {
            return this._getString(idx, len);
          };

          return PrimaryVolumeDescriptor;
        }(PrimaryOrSupplementaryVolumeDescriptor);
        /**
         * @hidden
         */


        var SupplementaryVolumeDescriptor = function (PrimaryOrSupplementaryVolumeDescriptor) {
          function SupplementaryVolumeDescriptor(data) {
            PrimaryOrSupplementaryVolumeDescriptor.call(this, data);

            if (this.type() !== 2
            /* SupplementaryVolumeDescriptor */
            ) {
                throw new ApiError(ErrorCode.EIO, "Invalid supplementary volume descriptor.");
              }

            var escapeSequence = this.escapeSequence();
            var third = escapeSequence[2]; // Third character identifies what 'level' of the UCS specification to follow.
            // We ignore it.

            if (escapeSequence[0] !== 0x25 || escapeSequence[1] !== 0x2F || third !== 0x40 && third !== 0x43 && third !== 0x45) {
              throw new ApiError(ErrorCode.EIO, "Unrecognized escape sequence for SupplementaryVolumeDescriptor: " + escapeSequence.toString());
            }
          }

          if (PrimaryOrSupplementaryVolumeDescriptor) SupplementaryVolumeDescriptor.__proto__ = PrimaryOrSupplementaryVolumeDescriptor;
          SupplementaryVolumeDescriptor.prototype = Object.create(PrimaryOrSupplementaryVolumeDescriptor && PrimaryOrSupplementaryVolumeDescriptor.prototype);
          SupplementaryVolumeDescriptor.prototype.constructor = SupplementaryVolumeDescriptor;

          SupplementaryVolumeDescriptor.prototype.name = function name() {
            return "Joliet";
          };

          SupplementaryVolumeDescriptor.prototype.escapeSequence = function escapeSequence() {
            return this._data.slice(88, 120);
          };

          SupplementaryVolumeDescriptor.prototype._constructRootDirectoryRecord = function _constructRootDirectoryRecord(data) {
            return new JolietDirectoryRecord(data, -1);
          };

          SupplementaryVolumeDescriptor.prototype._getString = function _getString(idx, len) {
            return getJolietString(this._data, idx, len);
          };

          return SupplementaryVolumeDescriptor;
        }(PrimaryOrSupplementaryVolumeDescriptor);
        /**
         * @hidden
         */


        var DirectoryRecord = function DirectoryRecord(data, rockRidgeOffset) {
          this._suEntries = null;
          this._fileOrDir = null;
          this._data = data;
          this._rockRidgeOffset = rockRidgeOffset;
        };

        DirectoryRecord.prototype.hasRockRidge = function hasRockRidge() {
          return this._rockRidgeOffset > -1;
        };

        DirectoryRecord.prototype.getRockRidgeOffset = function getRockRidgeOffset() {
          return this._rockRidgeOffset;
        };
        /**
         * !!ONLY VALID ON ROOT NODE!!
         * Checks if Rock Ridge is enabled, and sets the offset.
         */


        DirectoryRecord.prototype.rootCheckForRockRidge = function rootCheckForRockRidge(isoData) {
          var dir = this.getDirectory(isoData);
          this._rockRidgeOffset = dir.getDotEntry(isoData)._getRockRidgeOffset(isoData);

          if (this._rockRidgeOffset > -1) {
            // Wipe out directory. Start over with RR knowledge.
            this._fileOrDir = null;
          }
        };

        DirectoryRecord.prototype.length = function length() {
          return this._data[0];
        };

        DirectoryRecord.prototype.extendedAttributeRecordLength = function extendedAttributeRecordLength() {
          return this._data[1];
        };

        DirectoryRecord.prototype.lba = function lba() {
          return this._data.readUInt32LE(2) * 2048;
        };

        DirectoryRecord.prototype.dataLength = function dataLength() {
          return this._data.readUInt32LE(10);
        };

        DirectoryRecord.prototype.recordingDate = function recordingDate() {
          return getShortFormDate(this._data, 18);
        };

        DirectoryRecord.prototype.fileFlags = function fileFlags() {
          return this._data[25];
        };

        DirectoryRecord.prototype.fileUnitSize = function fileUnitSize() {
          return this._data[26];
        };

        DirectoryRecord.prototype.interleaveGapSize = function interleaveGapSize() {
          return this._data[27];
        };

        DirectoryRecord.prototype.volumeSequenceNumber = function volumeSequenceNumber() {
          return this._data.readUInt16LE(28);
        };

        DirectoryRecord.prototype.identifier = function identifier() {
          return this._getString(33, this._data[32]);
        };

        DirectoryRecord.prototype.fileName = function fileName(isoData) {
          if (this.hasRockRidge()) {
            var fn = this._rockRidgeFilename(isoData);

            if (fn !== null) {
              return fn;
            }
          }

          var ident = this.identifier();

          if (this.isDirectory(isoData)) {
            return ident;
          } // Files:
          // - MUST have 0x2E (.) separating the name from the extension
          // - MUST have 0x3B (;) separating the file name and extension from the version
          // Gets expanded to two-byte char in Unicode directory records.


          var versionSeparator = ident.indexOf(';');

          if (versionSeparator === -1) {
            // Some Joliet filenames lack the version separator, despite the standard
            // specifying that it should be there.
            return ident;
          } else if (ident[versionSeparator - 1] === '.') {
            // Empty extension. Do not include '.' in the filename.
            return ident.slice(0, versionSeparator - 1);
          } else {
            // Include up to version separator.
            return ident.slice(0, versionSeparator);
          }
        };

        DirectoryRecord.prototype.isDirectory = function isDirectory(isoData) {
          var rv = !!(this.fileFlags() & 2
          /* Directory */
          ); // If it lacks the Directory flag, it may still be a directory if we've exceeded the directory
          // depth limit. Rock Ridge marks these as files and adds a special attribute.

          if (!rv && this.hasRockRidge()) {
            rv = this.getSUEntries(isoData).filter(function (e) {
              return e instanceof CLEntry;
            }).length > 0;
          }

          return rv;
        };

        DirectoryRecord.prototype.isSymlink = function isSymlink(isoData) {
          return this.hasRockRidge() && this.getSUEntries(isoData).filter(function (e) {
            return e instanceof SLEntry;
          }).length > 0;
        };

        DirectoryRecord.prototype.getSymlinkPath = function getSymlinkPath(isoData) {
          var p = "";
          var entries = this.getSUEntries(isoData);

          var getStr = this._getGetString();

          for (var i = 0, list = entries; i < list.length; i += 1) {
            var entry = list[i];

            if (entry instanceof SLEntry) {
              var components = entry.componentRecords();

              for (var i$1 = 0, list$1 = components; i$1 < list$1.length; i$1 += 1) {
                var component = list$1[i$1];
                var flags = component.flags();

                if (flags & 2
                /* CURRENT */
                ) {
                    p += "./";
                  } else if (flags & 4
                /* PARENT */
                ) {
                    p += "../";
                  } else if (flags & 8
                /* ROOT */
                ) {
                    p += "/";
                  } else {
                  p += component.content(getStr);

                  if (!(flags & 1
                  /* CONTINUE */
                  )) {
                    p += '/';
                  }
                }
              }

              if (!entry.continueFlag()) {
                // We are done with this link.
                break;
              }
            }
          }

          if (p.length > 1 && p[p.length - 1] === '/') {
            // Trim trailing '/'.
            return p.slice(0, p.length - 1);
          } else {
            return p;
          }
        };

        DirectoryRecord.prototype.getFile = function getFile(isoData) {
          if (this.isDirectory(isoData)) {
            throw new Error("Tried to get a File from a directory.");
          }

          if (this._fileOrDir === null) {
            this._fileOrDir = isoData.slice(this.lba(), this.lba() + this.dataLength());
          }

          return this._fileOrDir;
        };

        DirectoryRecord.prototype.getDirectory = function getDirectory(isoData) {
          if (!this.isDirectory(isoData)) {
            throw new Error("Tried to get a Directory from a file.");
          }

          if (this._fileOrDir === null) {
            this._fileOrDir = this._constructDirectory(isoData);
          }

          return this._fileOrDir;
        };

        DirectoryRecord.prototype.getSUEntries = function getSUEntries(isoData) {
          if (!this._suEntries) {
            this._constructSUEntries(isoData);
          }

          return this._suEntries;
        };

        DirectoryRecord.prototype._rockRidgeFilename = function _rockRidgeFilename(isoData) {
          var nmEntries = this.getSUEntries(isoData).filter(function (e) {
            return e instanceof NMEntry;
          });

          if (nmEntries.length === 0 || nmEntries[0].flags() & (2
          /* CURRENT */
          | 4
          /* PARENT */
          )) {
            return null;
          }

          var str = '';

          var getString = this._getGetString();

          for (var i = 0, list = nmEntries; i < list.length; i += 1) {
            var e = list[i];
            str += e.name(getString);

            if (!(e.flags() & 1
            /* CONTINUE */
            )) {
              break;
            }
          }

          return str;
        };

        DirectoryRecord.prototype._constructSUEntries = function _constructSUEntries(isoData) {
          var i = 33 + this._data[32];

          if (i % 2 === 1) {
            // Skip padding field.
            i++;
          }

          i += this._rockRidgeOffset;
          this._suEntries = constructSystemUseEntries(this._data, i, this.length(), isoData);
        };
        /**
         * !!ONLY VALID ON FIRST ENTRY OF ROOT DIRECTORY!!
         * Returns -1 if rock ridge is not enabled. Otherwise, returns the offset
         * at which system use fields begin.
         */


        DirectoryRecord.prototype._getRockRidgeOffset = function _getRockRidgeOffset(isoData) {
          // In the worst case, we get some garbage SU entries.
          // Fudge offset to 0 before proceeding.
          this._rockRidgeOffset = 0;
          var suEntries = this.getSUEntries(isoData);

          if (suEntries.length > 0) {
            var spEntry = suEntries[0];

            if (spEntry instanceof SPEntry && spEntry.checkBytesPass()) {
              // SUSP is in use.
              for (var i = 1; i < suEntries.length; i++) {
                var entry = suEntries[i];

                if (entry instanceof RREntry || entry instanceof EREntry && entry.extensionIdentifier() === rockRidgeIdentifier) {
                  // Rock Ridge is in use!
                  return spEntry.bytesSkipped();
                }
              }
            }
          } // Failed.


          this._rockRidgeOffset = -1;
          return -1;
        };
        /**
         * @hidden
         */


        var ISODirectoryRecord = function (DirectoryRecord) {
          function ISODirectoryRecord(data, rockRidgeOffset) {
            DirectoryRecord.call(this, data, rockRidgeOffset);
          }

          if (DirectoryRecord) ISODirectoryRecord.__proto__ = DirectoryRecord;
          ISODirectoryRecord.prototype = Object.create(DirectoryRecord && DirectoryRecord.prototype);
          ISODirectoryRecord.prototype.constructor = ISODirectoryRecord;

          ISODirectoryRecord.prototype._getString = function _getString(i, len) {
            return getASCIIString(this._data, i, len);
          };

          ISODirectoryRecord.prototype._constructDirectory = function _constructDirectory(isoData) {
            return new ISODirectory(this, isoData);
          };

          ISODirectoryRecord.prototype._getGetString = function _getGetString() {
            return getASCIIString;
          };

          return ISODirectoryRecord;
        }(DirectoryRecord);
        /**
         * @hidden
         */


        var JolietDirectoryRecord = function (DirectoryRecord) {
          function JolietDirectoryRecord(data, rockRidgeOffset) {
            DirectoryRecord.call(this, data, rockRidgeOffset);
          }

          if (DirectoryRecord) JolietDirectoryRecord.__proto__ = DirectoryRecord;
          JolietDirectoryRecord.prototype = Object.create(DirectoryRecord && DirectoryRecord.prototype);
          JolietDirectoryRecord.prototype.constructor = JolietDirectoryRecord;

          JolietDirectoryRecord.prototype._getString = function _getString(i, len) {
            return getJolietString(this._data, i, len);
          };

          JolietDirectoryRecord.prototype._constructDirectory = function _constructDirectory(isoData) {
            return new JolietDirectory(this, isoData);
          };

          JolietDirectoryRecord.prototype._getGetString = function _getGetString() {
            return getJolietString;
          };

          return JolietDirectoryRecord;
        }(DirectoryRecord);
        /**
         * @hidden
         */


        var SystemUseEntry = function SystemUseEntry(data) {
          this._data = data;
        };

        SystemUseEntry.prototype.signatureWord = function signatureWord() {
          return this._data.readUInt16BE(0);
        };

        SystemUseEntry.prototype.signatureWordString = function signatureWordString() {
          return getASCIIString(this._data, 0, 2);
        };

        SystemUseEntry.prototype.length = function length() {
          return this._data[2];
        };

        SystemUseEntry.prototype.suVersion = function suVersion() {
          return this._data[3];
        };
        /**
         * Continuation entry.
         * @hidden
         */


        var CEEntry = function (SystemUseEntry) {
          function CEEntry(data) {
            SystemUseEntry.call(this, data);
            this._entries = null;
          }

          if (SystemUseEntry) CEEntry.__proto__ = SystemUseEntry;
          CEEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          CEEntry.prototype.constructor = CEEntry;
          /**
           * Logical block address of the continuation area.
           */

          CEEntry.prototype.continuationLba = function continuationLba() {
            return this._data.readUInt32LE(4);
          };
          /**
           * Offset into the logical block.
           */


          CEEntry.prototype.continuationLbaOffset = function continuationLbaOffset() {
            return this._data.readUInt32LE(12);
          };
          /**
           * Length of the continuation area.
           */


          CEEntry.prototype.continuationLength = function continuationLength() {
            return this._data.readUInt32LE(20);
          };

          CEEntry.prototype.getEntries = function getEntries(isoData) {
            if (!this._entries) {
              var start = this.continuationLba() * 2048 + this.continuationLbaOffset();
              this._entries = constructSystemUseEntries(isoData, start, this.continuationLength(), isoData);
            }

            return this._entries;
          };

          return CEEntry;
        }(SystemUseEntry);
        /**
         * Padding entry.
         * @hidden
         */


        var PDEntry = function (SystemUseEntry) {
          function PDEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PDEntry.__proto__ = SystemUseEntry;
          PDEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PDEntry.prototype.constructor = PDEntry;
          return PDEntry;
        }(SystemUseEntry);
        /**
         * Identifies that SUSP is in-use.
         * @hidden
         */


        var SPEntry = function (SystemUseEntry) {
          function SPEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SPEntry.__proto__ = SystemUseEntry;
          SPEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SPEntry.prototype.constructor = SPEntry;

          SPEntry.prototype.checkBytesPass = function checkBytesPass() {
            return this._data[4] === 0xBE && this._data[5] === 0xEF;
          };

          SPEntry.prototype.bytesSkipped = function bytesSkipped() {
            return this._data[6];
          };

          return SPEntry;
        }(SystemUseEntry);
        /**
         * Identifies the end of the SUSP entries.
         * @hidden
         */


        var STEntry = function (SystemUseEntry) {
          function STEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) STEntry.__proto__ = SystemUseEntry;
          STEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          STEntry.prototype.constructor = STEntry;
          return STEntry;
        }(SystemUseEntry);
        /**
         * Specifies system-specific extensions to SUSP.
         * @hidden
         */


        var EREntry = function (SystemUseEntry) {
          function EREntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) EREntry.__proto__ = SystemUseEntry;
          EREntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          EREntry.prototype.constructor = EREntry;

          EREntry.prototype.identifierLength = function identifierLength() {
            return this._data[4];
          };

          EREntry.prototype.descriptorLength = function descriptorLength() {
            return this._data[5];
          };

          EREntry.prototype.sourceLength = function sourceLength() {
            return this._data[6];
          };

          EREntry.prototype.extensionVersion = function extensionVersion() {
            return this._data[7];
          };

          EREntry.prototype.extensionIdentifier = function extensionIdentifier() {
            return getASCIIString(this._data, 8, this.identifierLength());
          };

          EREntry.prototype.extensionDescriptor = function extensionDescriptor() {
            return getASCIIString(this._data, 8 + this.identifierLength(), this.descriptorLength());
          };

          EREntry.prototype.extensionSource = function extensionSource() {
            return getASCIIString(this._data, 8 + this.identifierLength() + this.descriptorLength(), this.sourceLength());
          };

          return EREntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var ESEntry = function (SystemUseEntry) {
          function ESEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) ESEntry.__proto__ = SystemUseEntry;
          ESEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          ESEntry.prototype.constructor = ESEntry;

          ESEntry.prototype.extensionSequence = function extensionSequence() {
            return this._data[4];
          };

          return ESEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Marks that RockRidge is in use [deprecated]
         * @hidden
         */


        var RREntry = function (SystemUseEntry) {
          function RREntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) RREntry.__proto__ = SystemUseEntry;
          RREntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          RREntry.prototype.constructor = RREntry;
          return RREntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records POSIX file attributes.
         * @hidden
         */


        var PXEntry = function (SystemUseEntry) {
          function PXEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PXEntry.__proto__ = SystemUseEntry;
          PXEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PXEntry.prototype.constructor = PXEntry;

          PXEntry.prototype.mode = function mode() {
            return this._data.readUInt32LE(4);
          };

          PXEntry.prototype.fileLinks = function fileLinks() {
            return this._data.readUInt32LE(12);
          };

          PXEntry.prototype.uid = function uid() {
            return this._data.readUInt32LE(20);
          };

          PXEntry.prototype.gid = function gid() {
            return this._data.readUInt32LE(28);
          };

          PXEntry.prototype.inode = function inode() {
            return this._data.readUInt32LE(36);
          };

          return PXEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records POSIX device number.
         * @hidden
         */


        var PNEntry = function (SystemUseEntry) {
          function PNEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PNEntry.__proto__ = SystemUseEntry;
          PNEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PNEntry.prototype.constructor = PNEntry;

          PNEntry.prototype.devTHigh = function devTHigh() {
            return this._data.readUInt32LE(4);
          };

          PNEntry.prototype.devTLow = function devTLow() {
            return this._data.readUInt32LE(12);
          };

          return PNEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records symbolic link
         * @hidden
         */


        var SLEntry = function (SystemUseEntry) {
          function SLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SLEntry.__proto__ = SystemUseEntry;
          SLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SLEntry.prototype.constructor = SLEntry;

          SLEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          SLEntry.prototype.continueFlag = function continueFlag() {
            return this.flags() & 0x1;
          };

          SLEntry.prototype.componentRecords = function componentRecords() {
            var this$1 = this;
            var records = new Array();
            var i = 5;

            while (i < this.length()) {
              var record = new SLComponentRecord(this$1._data.slice(i));
              records.push(record);
              i += record.length();
            }

            return records;
          };

          return SLEntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var SLComponentRecord = function SLComponentRecord(data) {
          this._data = data;
        };

        SLComponentRecord.prototype.flags = function flags() {
          return this._data[0];
        };

        SLComponentRecord.prototype.length = function length() {
          return 2 + this.componentLength();
        };

        SLComponentRecord.prototype.componentLength = function componentLength() {
          return this._data[1];
        };

        SLComponentRecord.prototype.content = function content(getString) {
          return getString(this._data, 2, this.componentLength());
        };
        /**
         * RockRidge: Records alternate file name
         * @hidden
         */


        var NMEntry = function (SystemUseEntry) {
          function NMEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) NMEntry.__proto__ = SystemUseEntry;
          NMEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          NMEntry.prototype.constructor = NMEntry;

          NMEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          NMEntry.prototype.name = function name(getString) {
            return getString(this._data, 5, this.length() - 5);
          };

          return NMEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records child link
         * @hidden
         */


        var CLEntry = function (SystemUseEntry) {
          function CLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) CLEntry.__proto__ = SystemUseEntry;
          CLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          CLEntry.prototype.constructor = CLEntry;

          CLEntry.prototype.childDirectoryLba = function childDirectoryLba() {
            return this._data.readUInt32LE(4);
          };

          return CLEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records parent link.
         * @hidden
         */


        var PLEntry = function (SystemUseEntry) {
          function PLEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) PLEntry.__proto__ = SystemUseEntry;
          PLEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          PLEntry.prototype.constructor = PLEntry;

          PLEntry.prototype.parentDirectoryLba = function parentDirectoryLba() {
            return this._data.readUInt32LE(4);
          };

          return PLEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records relocated directory.
         * @hidden
         */


        var REEntry = function (SystemUseEntry) {
          function REEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) REEntry.__proto__ = SystemUseEntry;
          REEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          REEntry.prototype.constructor = REEntry;
          return REEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: Records file timestamps
         * @hidden
         */


        var TFEntry = function (SystemUseEntry) {
          function TFEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) TFEntry.__proto__ = SystemUseEntry;
          TFEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          TFEntry.prototype.constructor = TFEntry;

          TFEntry.prototype.flags = function flags() {
            return this._data[4];
          };

          TFEntry.prototype.creation = function creation() {
            if (this.flags() & 1
            /* CREATION */
            ) {
                if (this._longFormDates()) {
                  return getDate(this._data, 5);
                } else {
                  return getShortFormDate(this._data, 5);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.modify = function modify() {
            if (this.flags() & 2
            /* MODIFY */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.access = function access() {
            if (this.flags() & 4
            /* ACCESS */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.backup = function backup() {
            if (this.flags() & 16
            /* BACKUP */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.expiration = function expiration() {
            if (this.flags() & 32
            /* EXPIRATION */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;
                previousDates += this.flags() & 16
                /* BACKUP */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype.effective = function effective() {
            if (this.flags() & 64
            /* EFFECTIVE */
            ) {
                var previousDates = this.flags() & 1
                /* CREATION */
                ? 1 : 0;
                previousDates += this.flags() & 2
                /* MODIFY */
                ? 1 : 0;
                previousDates += this.flags() & 4
                /* ACCESS */
                ? 1 : 0;
                previousDates += this.flags() & 16
                /* BACKUP */
                ? 1 : 0;
                previousDates += this.flags() & 32
                /* EXPIRATION */
                ? 1 : 0;

                if (this._longFormDates) {
                  return getDate(this._data, 5 + previousDates * 17);
                } else {
                  return getShortFormDate(this._data, 5 + previousDates * 7);
                }
              } else {
              return null;
            }
          };

          TFEntry.prototype._longFormDates = function _longFormDates() {
            return !!(this.flags() && 128
            /* LONG_FORM */
            );
          };

          return TFEntry;
        }(SystemUseEntry);
        /**
         * RockRidge: File data in sparse format.
         * @hidden
         */


        var SFEntry = function (SystemUseEntry) {
          function SFEntry(data) {
            SystemUseEntry.call(this, data);
          }

          if (SystemUseEntry) SFEntry.__proto__ = SystemUseEntry;
          SFEntry.prototype = Object.create(SystemUseEntry && SystemUseEntry.prototype);
          SFEntry.prototype.constructor = SFEntry;

          SFEntry.prototype.virtualSizeHigh = function virtualSizeHigh() {
            return this._data.readUInt32LE(4);
          };

          SFEntry.prototype.virtualSizeLow = function virtualSizeLow() {
            return this._data.readUInt32LE(12);
          };

          SFEntry.prototype.tableDepth = function tableDepth() {
            return this._data[20];
          };

          return SFEntry;
        }(SystemUseEntry);
        /**
         * @hidden
         */


        var Directory = function Directory(record, isoData) {
          var this$1 = this;
          this._fileList = [];
          this._fileMap = {};
          this._record = record;
          var i = record.lba();
          var iLimit = i + record.dataLength();

          if (!(record.fileFlags() & 2
          /* Directory */
          )) {
            // Must have a CL entry.
            var cl = record.getSUEntries(isoData).filter(function (e) {
              return e instanceof CLEntry;
            })[0];
            i = cl.childDirectoryLba() * 2048;
            iLimit = Infinity;
          }

          while (i < iLimit) {
            var len = isoData[i]; // Zero-padding between sectors.
            // TODO: Could optimize this to seek to nearest-sector upon
            // seeing a 0.

            if (len === 0) {
              i++;
              continue;
            }

            var r = this$1._constructDirectoryRecord(isoData.slice(i));

            var fname = r.fileName(isoData); // Skip '.' and '..' entries.

            if (fname !== '\u0000' && fname !== '\u0001') {
              // Skip relocated entries.
              if (!r.hasRockRidge() || r.getSUEntries(isoData).filter(function (e) {
                return e instanceof REEntry;
              }).length === 0) {
                this$1._fileMap[fname] = r;

                this$1._fileList.push(fname);
              }
            } else if (iLimit === Infinity) {
              // First entry contains needed data.
              iLimit = i + r.dataLength();
            }

            i += r.length();
          }
        };
        /**
         * Get the record with the given name.
         * Returns undefined if not present.
         */


        Directory.prototype.getRecord = function getRecord(name) {
          return this._fileMap[name];
        };

        Directory.prototype.getFileList = function getFileList() {
          return this._fileList;
        };

        Directory.prototype.getDotEntry = function getDotEntry(isoData) {
          return this._constructDirectoryRecord(isoData.slice(this._record.lba()));
        };
        /**
         * @hidden
         */


        var ISODirectory = function (Directory) {
          function ISODirectory(record, isoData) {
            Directory.call(this, record, isoData);
          }

          if (Directory) ISODirectory.__proto__ = Directory;
          ISODirectory.prototype = Object.create(Directory && Directory.prototype);
          ISODirectory.prototype.constructor = ISODirectory;

          ISODirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
            return new ISODirectoryRecord(data, this._record.getRockRidgeOffset());
          };

          return ISODirectory;
        }(Directory);
        /**
         * @hidden
         */


        var JolietDirectory = function (Directory) {
          function JolietDirectory(record, isoData) {
            Directory.call(this, record, isoData);
          }

          if (Directory) JolietDirectory.__proto__ = Directory;
          JolietDirectory.prototype = Object.create(Directory && Directory.prototype);
          JolietDirectory.prototype.constructor = JolietDirectory;

          JolietDirectory.prototype._constructDirectoryRecord = function _constructDirectoryRecord(data) {
            return new JolietDirectoryRecord(data, this._record.getRockRidgeOffset());
          };

          return JolietDirectory;
        }(Directory);
        /**
         * Mounts an ISO file as a read-only file system.
         *
         * Supports:
         * * Vanilla ISO9660 ISOs
         * * Microsoft Joliet and Rock Ridge extensions to the ISO9660 standard
         */


        var IsoFS = function (SynchronousFileSystem$$1) {
          function IsoFS(data, name, deprecateMsg) {
            var this$1 = this;
            if (name === void 0) name = "";
            if (deprecateMsg === void 0) deprecateMsg = true;
            SynchronousFileSystem$$1.call(this);
            this._data = data;
            deprecationMessage(deprecateMsg, IsoFS.Name, {
              data: "ISO data as a Buffer",
              name: name
            }); // Skip first 16 sectors.

            var vdTerminatorFound = false;
            var i = 16 * 2048;
            var candidateVDs = new Array();

            while (!vdTerminatorFound) {
              var slice = data.slice(i);
              var vd = new VolumeDescriptor(slice);

              switch (vd.type()) {
                case 1
                /* PrimaryVolumeDescriptor */
                :
                  candidateVDs.push(new PrimaryVolumeDescriptor(slice));
                  break;

                case 2
                /* SupplementaryVolumeDescriptor */
                :
                  candidateVDs.push(new SupplementaryVolumeDescriptor(slice));
                  break;

                case 255
                /* VolumeDescriptorSetTerminator */
                :
                  vdTerminatorFound = true;
                  break;
              }

              i += 2048;
            }

            if (candidateVDs.length === 0) {
              throw new ApiError(ErrorCode.EIO, "Unable to find a suitable volume descriptor.");
            }

            candidateVDs.forEach(function (v) {
              // Take an SVD over a PVD.
              if (!this$1._pvd || this$1._pvd.type() !== 2
              /* SupplementaryVolumeDescriptor */
              ) {
                  this$1._pvd = v;
                }
            });
            this._root = this._pvd.rootDirectoryEntry(data);
            this._name = name;
          }

          if (SynchronousFileSystem$$1) IsoFS.__proto__ = SynchronousFileSystem$$1;
          IsoFS.prototype = Object.create(SynchronousFileSystem$$1 && SynchronousFileSystem$$1.prototype);
          IsoFS.prototype.constructor = IsoFS;
          /**
           * Creates an IsoFS instance with the given options.
           */

          IsoFS.Create = function Create(opts, cb) {
            var fs;
            var e;

            try {
              fs = new IsoFS(opts.data, opts.name, false);
            } catch (e) {
              e = e;
            } finally {
              cb(e, fs);
            }
          };

          IsoFS.isAvailable = function isAvailable() {
            return true;
          };

          IsoFS.prototype.getName = function getName() {
            var name = "IsoFS" + this._name + (this._pvd ? "-" + this._pvd.name() : '');

            if (this._root && this._root.hasRockRidge()) {
              name += "-RockRidge";
            }

            return name;
          };

          IsoFS.prototype.diskSpace = function diskSpace(path$$1, cb) {
            // Read-only file system.
            cb(this._data.length, 0);
          };

          IsoFS.prototype.isReadOnly = function isReadOnly() {
            return true;
          };

          IsoFS.prototype.supportsLinks = function supportsLinks() {
            return false;
          };

          IsoFS.prototype.supportsProps = function supportsProps() {
            return false;
          };

          IsoFS.prototype.supportsSynch = function supportsSynch() {
            return true;
          };

          IsoFS.prototype.statSync = function statSync(p, isLstat) {
            var record = this._getDirectoryRecord(p);

            if (record === null) {
              throw ApiError.ENOENT(p);
            }

            return this._getStats(p, record);
          };

          IsoFS.prototype.openSync = function openSync(p, flags, mode) {
            // INVARIANT: Cannot write to RO file systems.
            if (flags.isWriteable()) {
              throw new ApiError(ErrorCode.EPERM, p);
            } // Check if the path exists, and is a file.


            var record = this._getDirectoryRecord(p);

            if (!record) {
              throw ApiError.ENOENT(p);
            } else if (record.isSymlink(this._data)) {
              return this.openSync(path.resolve(p, record.getSymlinkPath(this._data)), flags, mode);
            } else if (!record.isDirectory(this._data)) {
              var data = record.getFile(this._data);

              var stats = this._getStats(p, record);

              switch (flags.pathExistsAction()) {
                case ActionType.THROW_EXCEPTION:
                case ActionType.TRUNCATE_FILE:
                  throw ApiError.EEXIST(p);

                case ActionType.NOP:
                  return new NoSyncFile(this, p, flags, stats, data);

                default:
                  throw new ApiError(ErrorCode.EINVAL, 'Invalid FileMode object.');
              }
            } else {
              throw ApiError.EISDIR(p);
            }
          };

          IsoFS.prototype.readdirSync = function readdirSync(path$$1) {
            // Check if it exists.
            var record = this._getDirectoryRecord(path$$1);

            if (!record) {
              throw ApiError.ENOENT(path$$1);
            } else if (record.isDirectory(this._data)) {
              return record.getDirectory(this._data).getFileList().slice(0);
            } else {
              throw ApiError.ENOTDIR(path$$1);
            }
          };
          /**
           * Specially-optimized readfile.
           */


          IsoFS.prototype.readFileSync = function readFileSync(fname, encoding, flag) {
            // Get file.
            var fd = this.openSync(fname, flag, 0x1a4);

            try {
              var fdCast = fd;
              var fdBuff = fdCast.getBuffer();

              if (encoding === null) {
                return copyingSlice(fdBuff);
              }

              return fdBuff.toString(encoding);
            } finally {
              fd.closeSync();
            }
          };

          IsoFS.prototype._getDirectoryRecord = function _getDirectoryRecord(path$$1) {
            var this$1 = this; // Special case.

            if (path$$1 === '/') {
              return this._root;
            }

            var components = path$$1.split('/').slice(1);
            var dir = this._root;

            for (var i = 0, list = components; i < list.length; i += 1) {
              var component = list[i];

              if (dir.isDirectory(this$1._data)) {
                dir = dir.getDirectory(this$1._data).getRecord(component);

                if (!dir) {
                  return null;
                }
              } else {
                return null;
              }
            }

            return dir;
          };

          IsoFS.prototype._getStats = function _getStats(p, record) {
            if (record.isSymlink(this._data)) {
              var newP = path.resolve(p, record.getSymlinkPath(this._data));

              var dirRec = this._getDirectoryRecord(newP);

              if (!dirRec) {
                return null;
              }

              return this._getStats(newP, dirRec);
            } else {
              var len = record.dataLength();
              var mode = 0x16D;
              var date = record.recordingDate();
              var atime = date;
              var mtime = date;
              var ctime = date;

              if (record.hasRockRidge()) {
                var entries = record.getSUEntries(this._data);

                for (var i = 0, list = entries; i < list.length; i += 1) {
                  var entry = list[i];

                  if (entry instanceof PXEntry) {
                    mode = entry.mode();
                  } else if (entry instanceof TFEntry) {
                    var flags = entry.flags();

                    if (flags & 4
                    /* ACCESS */
                    ) {
                        atime = entry.access();
                      }

                    if (flags & 2
                    /* MODIFY */
                    ) {
                        mtime = entry.modify();
                      }

                    if (flags & 1
                    /* CREATION */
                    ) {
                        ctime = entry.creation();
                      }
                  }
                }
              } // Mask out writeable flags. This is a RO file system.


              mode = mode & 0x16D;
              return new Stats(record.isDirectory(this._data) ? FileType.DIRECTORY : FileType.FILE, len, mode, atime, mtime, ctime);
            }
          };

          return IsoFS;
        }(SynchronousFileSystem);

        IsoFS.Name = "IsoFS";
        IsoFS.Options = {
          data: {
            type: "object",
            description: "The ISO file in a buffer",
            validator: bufferValidator
          }
        }; // Monkey-patch `Create` functions to check options before file system initialization.

        [AsyncMirror, DropboxFileSystem, EmscriptenFileSystem, FolderAdapter, HTML5FS, InMemoryFileSystem, IndexedDBFileSystem, IsoFS, LocalStorageFileSystem, MountableFileSystem, OverlayFS, WorkerFS, XmlHttpRequest, ZipFS].forEach(function (fsType) {
          var create = fsType.Create;

          fsType.Create = function (opts, cb) {
            var oneArg = typeof opts === "function";
            var normalizedCb = oneArg ? opts : cb;
            var normalizedOpts = oneArg ? {} : opts;

            function wrappedCb(e) {
              if (e) {
                normalizedCb(e);
              } else {
                create.call(fsType, normalizedOpts, normalizedCb);
              }
            }

            checkOptions(fsType, normalizedOpts, wrappedCb);
          };
        });
        /**
         * @hidden
         */

        var Backends = {
          AsyncMirror: AsyncMirror,
          Dropbox: DropboxFileSystem,
          Emscripten: EmscriptenFileSystem,
          FolderAdapter: FolderAdapter,
          HTML5FS: HTML5FS,
          InMemory: InMemoryFileSystem,
          IndexedDB: IndexedDBFileSystem,
          IsoFS: IsoFS,
          LocalStorage: LocalStorageFileSystem,
          MountableFileSystem: MountableFileSystem,
          OverlayFS: OverlayFS,
          WorkerFS: WorkerFS,
          XmlHttpRequest: XmlHttpRequest,
          ZipFS: ZipFS
        };
        /**
         * BrowserFS's main module. This is exposed in the browser via the BrowserFS global.
         * Due to limitations in typedoc, we document these functions in ./typedoc.ts.
         */

        if (process['initializeTTYs']) {
          process['initializeTTYs']();
        }
        /**
         * Installs BFSRequire as global `require`, a Node Buffer polyfill as the global `Buffer` variable,
         * and a Node process polyfill as the global `process` variable.
         */


        function install(obj) {
          obj.Buffer = Buffer;
          obj.process = process;
          var oldRequire = obj.require ? obj.require : null; // Monkey-patch require for Node-style code.

          obj.require = function (arg) {
            var rv = BFSRequire(arg);

            if (!rv) {
              return oldRequire.apply(null, Array.prototype.slice.call(arguments, 0));
            } else {
              return rv;
            }
          };
        }
        /**
         * @hidden
         */


        function registerFileSystem(name, fs) {
          Backends[name] = fs;
        }

        function BFSRequire(module) {
          switch (module) {
            case 'fs':
              return _fsMock;

            case 'path':
              return path;

            case 'buffer':
              // The 'buffer' module has 'Buffer' as a property.
              return buffer;

            case 'process':
              return process;

            case 'bfs_utils':
              return BFSUtils;

            default:
              return Backends[module];
          }
        }
        /**
         * Initializes BrowserFS with the given root file system.
         */


        function initialize(rootfs) {
          return _fsMock.initialize(rootfs);
        }
        /**
         * Creates a file system with the given configuration, and initializes BrowserFS with it.
         * See the FileSystemConfiguration type for more info on the configuration object.
         */


        function configure(config, cb) {
          getFileSystem(config, function (e, fs) {
            if (fs) {
              initialize(fs);
              cb();
            } else {
              cb(e);
            }
          });
        }
        /**
         * Retrieve a file system with the given configuration.
         * @param config A FileSystemConfiguration object. See FileSystemConfiguration for details.
         * @param cb Called when the file system is constructed, or when an error occurs.
         */


        function getFileSystem(config, cb) {
          var fsName = config['fs'];

          if (!fsName) {
            return cb(new ApiError(ErrorCode.EPERM, 'Missing "fs" property on configuration object.'));
          }

          var options = config['options'];
          var waitCount = 0;
          var called = false;

          function finish() {
            if (!called) {
              called = true;
              var fsc = Backends[fsName];

              if (!fsc) {
                cb(new ApiError(ErrorCode.EPERM, "File system " + fsName + " is not available in BrowserFS."));
              } else {
                fsc.Create(options, cb);
              }
            }
          }

          if (options !== null && typeof options === "object") {
            var finishedIterating = false;
            var props = Object.keys(options).filter(function (k) {
              return k !== 'fs';
            }); // Check recursively if other fields have 'fs' properties.

            props.forEach(function (p) {
              var d = options[p];

              if (d !== null && typeof d === "object" && d['fs']) {
                waitCount++;
                getFileSystem(d, function (e, fs) {
                  waitCount--;

                  if (e) {
                    if (called) {
                      return;
                    }

                    called = true;
                    cb(e);
                  } else {
                    options[p] = fs;

                    if (waitCount === 0 && finishedIterating) {
                      finish();
                    }
                  }
                });
              }
            });
            finishedIterating = true;
          }

          if (waitCount === 0) {
            finish();
          }
        }
        /**
         * BrowserFS's main entry point.
         * It installs all of the needed polyfills, and requires() the main module.
         */
        // IE substr does not support negative indices


        if ('ab'.substr(-1) !== 'b') {
          String.prototype.substr = function (substr) {
            return function (start, length) {
              // did we get a negative start, calculate how much it is from the
              // beginning of the string
              if (start < 0) {
                start = this.length + start;
              } // call the original function


              return substr.call(this, start, length);
            };
          }(String.prototype.substr);
        } // Polyfill for Uint8Array.prototype.slice.
        // Safari and some other browsers do not define it.


        if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined') {
          if (!Uint8Array.prototype['slice']) {
            Uint8Array.prototype.slice = function (start, end) {
              if (start === void 0) start = 0;
              if (end === void 0) end = this.length;
              var self = this;

              if (start < 0) {
                start = this.length + start;

                if (start < 0) {
                  start = 0;
                }
              }

              if (end < 0) {
                end = this.length + end;

                if (end < 0) {
                  end = 0;
                }
              }

              if (end < start) {
                end = start;
              }

              return new Uint8Array(self.buffer, self.byteOffset + start, end - start);
            };
          }
        }

        exports.install = install;
        exports.registerFileSystem = registerFileSystem;
        exports.BFSRequire = BFSRequire;
        exports.initialize = initialize;
        exports.configure = configure;
        exports.getFileSystem = getFileSystem;
        exports.EmscriptenFS = BFSEmscriptenFS;
        exports.FileSystem = Backends;
        exports.Errors = api_error;
        exports.setImmediate = setImmediate$3;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(1), function () {
        return this;
      }(), __webpack_require__(5)(module), __webpack_require__(6));
      /***/
    },
    /* 1 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(2).Buffer;
      /***/
    },
    /* 2 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        /*!
        * The buffer module from node.js, for the browser.
        *
        * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
        * @license  MIT
        */

        /* eslint-disable no-proto */
        'use strict';

        var base64 = __webpack_require__(3);

        var ieee754 = __webpack_require__(4);

        exports.Buffer = Buffer;
        exports.SlowBuffer = SlowBuffer;
        exports.INSPECT_MAX_BYTES = 50;
        var K_MAX_LENGTH = 0x7fffffff;
        exports.kMaxLength = K_MAX_LENGTH;
        /**
         * If `Buffer.TYPED_ARRAY_SUPPORT`:
         *   === true    Use Uint8Array implementation (fastest)
         *   === false   Print warning and recommend using `buffer` v4.x which has an Object
         *               implementation (most compatible, even IE6)
         *
         * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
         * Opera 11.6+, iOS 4.2+.
         *
         * We report that the browser does not support typed arrays if the are not subclassable
         * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
         * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
         * for __proto__ and has a buggy typed array implementation.
         */

        Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

        if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
          console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
        }

        function typedArraySupport() {
          // Can typed array instances can be augmented?
          try {
            var arr = new Uint8Array(1);
            arr.__proto__ = {
              __proto__: Uint8Array.prototype,
              foo: function () {
                return 42;
              }
            };
            return arr.foo() === 42;
          } catch (e) {
            return false;
          }
        }

        function createBuffer(length) {
          if (length > K_MAX_LENGTH) {
            throw new RangeError('Invalid typed array length');
          } // Return an augmented `Uint8Array` instance


          var buf = new Uint8Array(length);
          buf.__proto__ = Buffer.prototype;
          return buf;
        }
        /**
         * The Buffer constructor returns instances of `Uint8Array` that have their
         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
         * and the `Uint8Array` methods. Square bracket notation works as expected -- it
         * returns a single octet.
         *
         * The `Uint8Array` prototype remains unmodified.
         */


        function Buffer(arg, encodingOrOffset, length) {
          // Common case.
          if (typeof arg === 'number') {
            if (typeof encodingOrOffset === 'string') {
              throw new Error('If encoding is specified then the first argument must be a string');
            }

            return allocUnsafe(arg);
          }

          return from(arg, encodingOrOffset, length);
        } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


        if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {
          Object.defineProperty(Buffer, Symbol.species, {
            value: null,
            configurable: true,
            enumerable: false,
            writable: false
          });
        }

        Buffer.poolSize = 8192; // not used by this implementation

        function from(value, encodingOrOffset, length) {
          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (isArrayBuffer(value)) {
            return fromArrayBuffer(value, encodingOrOffset, length);
          }

          if (typeof value === 'string') {
            return fromString(value, encodingOrOffset);
          }

          return fromObject(value);
        }
        /**
         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
         * if value is a number.
         * Buffer.from(str[, encoding])
         * Buffer.from(array)
         * Buffer.from(buffer)
         * Buffer.from(arrayBuffer[, byteOffset[, length]])
         **/


        Buffer.from = function (value, encodingOrOffset, length) {
          return from(value, encodingOrOffset, length);
        }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
        // https://github.com/feross/buffer/pull/148


        Buffer.prototype.__proto__ = Uint8Array.prototype;
        Buffer.__proto__ = Uint8Array;

        function assertSize(size) {
          if (typeof size !== 'number') {
            throw new TypeError('"size" argument must be a number');
          } else if (size < 0) {
            throw new RangeError('"size" argument must not be negative');
          }
        }

        function alloc(size, fill, encoding) {
          assertSize(size);

          if (size <= 0) {
            return createBuffer(size);
          }

          if (fill !== undefined) {
            // Only pay attention to encoding if it's a string. This
            // prevents accidentally sending in a number that would
            // be interpretted as a start offset.
            return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
          }

          return createBuffer(size);
        }
        /**
         * Creates a new filled Buffer instance.
         * alloc(size[, fill[, encoding]])
         **/


        Buffer.alloc = function (size, fill, encoding) {
          return alloc(size, fill, encoding);
        };

        function allocUnsafe(size) {
          assertSize(size);
          return createBuffer(size < 0 ? 0 : checked(size) | 0);
        }
        /**
         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
         * */


        Buffer.allocUnsafe = function (size) {
          return allocUnsafe(size);
        };
        /**
         * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
         */


        Buffer.allocUnsafeSlow = function (size) {
          return allocUnsafe(size);
        };

        function fromString(string, encoding) {
          if (typeof encoding !== 'string' || encoding === '') {
            encoding = 'utf8';
          }

          if (!Buffer.isEncoding(encoding)) {
            throw new TypeError('"encoding" must be a valid string encoding');
          }

          var length = byteLength(string, encoding) | 0;
          var buf = createBuffer(length);
          var actual = buf.write(string, encoding);

          if (actual !== length) {
            // Writing a hex string, for example, that contains invalid characters will
            // cause everything after the first invalid character to be ignored. (e.g.
            // 'abxxcd' will be treated as 'ab')
            buf = buf.slice(0, actual);
          }

          return buf;
        }

        function fromArrayLike(array) {
          var length = array.length < 0 ? 0 : checked(array.length) | 0;
          var buf = createBuffer(length);

          for (var i = 0; i < length; i += 1) {
            buf[i] = array[i] & 255;
          }

          return buf;
        }

        function fromArrayBuffer(array, byteOffset, length) {
          if (byteOffset < 0 || array.byteLength < byteOffset) {
            throw new RangeError('\'offset\' is out of bounds');
          }

          if (array.byteLength < byteOffset + (length || 0)) {
            throw new RangeError('\'length\' is out of bounds');
          }

          var buf;

          if (byteOffset === undefined && length === undefined) {
            buf = new Uint8Array(array);
          } else if (length === undefined) {
            buf = new Uint8Array(array, byteOffset);
          } else {
            buf = new Uint8Array(array, byteOffset, length);
          } // Return an augmented `Uint8Array` instance


          buf.__proto__ = Buffer.prototype;
          return buf;
        }

        function fromObject(obj) {
          if (Buffer.isBuffer(obj)) {
            var len = checked(obj.length) | 0;
            var buf = createBuffer(len);

            if (buf.length === 0) {
              return buf;
            }

            obj.copy(buf, 0, 0, len);
            return buf;
          }

          if (obj) {
            if (isArrayBufferView(obj) || 'length' in obj) {
              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                return createBuffer(0);
              }

              return fromArrayLike(obj);
            }

            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
              return fromArrayLike(obj.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
        }

        function checked(length) {
          // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
          // length is NaN (which is otherwise coerced to zero.)
          if (length >= K_MAX_LENGTH) {
            throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
          }

          return length | 0;
        }

        function SlowBuffer(length) {
          if (+length != length) {
            // eslint-disable-line eqeqeq
            length = 0;
          }

          return Buffer.alloc(+length);
        }

        Buffer.isBuffer = function isBuffer(b) {
          return b != null && b._isBuffer === true;
        };

        Buffer.compare = function compare(a, b) {
          if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
            throw new TypeError('Arguments must be Buffers');
          }

          if (a === b) return 0;
          var x = a.length;
          var y = b.length;

          for (var i = 0, len = Math.min(x, y); i < len; ++i) {
            if (a[i] !== b[i]) {
              x = a[i];
              y = b[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        };

        Buffer.isEncoding = function isEncoding(encoding) {
          switch (String(encoding).toLowerCase()) {
            case 'hex':
            case 'utf8':
            case 'utf-8':
            case 'ascii':
            case 'latin1':
            case 'binary':
            case 'base64':
            case 'ucs2':
            case 'ucs-2':
            case 'utf16le':
            case 'utf-16le':
              return true;

            default:
              return false;
          }
        };

        Buffer.concat = function concat(list, length) {
          if (!Array.isArray(list)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          }

          if (list.length === 0) {
            return Buffer.alloc(0);
          }

          var i;

          if (length === undefined) {
            length = 0;

            for (i = 0; i < list.length; ++i) {
              length += list[i].length;
            }
          }

          var buffer = Buffer.allocUnsafe(length);
          var pos = 0;

          for (i = 0; i < list.length; ++i) {
            var buf = list[i];

            if (!Buffer.isBuffer(buf)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            buf.copy(buffer, pos);
            pos += buf.length;
          }

          return buffer;
        };

        function byteLength(string, encoding) {
          if (Buffer.isBuffer(string)) {
            return string.length;
          }

          if (isArrayBufferView(string) || isArrayBuffer(string)) {
            return string.byteLength;
          }

          if (typeof string !== 'string') {
            string = '' + string;
          }

          var len = string.length;
          if (len === 0) return 0; // Use a for loop to avoid recursion

          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return len;

              case 'utf8':
              case 'utf-8':
              case undefined:
                return utf8ToBytes(string).length;

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return len * 2;

              case 'hex':
                return len >>> 1;

              case 'base64':
                return base64ToBytes(string).length;

              default:
                if (loweredCase) return utf8ToBytes(string).length; // assume utf8

                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        }

        Buffer.byteLength = byteLength;

        function slowToString(encoding, start, end) {
          var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
          // property of a typed array.
          // This behaves neither like String nor Uint8Array in that we set start/end
          // to their upper/lower bounds if the value passed is out of range.
          // undefined is handled specially as per ECMA-262 6th Edition,
          // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

          if (start === undefined || start < 0) {
            start = 0;
          } // Return early if start > this.length. Done here to prevent potential uint32
          // coercion fail below.


          if (start > this.length) {
            return '';
          }

          if (end === undefined || end > this.length) {
            end = this.length;
          }

          if (end <= 0) {
            return '';
          } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


          end >>>= 0;
          start >>>= 0;

          if (end <= start) {
            return '';
          }

          if (!encoding) encoding = 'utf8';

          while (true) {
            switch (encoding) {
              case 'hex':
                return hexSlice(this, start, end);

              case 'utf8':
              case 'utf-8':
                return utf8Slice(this, start, end);

              case 'ascii':
                return asciiSlice(this, start, end);

              case 'latin1':
              case 'binary':
                return latin1Slice(this, start, end);

              case 'base64':
                return base64Slice(this, start, end);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return utf16leSlice(this, start, end);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = (encoding + '').toLowerCase();
                loweredCase = true;
            }
          }
        } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
        // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
        // reliably in a browserify context because there could be multiple different
        // copies of the 'buffer' package in use. This method works even for Buffer
        // instances that were created from another copy of the `buffer` package.
        // See: https://github.com/feross/buffer/issues/154


        Buffer.prototype._isBuffer = true;

        function swap(b, n, m) {
          var i = b[n];
          b[n] = b[m];
          b[m] = i;
        }

        Buffer.prototype.swap16 = function swap16() {
          var len = this.length;

          if (len % 2 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 16-bits');
          }

          for (var i = 0; i < len; i += 2) {
            swap(this, i, i + 1);
          }

          return this;
        };

        Buffer.prototype.swap32 = function swap32() {
          var len = this.length;

          if (len % 4 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 32-bits');
          }

          for (var i = 0; i < len; i += 4) {
            swap(this, i, i + 3);
            swap(this, i + 1, i + 2);
          }

          return this;
        };

        Buffer.prototype.swap64 = function swap64() {
          var len = this.length;

          if (len % 8 !== 0) {
            throw new RangeError('Buffer size must be a multiple of 64-bits');
          }

          for (var i = 0; i < len; i += 8) {
            swap(this, i, i + 7);
            swap(this, i + 1, i + 6);
            swap(this, i + 2, i + 5);
            swap(this, i + 3, i + 4);
          }

          return this;
        };

        Buffer.prototype.toString = function toString() {
          var length = this.length;
          if (length === 0) return '';
          if (arguments.length === 0) return utf8Slice(this, 0, length);
          return slowToString.apply(this, arguments);
        };

        Buffer.prototype.equals = function equals(b) {
          if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
          if (this === b) return true;
          return Buffer.compare(this, b) === 0;
        };

        Buffer.prototype.inspect = function inspect() {
          var str = '';
          var max = exports.INSPECT_MAX_BYTES;

          if (this.length > 0) {
            str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
            if (this.length > max) str += ' ... ';
          }

          return '<Buffer ' + str + '>';
        };

        Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
          if (!Buffer.isBuffer(target)) {
            throw new TypeError('Argument must be a Buffer');
          }

          if (start === undefined) {
            start = 0;
          }

          if (end === undefined) {
            end = target ? target.length : 0;
          }

          if (thisStart === undefined) {
            thisStart = 0;
          }

          if (thisEnd === undefined) {
            thisEnd = this.length;
          }

          if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
            throw new RangeError('out of range index');
          }

          if (thisStart >= thisEnd && start >= end) {
            return 0;
          }

          if (thisStart >= thisEnd) {
            return -1;
          }

          if (start >= end) {
            return 1;
          }

          start >>>= 0;
          end >>>= 0;
          thisStart >>>= 0;
          thisEnd >>>= 0;
          if (this === target) return 0;
          var x = thisEnd - thisStart;
          var y = end - start;
          var len = Math.min(x, y);
          var thisCopy = this.slice(thisStart, thisEnd);
          var targetCopy = target.slice(start, end);

          for (var i = 0; i < len; ++i) {
            if (thisCopy[i] !== targetCopy[i]) {
              x = thisCopy[i];
              y = targetCopy[i];
              break;
            }
          }

          if (x < y) return -1;
          if (y < x) return 1;
          return 0;
        }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
        // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
        //
        // Arguments:
        // - buffer - a Buffer to search
        // - val - a string, Buffer, or number
        // - byteOffset - an index into `buffer`; will be clamped to an int32
        // - encoding - an optional encoding, relevant is val is a string
        // - dir - true for indexOf, false for lastIndexOf


        function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
          // Empty buffer means no match
          if (buffer.length === 0) return -1; // Normalize byteOffset

          if (typeof byteOffset === 'string') {
            encoding = byteOffset;
            byteOffset = 0;
          } else if (byteOffset > 0x7fffffff) {
            byteOffset = 0x7fffffff;
          } else if (byteOffset < -0x80000000) {
            byteOffset = -0x80000000;
          }

          byteOffset = +byteOffset; // Coerce to Number.

          if (numberIsNaN(byteOffset)) {
            // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
            byteOffset = dir ? 0 : buffer.length - 1;
          } // Normalize byteOffset: negative offsets start from the end of the buffer


          if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

          if (byteOffset >= buffer.length) {
            if (dir) return -1;else byteOffset = buffer.length - 1;
          } else if (byteOffset < 0) {
            if (dir) byteOffset = 0;else return -1;
          } // Normalize val


          if (typeof val === 'string') {
            val = Buffer.from(val, encoding);
          } // Finally, search either indexOf (if dir is true) or lastIndexOf


          if (Buffer.isBuffer(val)) {
            // Special case: looking for empty string/buffer always fails
            if (val.length === 0) {
              return -1;
            }

            return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
          } else if (typeof val === 'number') {
            val = val & 0xFF; // Search for a byte value [0-255]

            if (typeof Uint8Array.prototype.indexOf === 'function') {
              if (dir) {
                return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
              } else {
                return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
              }
            }

            return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
          }

          throw new TypeError('val must be string, number or Buffer');
        }

        function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
          var indexSize = 1;
          var arrLength = arr.length;
          var valLength = val.length;

          if (encoding !== undefined) {
            encoding = String(encoding).toLowerCase();

            if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
              if (arr.length < 2 || val.length < 2) {
                return -1;
              }

              indexSize = 2;
              arrLength /= 2;
              valLength /= 2;
              byteOffset /= 2;
            }
          }

          function read(buf, i) {
            if (indexSize === 1) {
              return buf[i];
            } else {
              return buf.readUInt16BE(i * indexSize);
            }
          }

          var i;

          if (dir) {
            var foundIndex = -1;

            for (i = byteOffset; i < arrLength; i++) {
              if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                if (foundIndex === -1) foundIndex = i;
                if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
              } else {
                if (foundIndex !== -1) i -= i - foundIndex;
                foundIndex = -1;
              }
            }
          } else {
            if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

            for (i = byteOffset; i >= 0; i--) {
              var found = true;

              for (var j = 0; j < valLength; j++) {
                if (read(arr, i + j) !== read(val, j)) {
                  found = false;
                  break;
                }
              }

              if (found) return i;
            }
          }

          return -1;
        }

        Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
          return this.indexOf(val, byteOffset, encoding) !== -1;
        };

        Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
        };

        Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
          return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
        };

        function hexWrite(buf, string, offset, length) {
          offset = Number(offset) || 0;
          var remaining = buf.length - offset;

          if (!length) {
            length = remaining;
          } else {
            length = Number(length);

            if (length > remaining) {
              length = remaining;
            }
          } // must be an even number of digits


          var strLen = string.length;
          if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

          if (length > strLen / 2) {
            length = strLen / 2;
          }

          for (var i = 0; i < length; ++i) {
            var parsed = parseInt(string.substr(i * 2, 2), 16);
            if (numberIsNaN(parsed)) return i;
            buf[offset + i] = parsed;
          }

          return i;
        }

        function utf8Write(buf, string, offset, length) {
          return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
        }

        function asciiWrite(buf, string, offset, length) {
          return blitBuffer(asciiToBytes(string), buf, offset, length);
        }

        function latin1Write(buf, string, offset, length) {
          return asciiWrite(buf, string, offset, length);
        }

        function base64Write(buf, string, offset, length) {
          return blitBuffer(base64ToBytes(string), buf, offset, length);
        }

        function ucs2Write(buf, string, offset, length) {
          return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
        }

        Buffer.prototype.write = function write(string, offset, length, encoding) {
          // Buffer#write(string)
          if (offset === undefined) {
            encoding = 'utf8';
            length = this.length;
            offset = 0; // Buffer#write(string, encoding)
          } else if (length === undefined && typeof offset === 'string') {
            encoding = offset;
            length = this.length;
            offset = 0; // Buffer#write(string, offset[, length][, encoding])
          } else if (isFinite(offset)) {
            offset = offset >>> 0;

            if (isFinite(length)) {
              length = length >>> 0;
              if (encoding === undefined) encoding = 'utf8';
            } else {
              encoding = length;
              length = undefined;
            }
          } else {
            throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          }

          var remaining = this.length - offset;
          if (length === undefined || length > remaining) length = remaining;

          if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
            throw new RangeError('Attempt to write outside buffer bounds');
          }

          if (!encoding) encoding = 'utf8';
          var loweredCase = false;

          for (;;) {
            switch (encoding) {
              case 'hex':
                return hexWrite(this, string, offset, length);

              case 'utf8':
              case 'utf-8':
                return utf8Write(this, string, offset, length);

              case 'ascii':
                return asciiWrite(this, string, offset, length);

              case 'latin1':
              case 'binary':
                return latin1Write(this, string, offset, length);

              case 'base64':
                // Warning: maxLength not taken into account in base64Write
                return base64Write(this, string, offset, length);

              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return ucs2Write(this, string, offset, length);

              default:
                if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                encoding = ('' + encoding).toLowerCase();
                loweredCase = true;
            }
          }
        };

        Buffer.prototype.toJSON = function toJSON() {
          return {
            type: 'Buffer',
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };

        function base64Slice(buf, start, end) {
          if (start === 0 && end === buf.length) {
            return base64.fromByteArray(buf);
          } else {
            return base64.fromByteArray(buf.slice(start, end));
          }
        }

        function utf8Slice(buf, start, end) {
          end = Math.min(buf.length, end);
          var res = [];
          var i = start;

          while (i < end) {
            var firstByte = buf[i];
            var codePoint = null;
            var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

            if (i + bytesPerSequence <= end) {
              var secondByte, thirdByte, fourthByte, tempCodePoint;

              switch (bytesPerSequence) {
                case 1:
                  if (firstByte < 0x80) {
                    codePoint = firstByte;
                  }

                  break;

                case 2:
                  secondByte = buf[i + 1];

                  if ((secondByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                    if (tempCodePoint > 0x7F) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 3:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                      codePoint = tempCodePoint;
                    }
                  }

                  break;

                case 4:
                  secondByte = buf[i + 1];
                  thirdByte = buf[i + 2];
                  fourthByte = buf[i + 3];

                  if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                      codePoint = tempCodePoint;
                    }
                  }

              }
            }

            if (codePoint === null) {
              // we did not generate a valid codePoint so insert a
              // replacement char (U+FFFD) and advance only 1 byte
              codePoint = 0xFFFD;
              bytesPerSequence = 1;
            } else if (codePoint > 0xFFFF) {
              // encode to utf16 (surrogate pair dance)
              codePoint -= 0x10000;
              res.push(codePoint >>> 10 & 0x3FF | 0xD800);
              codePoint = 0xDC00 | codePoint & 0x3FF;
            }

            res.push(codePoint);
            i += bytesPerSequence;
          }

          return decodeCodePointsArray(res);
        } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
        // the lowest limit is Chrome, with 0x10000 args.
        // We go 1 magnitude less, for safety


        var MAX_ARGUMENTS_LENGTH = 0x1000;

        function decodeCodePointsArray(codePoints) {
          var len = codePoints.length;

          if (len <= MAX_ARGUMENTS_LENGTH) {
            return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
          } // Decode in chunks to avoid "call stack size exceeded".


          var res = '';
          var i = 0;

          while (i < len) {
            res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
          }

          return res;
        }

        function asciiSlice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i] & 0x7F);
          }

          return ret;
        }

        function latin1Slice(buf, start, end) {
          var ret = '';
          end = Math.min(buf.length, end);

          for (var i = start; i < end; ++i) {
            ret += String.fromCharCode(buf[i]);
          }

          return ret;
        }

        function hexSlice(buf, start, end) {
          var len = buf.length;
          if (!start || start < 0) start = 0;
          if (!end || end < 0 || end > len) end = len;
          var out = '';

          for (var i = start; i < end; ++i) {
            out += toHex(buf[i]);
          }

          return out;
        }

        function utf16leSlice(buf, start, end) {
          var bytes = buf.slice(start, end);
          var res = '';

          for (var i = 0; i < bytes.length; i += 2) {
            res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
          }

          return res;
        }

        Buffer.prototype.slice = function slice(start, end) {
          var len = this.length;
          start = ~~start;
          end = end === undefined ? len : ~~end;

          if (start < 0) {
            start += len;
            if (start < 0) start = 0;
          } else if (start > len) {
            start = len;
          }

          if (end < 0) {
            end += len;
            if (end < 0) end = 0;
          } else if (end > len) {
            end = len;
          }

          if (end < start) end = start;
          var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

          newBuf.__proto__ = Buffer.prototype;
          return newBuf;
        };
        /*
         * Need to make sure that buffer isn't trying to write out of bounds.
         */


        function checkOffset(offset, ext, length) {
          if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
          if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
        }

        Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          return val;
        };

        Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            checkOffset(offset, byteLength, this.length);
          }

          var val = this[offset + --byteLength];
          var mul = 1;

          while (byteLength > 0 && (mul *= 0x100)) {
            val += this[offset + --byteLength] * mul;
          }

          return val;
        };

        Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          return this[offset];
        };

        Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] | this[offset + 1] << 8;
        };

        Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          return this[offset] << 8 | this[offset + 1];
        };

        Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
        };

        Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
        };

        Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var val = this[offset];
          var mul = 1;
          var i = 0;

          while (++i < byteLength && (mul *= 0x100)) {
            val += this[offset + i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;
          if (!noAssert) checkOffset(offset, byteLength, this.length);
          var i = byteLength;
          var mul = 1;
          var val = this[offset + --i];

          while (i > 0 && (mul *= 0x100)) {
            val += this[offset + --i] * mul;
          }

          mul *= 0x80;
          if (val >= mul) val -= Math.pow(2, 8 * byteLength);
          return val;
        };

        Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 1, this.length);
          if (!(this[offset] & 0x80)) return this[offset];
          return (0xff - this[offset] + 1) * -1;
        };

        Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset] | this[offset + 1] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 2, this.length);
          var val = this[offset + 1] | this[offset] << 8;
          return val & 0x8000 ? val | 0xFFFF0000 : val;
        };

        Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
        };

        Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
        };

        Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, true, 23, 4);
        };

        Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 4, this.length);
          return ieee754.read(this, offset, false, 23, 4);
        };

        Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, true, 52, 8);
        };

        Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
          offset = offset >>> 0;
          if (!noAssert) checkOffset(offset, 8, this.length);
          return ieee754.read(this, offset, false, 52, 8);
        };

        function checkInt(buf, value, offset, ext, max, min) {
          if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
        }

        Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var mul = 1;
          var i = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;
          byteLength = byteLength >>> 0;

          if (!noAssert) {
            var maxBytes = Math.pow(2, 8 * byteLength) - 1;
            checkInt(this, value, offset, byteLength, maxBytes, 0);
          }

          var i = byteLength - 1;
          var mul = 1;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            this[offset + i] = value / mul & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset + 3] = value >>> 24;
          this[offset + 2] = value >>> 16;
          this[offset + 1] = value >>> 8;
          this[offset] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = 0;
          var mul = 1;
          var sub = 0;
          this[offset] = value & 0xFF;

          while (++i < byteLength && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            var limit = Math.pow(2, 8 * byteLength - 1);
            checkInt(this, value, offset, byteLength, limit - 1, -limit);
          }

          var i = byteLength - 1;
          var mul = 1;
          var sub = 0;
          this[offset + i] = value & 0xFF;

          while (--i >= 0 && (mul *= 0x100)) {
            if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
              sub = 1;
            }

            this[offset + i] = (value / mul >> 0) - sub & 0xFF;
          }

          return offset + byteLength;
        };

        Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
          if (value < 0) value = 0xff + value + 1;
          this[offset] = value & 0xff;
          return offset + 1;
        };

        Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          return offset + 2;
        };

        Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
          this[offset] = value >>> 8;
          this[offset + 1] = value & 0xff;
          return offset + 2;
        };

        Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          this[offset] = value & 0xff;
          this[offset + 1] = value >>> 8;
          this[offset + 2] = value >>> 16;
          this[offset + 3] = value >>> 24;
          return offset + 4;
        };

        Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
          value = +value;
          offset = offset >>> 0;
          if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
          if (value < 0) value = 0xffffffff + value + 1;
          this[offset] = value >>> 24;
          this[offset + 1] = value >>> 16;
          this[offset + 2] = value >>> 8;
          this[offset + 3] = value & 0xff;
          return offset + 4;
        };

        function checkIEEE754(buf, value, offset, ext, max, min) {
          if (offset + ext > buf.length) throw new RangeError('Index out of range');
          if (offset < 0) throw new RangeError('Index out of range');
        }

        function writeFloat(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
          }

          ieee754.write(buf, value, offset, littleEndian, 23, 4);
          return offset + 4;
        }

        Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
          return writeFloat(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
          return writeFloat(this, value, offset, false, noAssert);
        };

        function writeDouble(buf, value, offset, littleEndian, noAssert) {
          value = +value;
          offset = offset >>> 0;

          if (!noAssert) {
            checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
          }

          ieee754.write(buf, value, offset, littleEndian, 52, 8);
          return offset + 8;
        }

        Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
          return writeDouble(this, value, offset, true, noAssert);
        };

        Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
          return writeDouble(this, value, offset, false, noAssert);
        }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


        Buffer.prototype.copy = function copy(target, targetStart, start, end) {
          if (!start) start = 0;
          if (!end && end !== 0) end = this.length;
          if (targetStart >= target.length) targetStart = target.length;
          if (!targetStart) targetStart = 0;
          if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

          if (end === start) return 0;
          if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

          if (targetStart < 0) {
            throw new RangeError('targetStart out of bounds');
          }

          if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
          if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

          if (end > this.length) end = this.length;

          if (target.length - targetStart < end - start) {
            end = target.length - targetStart + start;
          }

          var len = end - start;
          var i;

          if (this === target && start < targetStart && targetStart < end) {
            // descending copy from end
            for (i = len - 1; i >= 0; --i) {
              target[i + targetStart] = this[i + start];
            }
          } else if (len < 1000) {
            // ascending copy from start
            for (i = 0; i < len; ++i) {
              target[i + targetStart] = this[i + start];
            }
          } else {
            Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
          }

          return len;
        }; // Usage:
        //    buffer.fill(number[, offset[, end]])
        //    buffer.fill(buffer[, offset[, end]])
        //    buffer.fill(string[, offset[, end]][, encoding])


        Buffer.prototype.fill = function fill(val, start, end, encoding) {
          // Handle string cases:
          if (typeof val === 'string') {
            if (typeof start === 'string') {
              encoding = start;
              start = 0;
              end = this.length;
            } else if (typeof end === 'string') {
              encoding = end;
              end = this.length;
            }

            if (val.length === 1) {
              var code = val.charCodeAt(0);

              if (code < 256) {
                val = code;
              }
            }

            if (encoding !== undefined && typeof encoding !== 'string') {
              throw new TypeError('encoding must be a string');
            }

            if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }
          } else if (typeof val === 'number') {
            val = val & 255;
          } // Invalid ranges are not set to a default, so can range check early.


          if (start < 0 || this.length < start || this.length < end) {
            throw new RangeError('Out of range index');
          }

          if (end <= start) {
            return this;
          }

          start = start >>> 0;
          end = end === undefined ? this.length : end >>> 0;
          if (!val) val = 0;
          var i;

          if (typeof val === 'number') {
            for (i = start; i < end; ++i) {
              this[i] = val;
            }
          } else {
            var bytes = Buffer.isBuffer(val) ? val : new Buffer(val, encoding);
            var len = bytes.length;

            for (i = 0; i < end - start; ++i) {
              this[i + start] = bytes[i % len];
            }
          }

          return this;
        }; // HELPER FUNCTIONS
        // ================


        var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

        function base64clean(str) {
          // Node strips out invalid characters like \n and \t from the string, base64-js does not
          str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

          if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

          while (str.length % 4 !== 0) {
            str = str + '=';
          }

          return str;
        }

        function toHex(n) {
          if (n < 16) return '0' + n.toString(16);
          return n.toString(16);
        }

        function utf8ToBytes(string, units) {
          units = units || Infinity;
          var codePoint;
          var length = string.length;
          var leadSurrogate = null;
          var bytes = [];

          for (var i = 0; i < length; ++i) {
            codePoint = string.charCodeAt(i); // is surrogate component

            if (codePoint > 0xD7FF && codePoint < 0xE000) {
              // last char was a lead
              if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                  // unexpected trail
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } else if (i + 1 === length) {
                  // unpaired lead
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  continue;
                } // valid lead


                leadSurrogate = codePoint;
                continue;
              } // 2 leads in a row


              if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
              } // valid surrogate pair


              codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
            } else if (leadSurrogate) {
              // valid bmp char, but last char was a lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            }

            leadSurrogate = null; // encode utf8

            if (codePoint < 0x80) {
              if ((units -= 1) < 0) break;
              bytes.push(codePoint);
            } else if (codePoint < 0x800) {
              if ((units -= 2) < 0) break;
              bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x10000) {
              if ((units -= 3) < 0) break;
              bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else if (codePoint < 0x110000) {
              if ((units -= 4) < 0) break;
              bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
            } else {
              throw new Error('Invalid code point');
            }
          }

          return bytes;
        }

        function asciiToBytes(str) {
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            // Node's code seems to be doing this and not & 0x7F..
            byteArray.push(str.charCodeAt(i) & 0xFF);
          }

          return byteArray;
        }

        function utf16leToBytes(str, units) {
          var c, hi, lo;
          var byteArray = [];

          for (var i = 0; i < str.length; ++i) {
            if ((units -= 2) < 0) break;
            c = str.charCodeAt(i);
            hi = c >> 8;
            lo = c % 256;
            byteArray.push(lo);
            byteArray.push(hi);
          }

          return byteArray;
        }

        function base64ToBytes(str) {
          return base64.toByteArray(base64clean(str));
        }

        function blitBuffer(src, dst, offset, length) {
          for (var i = 0; i < length; ++i) {
            if (i + offset >= dst.length || i >= src.length) break;
            dst[i + offset] = src[i];
          }

          return i;
        } // ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
        // but they should be treated as valid. See: https://github.com/feross/buffer/issues/166


        function isArrayBuffer(obj) {
          return obj instanceof ArrayBuffer || obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' && typeof obj.byteLength === 'number';
        } // Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`


        function isArrayBufferView(obj) {
          return typeof ArrayBuffer.isView === 'function' && ArrayBuffer.isView(obj);
        }

        function numberIsNaN(obj) {
          return obj !== obj; // eslint-disable-line no-self-compare
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 3 */

    /***/
    function (module, exports) {
      'use strict';

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function placeHoldersCount(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // the number of equal signs (place holders)
        // if there are two placeholders, than the two characters before it
        // represent one byte
        // if there is only one, then the three characters before it represent 2 bytes
        // this is just a cheap hack to not do indexOf twice


        return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
      }

      function byteLength(b64) {
        // base64 is 4/3 + up to two characters of the original data
        return b64.length * 3 / 4 - placeHoldersCount(b64);
      }

      function toByteArray(b64) {
        var i, j, l, tmp, placeHolders, arr;
        var len = b64.length;
        placeHolders = placeHoldersCount(b64);
        arr = new Arr(len * 3 / 4 - placeHolders); // if there are placeholders, only get up to the last complete 4 chars

        l = placeHolders > 0 ? len - 4 : len;
        var L = 0;

        for (i = 0, j = 0; i < l; i += 4, j += 3) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[L++] = tmp >> 16 & 0xFF;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        if (placeHolders === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[L++] = tmp & 0xFF;
        } else if (placeHolders === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[L++] = tmp >> 8 & 0xFF;
          arr[L++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var output = '';
        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          output += lookup[tmp >> 2];
          output += lookup[tmp << 4 & 0x3F];
          output += '==';
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          output += lookup[tmp >> 10];
          output += lookup[tmp >> 4 & 0x3F];
          output += lookup[tmp << 2 & 0x3F];
          output += '=';
        }

        parts.push(output);
        return parts.join('');
      }
      /***/

    },
    /* 4 */

    /***/
    function (module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
      /***/

    },
    /* 5 */

    /***/
    function (module, exports) {
      module.exports = function (module) {
        if (!module.webpackPolyfill) {
          module.deprecate = function () {};

          module.paths = []; // module.parent = undefined by default

          module.children = [];
          module.webpackPolyfill = 1;
        }

        return module;
      };
      /***/

    },
    /* 6 */

    /***/
    function (module, exports, __webpack_require__) {
      "use strict";

      var Process = __webpack_require__(7);

      var process = new Process(),
          processProxy = {};

      function defineKey(key) {
        if (processProxy[key]) {
          // Probably a builtin Object property we don't care about.
          return;
        }

        if (typeof process[key] === 'function') {
          processProxy[key] = function () {
            return process[key].apply(process, arguments);
          };
        } else {
          processProxy[key] = process[key];
        }
      }

      for (var key in process) {
        // Don't check if process.hasOwnProperty; we want to also expose objects
        // up the prototype hierarchy.
        defineKey(key);
      } // Special key: Ensure we update public-facing values of stdin/stdout/stderr.


      processProxy.initializeTTYs = function () {
        if (process.stdin === null) {
          process.initializeTTYs();
          processProxy.stdin = process.stdin;
          processProxy.stdout = process.stdout;
          processProxy.stderr = process.stderr;
        }
      };

      process.nextTick(function () {
        processProxy.initializeTTYs();
      });
      module.exports = processProxy;
      /***/
    },
    /* 7 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (__dirname) {
        "use strict";

        var __extends = this && this.__extends || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };

        var events = __webpack_require__(8); // Path depends on process. Avoid a circular reference by dynamically including path when we need it.


        var path = null;

        var Item = function () {
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }

          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };

          return Item;
        }();
        /**
         * Contains a queue of Items for process.nextTick.
         * Inspired by node-process: https://github.com/defunctzombie/node-process
         */


        var NextTickQueue = function () {
          function NextTickQueue() {
            this._queue = [];
            this._draining = false; // Used/assigned by the drainQueue function.

            this._currentQueue = null;
            this._queueIndex = -1;
          }

          NextTickQueue.prototype.push = function (item) {
            var _this = this;

            if (this._queue.push(item) === 1 && !this._draining) {
              setTimeout(function () {
                return _this._drainQueue();
              }, 0);
            }
          };

          NextTickQueue.prototype._cleanUpNextTick = function () {
            this._draining = false;

            if (this._currentQueue && this._currentQueue.length) {
              this._queue = this._currentQueue.concat(this._queue);
            } else {
              this._queueIndex = -1;
            }

            if (this._queue.length) {
              this._drainQueue();
            }
          };

          NextTickQueue.prototype._drainQueue = function () {
            var _this = this;

            if (this._draining) {
              return;
            } // If an Item throws an unhandled exception, this function will clean things up.


            var timeout = setTimeout(function () {
              return _this._cleanUpNextTick();
            });
            this._draining = true;
            var len = this._queue.length;

            while (len) {
              this._currentQueue = this._queue;
              this._queue = [];

              while (++this._queueIndex < len) {
                if (this._currentQueue) {
                  this._currentQueue[this._queueIndex].run();
                }
              }

              this._queueIndex = -1;
              len = this._queue.length;
            }

            this._currentQueue = null;
            this._draining = false;
            clearTimeout(timeout);
          };

          return NextTickQueue;
        }();
        /**
         * Partial implementation of Node's `process` module.
         * We implement the portions that are relevant for the filesystem.
         * @see http://nodejs.org/api/process.html
         * @class
         */


        var Process = function (_super) {
          __extends(Process, _super);

          function Process() {
            _super.apply(this, arguments);

            this.startTime = Date.now();
            this._cwd = '/';
            /**
             * Returns what platform you are running on.
             * @return [String]
             */

            this.platform = 'browser';
            this.argv = [];
            this.execArgv = [];
            this.stdout = null;
            this.stderr = null;
            this.stdin = null;
            this.domain = null;
            this._queue = new NextTickQueue();
            this.execPath = __dirname;
            this.env = {};
            this.exitCode = 0;
            this._gid = 1;
            this._uid = 1;
            this.version = 'v5.0';
            this.versions = {
              http_parser: '0.0',
              node: '5.0',
              v8: '0.0',
              uv: '0.0',
              zlib: '0.0',
              ares: '0.0',
              icu: '0.0',
              modules: '0',
              openssl: '0.0'
            };
            this.config = {
              target_defaults: {
                cflags: [],
                default_configuration: 'Release',
                defines: [],
                include_dirs: [],
                libraries: []
              },
              variables: {
                clang: 0,
                host_arch: 'x32',
                node_install_npm: false,
                node_install_waf: false,
                node_prefix: '',
                node_shared_cares: false,
                node_shared_http_parser: false,
                node_shared_libuv: false,
                node_shared_zlib: false,
                node_shared_v8: false,
                node_use_dtrace: false,
                node_use_etw: false,
                node_use_openssl: false,
                node_shared_openssl: false,
                strict_aliasing: false,
                target_arch: 'x32',
                v8_use_snapshot: false,
                v8_no_strict_aliasing: 0,
                visibility: ''
              }
            };
            this.pid = Math.random() * 1000 | 0;
            this.title = 'node';
            this.arch = 'x32';
            this._mask = 18; // Undefined in main thread. Worker-only.

            this.connected = undefined;
          }
          /**
           * Changes the current working directory.
           *
           * **Note**: BrowserFS does not validate that the directory actually exists.
           *
           * @example Usage example
           *   console.log('Starting directory: ' + process.cwd());
           *   process.chdir('/tmp');
           *   console.log('New directory: ' + process.cwd());
           * @param [String] dir The directory to change to.
           */


          Process.prototype.chdir = function (dir) {
            // XXX: Circular dependency hack.
            if (path === null) {
              path = __webpack_require__(9);
            }

            this._cwd = path.resolve(dir);
          };
          /**
           * Returns the current working directory.
           * @example Usage example
           *   console.log('Current directory: ' + process.cwd());
           * @return [String] The current working directory.
           */


          Process.prototype.cwd = function () {
            return this._cwd;
          };
          /**
           * Number of seconds BrowserFS has been running.
           * @return [Number]
           */


          Process.prototype.uptime = function () {
            return (Date.now() - this.startTime) / 1000 | 0;
          };

          Process.prototype.nextTick = function (fun) {
            var args = [];

            for (var _i = 1; _i < arguments.length; _i++) {
              args[_i - 1] = arguments[_i];
            }

            this._queue.push(new Item(fun, args));
          };

          Process.prototype.abort = function () {
            this.emit('abort');
          };

          Process.prototype.exit = function (code) {
            this.exitCode = code;
            this.emit('exit', [code]);
          };

          Process.prototype.getgid = function () {
            return this._gid;
          };

          Process.prototype.setgid = function (gid) {
            if (typeof gid === 'number') {
              this._gid = gid;
            } else {
              this._gid = 1;
            }
          };

          Process.prototype.getuid = function () {
            return this._uid;
          };

          Process.prototype.setuid = function (uid) {
            if (typeof uid === 'number') {
              this._uid = uid;
            } else {
              this._uid = 1;
            }
          };

          Process.prototype.kill = function (pid, signal) {
            this.emit('kill', [pid, signal]);
          };

          Process.prototype.memoryUsage = function () {
            return {
              rss: 0,
              heapTotal: 0,
              heapUsed: 0
            };
          };

          Process.prototype.umask = function (mask) {
            if (mask === void 0) {
              mask = this._mask;
            }

            var oldMask = this._mask;
            this._mask = mask;
            this.emit('umask', [mask]);
            return oldMask;
          };

          Process.prototype.hrtime = function () {
            var timeinfo;

            if (typeof performance !== 'undefined') {
              timeinfo = performance.now();
            } else if (Date['now']) {
              timeinfo = Date.now();
            } else {
              timeinfo = new Date().getTime();
            }

            var secs = timeinfo / 1000 | 0;
            timeinfo -= secs * 1000;
            timeinfo = timeinfo * 1000000 | 0;
            return [secs, timeinfo];
          };
          /**
           * [BFS only] Initialize the TTY devices.
           */


          Process.prototype.initializeTTYs = function () {
            // Guard against multiple invocations.
            if (this.stdout === null) {
              var TTY = __webpack_require__(10);

              this.stdout = new TTY();
              this.stderr = new TTY();
              this.stdin = new TTY();
            }
          };
          /**
           * Worker-only function; irrelevant here.
           */


          Process.prototype.disconnect = function () {};

          return Process;
        }(events.EventEmitter);

        module.exports = Process;
        /* WEBPACK VAR INJECTION */
      }).call(exports, "/");
      /***/
    },
    /* 8 */

    /***/
    function (module, exports) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      function EventEmitter() {
        this._events = this._events || {};
        this._maxListeners = this._maxListeners || undefined;
      }

      module.exports = EventEmitter; // Backwards-compat with node 0.10.x

      EventEmitter.EventEmitter = EventEmitter;
      EventEmitter.prototype._events = undefined;
      EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
      // added to it. This is a useful default which helps finding memory leaks.

      EventEmitter.defaultMaxListeners = 10; // Obviously not all Emitters should be limited to 10. This function allows
      // that to be increased. Set to zero for unlimited.

      EventEmitter.prototype.setMaxListeners = function (n) {
        if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
        this._maxListeners = n;
        return this;
      };

      EventEmitter.prototype.emit = function (type) {
        var er, handler, len, args, i, listeners;
        if (!this._events) this._events = {}; // If there is no 'error' event listener then throw.

        if (type === 'error') {
          if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
            er = arguments[1];

            if (er instanceof Error) {
              throw er; // Unhandled 'error' event
            } else {
              // At least give some kind of context to the user
              var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
              err.context = er;
              throw err;
            }
          }
        }

        handler = this._events[type];
        if (isUndefined(handler)) return false;

        if (isFunction(handler)) {
          switch (arguments.length) {
            // fast cases
            case 1:
              handler.call(this);
              break;

            case 2:
              handler.call(this, arguments[1]);
              break;

            case 3:
              handler.call(this, arguments[1], arguments[2]);
              break;
            // slower

            default:
              args = Array.prototype.slice.call(arguments, 1);
              handler.apply(this, args);
          }
        } else if (isObject(handler)) {
          args = Array.prototype.slice.call(arguments, 1);
          listeners = handler.slice();
          len = listeners.length;

          for (i = 0; i < len; i++) listeners[i].apply(this, args);
        }

        return true;
      };

      EventEmitter.prototype.addListener = function (type, listener) {
        var m;
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        if (!this._events) this._events = {}; // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".

        if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);
        if (!this._events[type]) // Optimize the case of one listener. Don't need the extra array object.
          this._events[type] = listener;else if (isObject(this._events[type])) // If we've already got an array, just append.
          this._events[type].push(listener);else // Adding the second element, need to change to array.
          this._events[type] = [this._events[type], listener]; // Check for listener leak

        if (isObject(this._events[type]) && !this._events[type].warned) {
          if (!isUndefined(this._maxListeners)) {
            m = this._maxListeners;
          } else {
            m = EventEmitter.defaultMaxListeners;
          }

          if (m && m > 0 && this._events[type].length > m) {
            this._events[type].warned = true;
            console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);

            if (typeof console.trace === 'function') {
              // not supported in IE 10
              console.trace();
            }
          }
        }

        return this;
      };

      EventEmitter.prototype.on = EventEmitter.prototype.addListener;

      EventEmitter.prototype.once = function (type, listener) {
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        var fired = false;

        function g() {
          this.removeListener(type, g);

          if (!fired) {
            fired = true;
            listener.apply(this, arguments);
          }
        }

        g.listener = listener;
        this.on(type, g);
        return this;
      }; // emits a 'removeListener' event iff the listener was removed


      EventEmitter.prototype.removeListener = function (type, listener) {
        var list, position, length, i;
        if (!isFunction(listener)) throw TypeError('listener must be a function');
        if (!this._events || !this._events[type]) return this;
        list = this._events[type];
        length = list.length;
        position = -1;

        if (list === listener || isFunction(list.listener) && list.listener === listener) {
          delete this._events[type];
          if (this._events.removeListener) this.emit('removeListener', type, listener);
        } else if (isObject(list)) {
          for (i = length; i-- > 0;) {
            if (list[i] === listener || list[i].listener && list[i].listener === listener) {
              position = i;
              break;
            }
          }

          if (position < 0) return this;

          if (list.length === 1) {
            list.length = 0;
            delete this._events[type];
          } else {
            list.splice(position, 1);
          }

          if (this._events.removeListener) this.emit('removeListener', type, listener);
        }

        return this;
      };

      EventEmitter.prototype.removeAllListeners = function (type) {
        var key, listeners;
        if (!this._events) return this; // not listening for removeListener, no need to emit

        if (!this._events.removeListener) {
          if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
          return this;
        } // emit removeListener for all listeners on all events


        if (arguments.length === 0) {
          for (key in this._events) {
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
          }

          this.removeAllListeners('removeListener');
          this._events = {};
          return this;
        }

        listeners = this._events[type];

        if (isFunction(listeners)) {
          this.removeListener(type, listeners);
        } else if (listeners) {
          // LIFO order
          while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
        }

        delete this._events[type];
        return this;
      };

      EventEmitter.prototype.listeners = function (type) {
        var ret;
        if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
        return ret;
      };

      EventEmitter.prototype.listenerCount = function (type) {
        if (this._events) {
          var evlistener = this._events[type];
          if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
        }

        return 0;
      };

      EventEmitter.listenerCount = function (emitter, type) {
        return emitter.listenerCount(type);
      };

      function isFunction(arg) {
        return typeof arg === 'function';
      }

      function isNumber(arg) {
        return typeof arg === 'number';
      }

      function isObject(arg) {
        return typeof arg === 'object' && arg !== null;
      }

      function isUndefined(arg) {
        return arg === void 0;
      }
      /***/

    },
    /* 9 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        "use strict"; // Split a filename into [root, dir, basename, ext], unix version
        // 'root' is just a slash, or nothing.

        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;

        function posixSplitPath(filename) {
          var out = splitPathRe.exec(filename);
          out.shift();
          return out;
        }
        /**
         * Emulates Node's `path` module. This module contains utilities for handling and
         * transforming file paths. **All** of these methods perform only string
         * transformations. The file system is not consulted to check whether paths are
         * valid.
         * @see http://nodejs.org/api/path.html
         * @class
         */


        var path = function () {
          function path() {}
          /**
           * Normalize a string path, taking care of '..' and '.' parts.
           *
           * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
           * @example Usage example
           *   path.normalize('/foo/bar//baz/asdf/quux/..')
           *   // returns
           *   '/foo/bar/baz/asdf'
           * @param [String] p The path to normalize.
           * @return [String]
           */


          path.normalize = function (p) {
            // Special case: '' -> '.'
            if (p === '') {
              p = '.';
            } // It's very important to know if the path is relative or not, since it
            // changes how we process .. and reconstruct the split string.


            var absolute = p.charAt(0) === path.sep; // Remove repeated //s

            p = path._removeDuplicateSeps(p); // Try to remove as many '../' as possible, and remove '.' completely.

            var components = p.split(path.sep);
            var goodComponents = [];

            for (var idx = 0; idx < components.length; idx++) {
              var c = components[idx];

              if (c === '.') {
                continue;
              } else if (c === '..' && (absolute || !absolute && goodComponents.length > 0 && goodComponents[0] !== '..')) {
                // In the absolute case: Path is relative to root, so we may pop even if
                // goodComponents is empty (e.g. /../ => /)
                // In the relative case: We're getting rid of a directory that preceded
                // it (e.g. /foo/../bar -> /bar)
                goodComponents.pop();
              } else {
                goodComponents.push(c);
              }
            } // Add in '.' when it's a relative path with no other nonempty components.
            // Possible results: '.' and './' (input: [''] or [])
            // @todo Can probably simplify this logic.


            if (!absolute && goodComponents.length < 2) {
              switch (goodComponents.length) {
                case 1:
                  if (goodComponents[0] === '') {
                    goodComponents.unshift('.');
                  }

                  break;

                default:
                  goodComponents.push('.');
              }
            }

            p = goodComponents.join(path.sep);

            if (absolute && p.charAt(0) !== path.sep) {
              p = path.sep + p;
            }

            return p;
          };
          /**
           * Join all arguments together and normalize the resulting path.
           *
           * Arguments must be strings.
           * @example Usage
           *   path.join('/foo', 'bar', 'baz/asdf', 'quux', '..')
           *   // returns
           *   '/foo/bar/baz/asdf'
           *
           *   path.join('foo', {}, 'bar')
           *   // throws exception
           *   TypeError: Arguments to path.join must be strings
           * @param [String,...] paths Each component of the path
           * @return [String]
           */


          path.join = function () {
            var paths = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              paths[_i - 0] = arguments[_i];
            } // Required: Prune any non-strings from the path. I also prune empty segments
            // so we can do a simple join of the array.


            var processed = [];

            for (var i = 0; i < paths.length; i++) {
              var segment = paths[i];

              if (typeof segment !== 'string') {
                throw new TypeError("Invalid argument type to path.join: " + typeof segment);
              } else if (segment !== '') {
                processed.push(segment);
              }
            }

            return path.normalize(processed.join(path.sep));
          };
          /**
           * Resolves to to an absolute path.
           *
           * If to isn't already absolute from arguments are prepended in right to left
           * order, until an absolute path is found. If after using all from paths still
           * no absolute path is found, the current working directory is used as well.
           * The resulting path is normalized, and trailing slashes are removed unless
           * the path gets resolved to the root directory. Non-string arguments are
           * ignored.
           *
           * Another way to think of it is as a sequence of cd commands in a shell.
           *
           *     path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')
           *
           * Is similar to:
           *
           *     cd foo/bar
           *     cd /tmp/file/
           *     cd ..
           *     cd a/../subfile
           *     pwd
           *
           * The difference is that the different paths don't need to exist and may also
           * be files.
           * @example Usage example
           *   path.resolve('/foo/bar', './baz')
           *   // returns
           *   '/foo/bar/baz'
           *
           *   path.resolve('/foo/bar', '/tmp/file/')
           *   // returns
           *   '/tmp/file'
           *
           *   path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')
           *   // if currently in /home/myself/node, it returns
           *   '/home/myself/node/wwwroot/static_files/gif/image.gif'
           * @param [String,...] paths
           * @return [String]
           */


          path.resolve = function () {
            var paths = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              paths[_i - 0] = arguments[_i];
            } // Monitor for invalid paths, throw out empty paths, and look for the *last*
            // absolute path that we see.


            var processed = [];

            for (var i = 0; i < paths.length; i++) {
              var p = paths[i];

              if (typeof p !== 'string') {
                throw new TypeError("Invalid argument type to path.join: " + typeof p);
              } else if (p !== '') {
                // Remove anything that has occurred before this absolute path, as it
                // doesn't matter.
                if (p.charAt(0) === path.sep) {
                  processed = [];
                }

                processed.push(p);
              }
            } // Special: Remove trailing slash unless it's the root


            var resolved = path.normalize(processed.join(path.sep));

            if (resolved.length > 1 && resolved.charAt(resolved.length - 1) === path.sep) {
              return resolved.substr(0, resolved.length - 1);
            } // Special: If it doesn't start with '/', it's relative and we need to append
            // the current directory.


            if (resolved.charAt(0) !== path.sep) {
              // Remove ./, since we're going to append the current directory.
              if (resolved.charAt(0) === '.' && (resolved.length === 1 || resolved.charAt(1) === path.sep)) {
                resolved = resolved.length === 1 ? '' : resolved.substr(2);
              } // Append the current directory, which *must* be an absolute path.


              var cwd = process.cwd();

              if (resolved !== '') {
                // cwd will never end in a /... unless it's the root.
                resolved = this.normalize(cwd + (cwd !== '/' ? path.sep : '') + resolved);
              } else {
                resolved = cwd;
              }
            }

            return resolved;
          };
          /**
           * Solve the relative path from from to to.
           *
           * At times we have two absolute paths, and we need to derive the relative path
           * from one to the other. This is actually the reverse transform of
           * path.resolve, which means we see that:
           *
           *    path.resolve(from, path.relative(from, to)) == path.resolve(to)
           *
           * @example Usage example
           *   path.relative('C:\\orandea\\test\\aaa', 'C:\\orandea\\impl\\bbb')
           *   // returns
           *   '..\\..\\impl\\bbb'
           *
           *   path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')
           *   // returns
           *   '../../impl/bbb'
           * @param [String] from
           * @param [String] to
           * @return [String]
           */


          path.relative = function (from, to) {
            var i; // Alright. Let's resolve these two to absolute paths and remove any
            // weirdness.

            from = path.resolve(from);
            to = path.resolve(to);
            var fromSegs = from.split(path.sep);
            var toSegs = to.split(path.sep); // Remove the first segment on both, as it's '' (both are absolute paths)

            toSegs.shift();
            fromSegs.shift(); // There are two segments to this path:
            // * Going *up* the directory hierarchy with '..'
            // * Going *down* the directory hierarchy with foo/baz/bat.

            var upCount = 0;
            var downSegs = []; // Figure out how many things in 'from' are shared with 'to'.

            for (i = 0; i < fromSegs.length; i++) {
              var seg = fromSegs[i];

              if (seg === toSegs[i]) {
                continue;
              } // The rest of 'from', including the current element, indicates how many
              // directories we need to go up.


              upCount = fromSegs.length - i;
              break;
            } // The rest of 'to' indicates where we need to change to. We place this
            // outside of the loop, as toSegs.length may be greater than fromSegs.length.


            downSegs = toSegs.slice(i); // Special case: If 'from' is '/'

            if (fromSegs.length === 1 && fromSegs[0] === '') {
              upCount = 0;
            } // upCount can't be greater than the number of fromSegs
            // (cd .. from / is still /)


            if (upCount > fromSegs.length) {
              upCount = fromSegs.length;
            } // Create the final string!


            var rv = '';

            for (i = 0; i < upCount; i++) {
              rv += '../';
            }

            rv += downSegs.join(path.sep); // Special case: Remove trailing '/'. Happens if it's all up and no down.

            if (rv.length > 1 && rv.charAt(rv.length - 1) === path.sep) {
              rv = rv.substr(0, rv.length - 1);
            }

            return rv;
          };
          /**
           * Return the directory name of a path. Similar to the Unix `dirname` command.
           *
           * Note that BrowserFS does not validate if the path is actually a valid
           * directory.
           * @example Usage example
           *   path.dirname('/foo/bar/baz/asdf/quux')
           *   // returns
           *   '/foo/bar/baz/asdf'
           * @param [String] p The path to get the directory name of.
           * @return [String]
           */


          path.dirname = function (p) {
            // We get rid of //, but we don't modify anything else (e.g. any extraneous .
            // and ../ are kept intact)
            p = path._removeDuplicateSeps(p);
            var absolute = p.charAt(0) === path.sep;
            var sections = p.split(path.sep); // Do 1 if it's /foo/bar, 2 if it's /foo/bar/

            if (sections.pop() === '' && sections.length > 0) {
              sections.pop();
            } // # of sections needs to be > 1 if absolute, since the first section is '' for '/'.
            // If not absolute, the first section is the first part of the path, and is OK
            // to return.


            if (sections.length > 1 || sections.length === 1 && !absolute) {
              return sections.join(path.sep);
            } else if (absolute) {
              return path.sep;
            } else {
              return '.';
            }
          };
          /**
           * Return the last portion of a path. Similar to the Unix basename command.
           * @example Usage example
           *   path.basename('/foo/bar/baz/asdf/quux.html')
           *   // returns
           *   'quux.html'
           *
           *   path.basename('/foo/bar/baz/asdf/quux.html', '.html')
           *   // returns
           *   'quux'
           * @param [String] p
           * @param [String?] ext
           * @return [String]
           */


          path.basename = function (p, ext) {
            if (ext === void 0) {
              ext = "";
            } // Special case: Normalize will modify this to '.'


            if (p === '') {
              return p;
            } // Normalize the string first to remove any weirdness.


            p = path.normalize(p); // Get the last part of the string.

            var sections = p.split(path.sep);
            var lastPart = sections[sections.length - 1]; // Special case: If it's empty, then we have a string like so: foo/
            // Meaning, 'foo' is guaranteed to be a directory.

            if (lastPart === '' && sections.length > 1) {
              return sections[sections.length - 2];
            } // Remove the extension, if need be.


            if (ext.length > 0) {
              var lastPartExt = lastPart.substr(lastPart.length - ext.length);

              if (lastPartExt === ext) {
                return lastPart.substr(0, lastPart.length - ext.length);
              }
            }

            return lastPart;
          };
          /**
           * Return the extension of the path, from the last '.' to end of string in the
           * last portion of the path. If there is no '.' in the last portion of the path
           * or the first character of it is '.', then it returns an empty string.
           * @example Usage example
           *   path.extname('index.html')
           *   // returns
           *   '.html'
           *
           *   path.extname('index.')
           *   // returns
           *   '.'
           *
           *   path.extname('index')
           *   // returns
           *   ''
           * @param [String] p
           * @return [String]
           */


          path.extname = function (p) {
            p = path.normalize(p);
            var sections = p.split(path.sep);
            p = sections.pop(); // Special case: foo/file.ext/ should return '.ext'

            if (p === '' && sections.length > 0) {
              p = sections.pop();
            }

            if (p === '..') {
              return '';
            }

            var i = p.lastIndexOf('.');

            if (i === -1 || i === 0) {
              return '';
            }

            return p.substr(i);
          };
          /**
           * Checks if the given path is an absolute path.
           *
           * Despite not being documented, this is a tested part of Node's path API.
           * @param [String] p
           * @return [Boolean] True if the path appears to be an absolute path.
           */


          path.isAbsolute = function (p) {
            return p.length > 0 && p.charAt(0) === path.sep;
          };
          /**
           * Unknown. Undocumented.
           */


          path._makeLong = function (p) {
            return p;
          };
          /**
           * Returns an object from a path string.
           */


          path.parse = function (p) {
            var allParts = posixSplitPath(p);
            return {
              root: allParts[0],
              dir: allParts[0] + allParts[1].slice(0, -1),
              base: allParts[2],
              ext: allParts[3],
              name: allParts[2].slice(0, allParts[2].length - allParts[3].length)
            };
          };

          path.format = function (pathObject) {
            if (pathObject === null || typeof pathObject !== 'object') {
              throw new TypeError("Parameter 'pathObject' must be an object, not " + typeof pathObject);
            }

            var root = pathObject.root || '';

            if (typeof root !== 'string') {
              throw new TypeError("'pathObject.root' must be a string or undefined, not " + typeof pathObject.root);
            }

            var dir = pathObject.dir ? pathObject.dir + path.sep : '';
            var base = pathObject.base || '';
            return dir + base;
          };

          path._removeDuplicateSeps = function (p) {
            p = p.replace(this._replaceRegex, this.sep);
            return p;
          }; // The platform-specific file separator. BrowserFS uses `/`.


          path.sep = '/';
          path._replaceRegex = new RegExp("//+", 'g'); // The platform-specific path delimiter. BrowserFS uses `:`.

          path.delimiter = ':';
          path.posix = path; // XXX: Typing hack. We don't actually support win32.

          path.win32 = path;
          return path;
        }();

        var _ = path;
        module.exports = path;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 10 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        "use strict";

        var __extends = this && this.__extends || function (d, b) {
          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];

          function __() {
            this.constructor = d;
          }

          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };

        var stream = __webpack_require__(11);

        var TTY = function (_super) {
          __extends(TTY, _super);

          function TTY() {
            _super.call(this);

            this.isRaw = false;
            this.columns = 80;
            this.rows = 120;
            this.isTTY = true;
            this._bufferedWrites = [];
            this._waitingForWrites = false;
          }
          /**
           * Toggle raw mode.
           */


          TTY.prototype.setRawMode = function (mode) {
            if (this.isRaw !== mode) {
              this.isRaw = mode; // [BFS] TTY implementations can use this to change their event emitting
              //       patterns.

              this.emit('modeChange');
            }
          };
          /**
           * [BFS] Update the number of columns available on the terminal.
           */


          TTY.prototype.changeColumns = function (columns) {
            if (columns !== this.columns) {
              this.columns = columns; // Resize event.

              this.emit('resize');
            }
          };
          /**
           * [BFS] Update the number of rows available on the terminal.
           */


          TTY.prototype.changeRows = function (rows) {
            if (rows !== this.rows) {
              this.rows = rows; // Resize event.

              this.emit('resize');
            }
          };
          /**
           * Returns 'true' if the given object is a TTY.
           */


          TTY.isatty = function (fd) {
            return fd && fd instanceof TTY;
          };

          TTY.prototype._write = function (chunk, encoding, cb) {
            var error;

            try {
              var data;

              if (typeof chunk === 'string') {
                data = new Buffer(chunk, encoding);
              } else {
                data = chunk;
              }

              this._bufferedWrites.push(data);

              if (this._waitingForWrites) {
                this._read(1024);
              }
            } catch (e) {
              error = e;
            } finally {
              cb(error);
            }
          };

          TTY.prototype._read = function (size) {
            // Size is advisory -- we can ignore it.
            if (this._bufferedWrites.length === 0) {
              this._waitingForWrites = true;
            } else {
              while (this._bufferedWrites.length > 0) {
                this._waitingForWrites = this.push(this._bufferedWrites.shift());

                if (!this._waitingForWrites) {
                  break;
                }
              }
            }
          };

          return TTY;
        }(stream.Duplex);

        module.exports = TTY;
        /* WEBPACK VAR INJECTION */
      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 11 */

    /***/
    function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      module.exports = Stream;

      var EE = __webpack_require__(8).EventEmitter;

      var inherits = __webpack_require__(12);

      inherits(Stream, EE);
      Stream.Readable = __webpack_require__(13);
      Stream.Writable = __webpack_require__(27);
      Stream.Duplex = __webpack_require__(28);
      Stream.Transform = __webpack_require__(29);
      Stream.PassThrough = __webpack_require__(30); // Backwards-compat with node 0.4.x

      Stream.Stream = Stream; // old-style streams.  Note that the pipe method (the only relevant
      // part of this class) is overridden in the Readable class.

      function Stream() {
        EE.call(this);
      }

      Stream.prototype.pipe = function (dest, options) {
        var source = this;

        function ondata(chunk) {
          if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) {
              source.pause();
            }
          }
        }

        source.on('data', ondata);

        function ondrain() {
          if (source.readable && source.resume) {
            source.resume();
          }
        }

        dest.on('drain', ondrain); // If the 'end' option is not supplied, dest.end() will be called when
        // source gets the 'end' or 'close' events.  Only dest.end() once.

        if (!dest._isStdio && (!options || options.end !== false)) {
          source.on('end', onend);
          source.on('close', onclose);
        }

        var didOnEnd = false;

        function onend() {
          if (didOnEnd) return;
          didOnEnd = true;
          dest.end();
        }

        function onclose() {
          if (didOnEnd) return;
          didOnEnd = true;
          if (typeof dest.destroy === 'function') dest.destroy();
        } // don't leave dangling pipes when there are errors.


        function onerror(er) {
          cleanup();

          if (EE.listenerCount(this, 'error') === 0) {
            throw er; // Unhandled stream error in pipe.
          }
        }

        source.on('error', onerror);
        dest.on('error', onerror); // remove all the event listeners that were added.

        function cleanup() {
          source.removeListener('data', ondata);
          dest.removeListener('drain', ondrain);
          source.removeListener('end', onend);
          source.removeListener('close', onclose);
          source.removeListener('error', onerror);
          dest.removeListener('error', onerror);
          source.removeListener('end', cleanup);
          source.removeListener('close', cleanup);
          dest.removeListener('close', cleanup);
        }

        source.on('end', cleanup);
        source.on('close', cleanup);
        dest.on('close', cleanup);
        dest.emit('pipe', source); // Allow for unix-like usage: A.pipe(B).pipe(C)

        return dest;
      };
      /***/

    },
    /* 12 */

    /***/
    function (module, exports) {
      if (typeof Object.create === 'function') {
        // implementation from standard node.js 'util' module
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        };
      } else {
        // old school shim for old browsers
        module.exports = function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;

          var TempCtor = function () {};

          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        };
      }
      /***/

    },
    /* 13 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        var Stream = function () {
          try {
            return __webpack_require__(11); // hack to fix a circular dependency issue when used with browserify
          } catch (_) {}
        }();

        exports = module.exports = __webpack_require__(14);
        exports.Stream = Stream || exports;
        exports.Readable = exports;
        exports.Writable = __webpack_require__(22);
        exports.Duplex = __webpack_require__(21);
        exports.Transform = __webpack_require__(25);
        exports.PassThrough = __webpack_require__(26);

        if (!process.browser && undefined === 'disable' && Stream) {
          module.exports = Stream;
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 14 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        'use strict';

        module.exports = Readable;
        /*<replacement>*/

        var processNextTick = __webpack_require__(15);
        /*</replacement>*/

        /*<replacement>*/


        var isArray = __webpack_require__(16);
        /*</replacement>*/

        /*<replacement>*/


        var Duplex;
        /*</replacement>*/

        Readable.ReadableState = ReadableState;
        /*<replacement>*/

        var EE = __webpack_require__(8).EventEmitter;

        var EElistenerCount = function (emitter, type) {
          return emitter.listeners(type).length;
        };
        /*</replacement>*/

        /*<replacement>*/


        var Stream;

        (function () {
          try {
            Stream = __webpack_require__(11);
          } catch (_) {} finally {
            if (!Stream) Stream = __webpack_require__(8).EventEmitter;
          }
        })();
        /*</replacement>*/


        var Buffer = __webpack_require__(2).Buffer;
        /*<replacement>*/


        var bufferShim = __webpack_require__(17);
        /*</replacement>*/

        /*<replacement>*/


        var util = __webpack_require__(18);

        util.inherits = __webpack_require__(12);
        /*</replacement>*/

        /*<replacement>*/

        var debugUtil = __webpack_require__(19);

        var debug = void 0;

        if (debugUtil && debugUtil.debuglog) {
          debug = debugUtil.debuglog('stream');
        } else {
          debug = function () {};
        }
        /*</replacement>*/


        var BufferList = __webpack_require__(20);

        var StringDecoder;
        util.inherits(Readable, Stream);

        function prependListener(emitter, event, fn) {
          // Sadly this is not cacheable as some libraries bundle their own
          // event emitter implementation with them.
          if (typeof emitter.prependListener === 'function') {
            return emitter.prependListener(event, fn);
          } else {
            // This is a hack to make sure that our error handler is attached before any
            // userland ones.  NEVER DO THIS. This is here only because this code needs
            // to continue to work with older versions of Node.js that do not include
            // the prependListener() method. The goal is to eventually remove this hack.
            if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
          }
        }

        function ReadableState(options, stream) {
          Duplex = Duplex || __webpack_require__(21);
          options = options || {}; // object stream flag. Used to make read(n) ignore n and to
          // make all the buffer merging and length checks go away

          this.objectMode = !!options.objectMode;
          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
          // Note: 0 is a valid value, means "don't call _read preemptively ever"

          var hwm = options.highWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

          this.highWaterMark = ~~this.highWaterMark; // A linked list is used to store data chunks instead of an array because the
          // linked list can remove elements from the beginning faster than
          // array.shift()

          this.buffer = new BufferList();
          this.length = 0;
          this.pipes = null;
          this.pipesCount = 0;
          this.flowing = null;
          this.ended = false;
          this.endEmitted = false;
          this.reading = false; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // whenever we return null, then we set a flag to say
          // that we're awaiting a 'readable' event emission.

          this.needReadable = false;
          this.emittedReadable = false;
          this.readableListening = false;
          this.resumeScheduled = false; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // when piping, we only care about 'readable' events that happen
          // after read()ing all the bytes and not getting any pushback.

          this.ranOut = false; // the number of writers that are awaiting a drain event in .pipe()s

          this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

          this.readingMore = false;
          this.decoder = null;
          this.encoding = null;

          if (options.encoding) {
            if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
            this.decoder = new StringDecoder(options.encoding);
            this.encoding = options.encoding;
          }
        }

        function Readable(options) {
          Duplex = Duplex || __webpack_require__(21);
          if (!(this instanceof Readable)) return new Readable(options);
          this._readableState = new ReadableState(options, this); // legacy

          this.readable = true;
          if (options && typeof options.read === 'function') this._read = options.read;
          Stream.call(this);
        } // Manually shove something into the read() buffer.
        // This returns true if the highWaterMark has not been hit yet,
        // similar to how Writable.write() returns true if you should
        // write() some more.


        Readable.prototype.push = function (chunk, encoding) {
          var state = this._readableState;

          if (!state.objectMode && typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;

            if (encoding !== state.encoding) {
              chunk = bufferShim.from(chunk, encoding);
              encoding = '';
            }
          }

          return readableAddChunk(this, state, chunk, encoding, false);
        }; // Unshift should *always* be something directly out of read()


        Readable.prototype.unshift = function (chunk) {
          var state = this._readableState;
          return readableAddChunk(this, state, chunk, '', true);
        };

        Readable.prototype.isPaused = function () {
          return this._readableState.flowing === false;
        };

        function readableAddChunk(stream, state, chunk, encoding, addToFront) {
          var er = chunkInvalid(state, chunk);

          if (er) {
            stream.emit('error', er);
          } else if (chunk === null) {
            state.reading = false;
            onEofChunk(stream, state);
          } else if (state.objectMode || chunk && chunk.length > 0) {
            if (state.ended && !addToFront) {
              var e = new Error('stream.push() after EOF');
              stream.emit('error', e);
            } else if (state.endEmitted && addToFront) {
              var _e = new Error('stream.unshift() after end event');

              stream.emit('error', _e);
            } else {
              var skipAdd;

              if (state.decoder && !addToFront && !encoding) {
                chunk = state.decoder.write(chunk);
                skipAdd = !state.objectMode && chunk.length === 0;
              }

              if (!addToFront) state.reading = false; // Don't add to the buffer if we've decoded to an empty string chunk and
              // we're not in object mode

              if (!skipAdd) {
                // if we want the data now, just emit it.
                if (state.flowing && state.length === 0 && !state.sync) {
                  stream.emit('data', chunk);
                  stream.read(0);
                } else {
                  // update the buffer info.
                  state.length += state.objectMode ? 1 : chunk.length;
                  if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
                  if (state.needReadable) emitReadable(stream);
                }
              }

              maybeReadMore(stream, state);
            }
          } else if (!addToFront) {
            state.reading = false;
          }

          return needMoreData(state);
        } // if it's past the high water mark, we can push in some more.
        // Also, if we have no data yet, we can stand some
        // more bytes.  This is to work around cases where hwm=0,
        // such as the repl.  Also, if the push() triggered a
        // readable event, and the user called read(largeNumber) such that
        // needReadable was set, then we ought to push more, so that another
        // 'readable' event will be triggered.


        function needMoreData(state) {
          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
        } // backwards compatibility.


        Readable.prototype.setEncoding = function (enc) {
          if (!StringDecoder) StringDecoder = __webpack_require__(24).StringDecoder;
          this._readableState.decoder = new StringDecoder(enc);
          this._readableState.encoding = enc;
          return this;
        }; // Don't raise the hwm > 8MB


        var MAX_HWM = 0x800000;

        function computeNewHighWaterMark(n) {
          if (n >= MAX_HWM) {
            n = MAX_HWM;
          } else {
            // Get the next highest power of 2 to prevent increasing hwm excessively in
            // tiny amounts
            n--;
            n |= n >>> 1;
            n |= n >>> 2;
            n |= n >>> 4;
            n |= n >>> 8;
            n |= n >>> 16;
            n++;
          }

          return n;
        } // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function howMuchToRead(n, state) {
          if (n <= 0 || state.length === 0 && state.ended) return 0;
          if (state.objectMode) return 1;

          if (n !== n) {
            // Only flow one buffer at a time
            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
          } // If we're asking for more than the current hwm, then raise the hwm.


          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
          if (n <= state.length) return n; // Don't have enough

          if (!state.ended) {
            state.needReadable = true;
            return 0;
          }

          return state.length;
        } // you can override either this method, or the async _read(n) below.


        Readable.prototype.read = function (n) {
          debug('read', n);
          n = parseInt(n, 10);
          var state = this._readableState;
          var nOrig = n;
          if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
          // already have a bunch of data in the buffer, then just trigger
          // the 'readable' event and move on.

          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
            debug('read: emitReadable', state.length, state.ended);
            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
            return null;
          }

          n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

          if (n === 0 && state.ended) {
            if (state.length === 0) endReadable(this);
            return null;
          } // All the actual chunk generation logic needs to be
          // *below* the call to _read.  The reason is that in certain
          // synthetic stream cases, such as passthrough streams, _read
          // may be a completely synchronous operation which may change
          // the state of the read buffer, providing enough data when
          // before there was *not* enough.
          //
          // So, the steps are:
          // 1. Figure out what the state of things will be after we do
          // a read from the buffer.
          //
          // 2. If that resulting state will trigger a _read, then call _read.
          // Note that this may be asynchronous, or synchronous.  Yes, it is
          // deeply ugly to write APIs this way, but that still doesn't mean
          // that the Readable class should behave improperly, as streams are
          // designed to be sync/async agnostic.
          // Take note if the _read call is sync or async (ie, if the read call
          // has returned yet), so that we know whether or not it's safe to emit
          // 'readable' etc.
          //
          // 3. Actually pull the requested chunks out of the buffer and return.
          // if we need a readable event, then we need to do some reading.


          var doRead = state.needReadable;
          debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

          if (state.length === 0 || state.length - n < state.highWaterMark) {
            doRead = true;
            debug('length less than watermark', doRead);
          } // however, if we've ended, then there's no point, and if we're already
          // reading, then it's unnecessary.


          if (state.ended || state.reading) {
            doRead = false;
            debug('reading or ended', doRead);
          } else if (doRead) {
            debug('do read');
            state.reading = true;
            state.sync = true; // if the length is currently zero, then we *need* a readable event.

            if (state.length === 0) state.needReadable = true; // call internal read method

            this._read(state.highWaterMark);

            state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
            // and we need to re-evaluate how much data we can return to the user.

            if (!state.reading) n = howMuchToRead(nOrig, state);
          }

          var ret;
          if (n > 0) ret = fromList(n, state);else ret = null;

          if (ret === null) {
            state.needReadable = true;
            n = 0;
          } else {
            state.length -= n;
          }

          if (state.length === 0) {
            // If we have nothing in the buffer, then we want to know
            // as soon as we *do* get something into the buffer.
            if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

            if (nOrig !== n && state.ended) endReadable(this);
          }

          if (ret !== null) this.emit('data', ret);
          return ret;
        };

        function chunkInvalid(state, chunk) {
          var er = null;

          if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          return er;
        }

        function onEofChunk(stream, state) {
          if (state.ended) return;

          if (state.decoder) {
            var chunk = state.decoder.end();

            if (chunk && chunk.length) {
              state.buffer.push(chunk);
              state.length += state.objectMode ? 1 : chunk.length;
            }
          }

          state.ended = true; // emit 'readable' now to make sure it gets picked up.

          emitReadable(stream);
        } // Don't emit readable right away in sync mode, because this can trigger
        // another read() call => stack overflow.  This way, it might trigger
        // a nextTick recursion warning, but that's not so bad.


        function emitReadable(stream) {
          var state = stream._readableState;
          state.needReadable = false;

          if (!state.emittedReadable) {
            debug('emitReadable', state.flowing);
            state.emittedReadable = true;
            if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
          }
        }

        function emitReadable_(stream) {
          debug('emit readable');
          stream.emit('readable');
          flow(stream);
        } // at this point, the user has presumably seen the 'readable' event,
        // and called read() to consume some data.  that may have triggered
        // in turn another _read(n) call, in which case reading = true if
        // it's in progress.
        // However, if we're not ended, or reading, and the length < hwm,
        // then go ahead and try to read some more preemptively.


        function maybeReadMore(stream, state) {
          if (!state.readingMore) {
            state.readingMore = true;
            processNextTick(maybeReadMore_, stream, state);
          }
        }

        function maybeReadMore_(stream, state) {
          var len = state.length;

          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
            debug('maybeReadMore read 0');
            stream.read(0);
            if (len === state.length) // didn't get any data, stop spinning.
              break;else len = state.length;
          }

          state.readingMore = false;
        } // abstract method.  to be overridden in specific implementation classes.
        // call cb(er, data) where data is <= n in length.
        // for virtual (non-string, non-buffer) streams, "length" is somewhat
        // arbitrary, and perhaps not very meaningful.


        Readable.prototype._read = function (n) {
          this.emit('error', new Error('_read() is not implemented'));
        };

        Readable.prototype.pipe = function (dest, pipeOpts) {
          var src = this;
          var state = this._readableState;

          switch (state.pipesCount) {
            case 0:
              state.pipes = dest;
              break;

            case 1:
              state.pipes = [state.pipes, dest];
              break;

            default:
              state.pipes.push(dest);
              break;
          }

          state.pipesCount += 1;
          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
          var endFn = doEnd ? onend : cleanup;
          if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
          dest.on('unpipe', onunpipe);

          function onunpipe(readable) {
            debug('onunpipe');

            if (readable === src) {
              cleanup();
            }
          }

          function onend() {
            debug('onend');
            dest.end();
          } // when the dest drains, it reduces the awaitDrain counter
          // on the source.  This would be more elegant with a .once()
          // handler in flow(), but adding and removing repeatedly is
          // too slow.


          var ondrain = pipeOnDrain(src);
          dest.on('drain', ondrain);
          var cleanedUp = false;

          function cleanup() {
            debug('cleanup'); // cleanup event handlers once the pipe is broken

            dest.removeListener('close', onclose);
            dest.removeListener('finish', onfinish);
            dest.removeListener('drain', ondrain);
            dest.removeListener('error', onerror);
            dest.removeListener('unpipe', onunpipe);
            src.removeListener('end', onend);
            src.removeListener('end', cleanup);
            src.removeListener('data', ondata);
            cleanedUp = true; // if the reader is waiting for a drain event from this
            // specific writer, then it would cause it to never start
            // flowing again.
            // So, if this is awaiting a drain, then we just call it now.
            // If we don't know, then assume that we are waiting for one.

            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
          } // If the user pushes more data while we're writing to dest then we'll end up
          // in ondata again. However, we only want to increase awaitDrain once because
          // dest will only emit one 'drain' event for the multiple writes.
          // => Introduce a guard on increasing awaitDrain.


          var increasedAwaitDrain = false;
          src.on('data', ondata);

          function ondata(chunk) {
            debug('ondata');
            increasedAwaitDrain = false;
            var ret = dest.write(chunk);

            if (false === ret && !increasedAwaitDrain) {
              // If the user unpiped during `dest.write()`, it is possible
              // to get stuck in a permanently paused state if that write
              // also returned false.
              // => Check whether `dest` is still a piping destination.
              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', src._readableState.awaitDrain);
                src._readableState.awaitDrain++;
                increasedAwaitDrain = true;
              }

              src.pause();
            }
          } // if the dest has an error, then stop piping into it.
          // however, don't suppress the throwing behavior for this.


          function onerror(er) {
            debug('onerror', er);
            unpipe();
            dest.removeListener('error', onerror);
            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
          } // Make sure our error handler is attached before userland ones.


          prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

          function onclose() {
            dest.removeListener('finish', onfinish);
            unpipe();
          }

          dest.once('close', onclose);

          function onfinish() {
            debug('onfinish');
            dest.removeListener('close', onclose);
            unpipe();
          }

          dest.once('finish', onfinish);

          function unpipe() {
            debug('unpipe');
            src.unpipe(dest);
          } // tell the dest that it's being piped to


          dest.emit('pipe', src); // start the flow if it hasn't been started already.

          if (!state.flowing) {
            debug('pipe resume');
            src.resume();
          }

          return dest;
        };

        function pipeOnDrain(src) {
          return function () {
            var state = src._readableState;
            debug('pipeOnDrain', state.awaitDrain);
            if (state.awaitDrain) state.awaitDrain--;

            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
              state.flowing = true;
              flow(src);
            }
          };
        }

        Readable.prototype.unpipe = function (dest) {
          var state = this._readableState; // if we're not piping anywhere, then do nothing.

          if (state.pipesCount === 0) return this; // just one destination.  most common case.

          if (state.pipesCount === 1) {
            // passed in one, but it's not the right one.
            if (dest && dest !== state.pipes) return this;
            if (!dest) dest = state.pipes; // got a match.

            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;
            if (dest) dest.emit('unpipe', this);
            return this;
          } // slow case. multiple pipe destinations.


          if (!dest) {
            // remove all.
            var dests = state.pipes;
            var len = state.pipesCount;
            state.pipes = null;
            state.pipesCount = 0;
            state.flowing = false;

            for (var i = 0; i < len; i++) {
              dests[i].emit('unpipe', this);
            }

            return this;
          } // try to find the right one.


          var index = indexOf(state.pipes, dest);
          if (index === -1) return this;
          state.pipes.splice(index, 1);
          state.pipesCount -= 1;
          if (state.pipesCount === 1) state.pipes = state.pipes[0];
          dest.emit('unpipe', this);
          return this;
        }; // set up data events if they are asked for
        // Ensure readable listeners eventually get something


        Readable.prototype.on = function (ev, fn) {
          var res = Stream.prototype.on.call(this, ev, fn);

          if (ev === 'data') {
            // Start flowing on next tick if stream isn't explicitly paused
            if (this._readableState.flowing !== false) this.resume();
          } else if (ev === 'readable') {
            var state = this._readableState;

            if (!state.endEmitted && !state.readableListening) {
              state.readableListening = state.needReadable = true;
              state.emittedReadable = false;

              if (!state.reading) {
                processNextTick(nReadingNextTick, this);
              } else if (state.length) {
                emitReadable(this, state);
              }
            }
          }

          return res;
        };

        Readable.prototype.addListener = Readable.prototype.on;

        function nReadingNextTick(self) {
          debug('readable nexttick read 0');
          self.read(0);
        } // pause() and resume() are remnants of the legacy readable stream API
        // If the user uses them, then switch into old mode.


        Readable.prototype.resume = function () {
          var state = this._readableState;

          if (!state.flowing) {
            debug('resume');
            state.flowing = true;
            resume(this, state);
          }

          return this;
        };

        function resume(stream, state) {
          if (!state.resumeScheduled) {
            state.resumeScheduled = true;
            processNextTick(resume_, stream, state);
          }
        }

        function resume_(stream, state) {
          if (!state.reading) {
            debug('resume read 0');
            stream.read(0);
          }

          state.resumeScheduled = false;
          state.awaitDrain = 0;
          stream.emit('resume');
          flow(stream);
          if (state.flowing && !state.reading) stream.read(0);
        }

        Readable.prototype.pause = function () {
          debug('call pause flowing=%j', this._readableState.flowing);

          if (false !== this._readableState.flowing) {
            debug('pause');
            this._readableState.flowing = false;
            this.emit('pause');
          }

          return this;
        };

        function flow(stream) {
          var state = stream._readableState;
          debug('flow', state.flowing);

          while (state.flowing && stream.read() !== null) {}
        } // wrap an old-style stream as the async data source.
        // This is *not* part of the readable stream interface.
        // It is an ugly unfortunate mess of history.


        Readable.prototype.wrap = function (stream) {
          var state = this._readableState;
          var paused = false;
          var self = this;
          stream.on('end', function () {
            debug('wrapped end');

            if (state.decoder && !state.ended) {
              var chunk = state.decoder.end();
              if (chunk && chunk.length) self.push(chunk);
            }

            self.push(null);
          });
          stream.on('data', function (chunk) {
            debug('wrapped data');
            if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
            var ret = self.push(chunk);

            if (!ret) {
              paused = true;
              stream.pause();
            }
          }); // proxy all the other methods.
          // important when wrapping filters and duplexes.

          for (var i in stream) {
            if (this[i] === undefined && typeof stream[i] === 'function') {
              this[i] = function (method) {
                return function () {
                  return stream[method].apply(stream, arguments);
                };
              }(i);
            }
          } // proxy certain important events.


          var events = ['error', 'close', 'destroy', 'pause', 'resume'];
          forEach(events, function (ev) {
            stream.on(ev, self.emit.bind(self, ev));
          }); // when we try to consume some more bytes, simply unpause the
          // underlying stream.

          self._read = function (n) {
            debug('wrapped _read', n);

            if (paused) {
              paused = false;
              stream.resume();
            }
          };

          return self;
        }; // exposed for testing purposes only.


        Readable._fromList = fromList; // Pluck off n bytes from an array of buffers.
        // Length is the combined lengths of all the buffers in the list.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.

        function fromList(n, state) {
          // nothing buffered
          if (state.length === 0) return null;
          var ret;
          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
            // read it all, truncate the list
            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
            state.buffer.clear();
          } else {
            // read part of list
            ret = fromListPartial(n, state.buffer, state.decoder);
          }
          return ret;
        } // Extracts only enough buffered data to satisfy the amount requested.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function fromListPartial(n, list, hasStrings) {
          var ret;

          if (n < list.head.data.length) {
            // slice is the same for buffers and strings
            ret = list.head.data.slice(0, n);
            list.head.data = list.head.data.slice(n);
          } else if (n === list.head.data.length) {
            // first chunk is a perfect match
            ret = list.shift();
          } else {
            // result spans more than one buffer
            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
          }

          return ret;
        } // Copies a specified amount of characters from the list of buffered data
        // chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBufferString(n, list) {
          var p = list.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        } // Copies a specified amount of bytes from the list of buffered data chunks.
        // This function is designed to be inlinable, so please take care when making
        // changes to the function body.


        function copyFromBuffer(n, list) {
          var ret = bufferShim.allocUnsafe(n);
          var p = list.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) list.head = p.next;else list.head = list.tail = null;
              } else {
                list.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          list.length -= c;
          return ret;
        }

        function endReadable(stream) {
          var state = stream._readableState; // If we get here before consuming all the bytes, then that is a
          // bug in node.  Should never happen.

          if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

          if (!state.endEmitted) {
            state.ended = true;
            processNextTick(endReadableNT, state, stream);
          }
        }

        function endReadableNT(state, stream) {
          // Check that we didn't get one last unshift.
          if (!state.endEmitted && state.length === 0) {
            state.endEmitted = true;
            stream.readable = false;
            stream.emit('end');
          }
        }

        function forEach(xs, f) {
          for (var i = 0, l = xs.length; i < l; i++) {
            f(xs[i], i);
          }
        }

        function indexOf(xs, x) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (xs[i] === x) return i;
          }

          return -1;
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 15 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        'use strict';

        if (!process.version || process.version.indexOf('v0.') === 0 || process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
          module.exports = nextTick;
        } else {
          module.exports = process.nextTick;
        }

        function nextTick(fn, arg1, arg2, arg3) {
          if (typeof fn !== 'function') {
            throw new TypeError('"callback" argument must be a function');
          }

          var len = arguments.length;
          var args, i;

          switch (len) {
            case 0:
            case 1:
              return process.nextTick(fn);

            case 2:
              return process.nextTick(function afterTickOne() {
                fn.call(null, arg1);
              });

            case 3:
              return process.nextTick(function afterTickTwo() {
                fn.call(null, arg1, arg2);
              });

            case 4:
              return process.nextTick(function afterTickThree() {
                fn.call(null, arg1, arg2, arg3);
              });

            default:
              args = new Array(len - 1);
              i = 0;

              while (i < args.length) {
                args[i++] = arguments[i];
              }

              return process.nextTick(function afterTick() {
                fn.apply(null, args);
              });
          }
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 16 */

    /***/
    function (module, exports) {
      var toString = {}.toString;

      module.exports = Array.isArray || function (arr) {
        return toString.call(arr) == '[object Array]';
      };
      /***/

    },
    /* 17 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        'use strict';

        var buffer = __webpack_require__(2);

        var Buffer = buffer.Buffer;
        var SlowBuffer = buffer.SlowBuffer;
        var MAX_LEN = buffer.kMaxLength || 2147483647;

        exports.alloc = function alloc(size, fill, encoding) {
          if (typeof Buffer.alloc === 'function') {
            return Buffer.alloc(size, fill, encoding);
          }

          if (typeof encoding === 'number') {
            throw new TypeError('encoding must not be number');
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size > MAX_LEN) {
            throw new RangeError('size is too large');
          }

          var enc = encoding;
          var _fill = fill;

          if (_fill === undefined) {
            enc = undefined;
            _fill = 0;
          }

          var buf = new Buffer(size);

          if (typeof _fill === 'string') {
            var fillBuf = new Buffer(_fill, enc);
            var flen = fillBuf.length;
            var i = -1;

            while (++i < size) {
              buf[i] = fillBuf[i % flen];
            }
          } else {
            buf.fill(_fill);
          }

          return buf;
        };

        exports.allocUnsafe = function allocUnsafe(size) {
          if (typeof Buffer.allocUnsafe === 'function') {
            return Buffer.allocUnsafe(size);
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size > MAX_LEN) {
            throw new RangeError('size is too large');
          }

          return new Buffer(size);
        };

        exports.from = function from(value, encodingOrOffset, length) {
          if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
            return Buffer.from(value, encodingOrOffset, length);
          }

          if (typeof value === 'number') {
            throw new TypeError('"value" argument must not be a number');
          }

          if (typeof value === 'string') {
            return new Buffer(value, encodingOrOffset);
          }

          if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
            var offset = encodingOrOffset;

            if (arguments.length === 1) {
              return new Buffer(value);
            }

            if (typeof offset === 'undefined') {
              offset = 0;
            }

            var len = length;

            if (typeof len === 'undefined') {
              len = value.byteLength - offset;
            }

            if (offset >= value.byteLength) {
              throw new RangeError('\'offset\' is out of bounds');
            }

            if (len > value.byteLength - offset) {
              throw new RangeError('\'length\' is out of bounds');
            }

            return new Buffer(value.slice(offset, offset + len));
          }

          if (Buffer.isBuffer(value)) {
            var out = new Buffer(value.length);
            value.copy(out, 0, 0, value.length);
            return out;
          }

          if (value) {
            if (Array.isArray(value) || typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer || 'length' in value) {
              return new Buffer(value);
            }

            if (value.type === 'Buffer' && Array.isArray(value.data)) {
              return new Buffer(value.data);
            }
          }

          throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
        };

        exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
          if (typeof Buffer.allocUnsafeSlow === 'function') {
            return Buffer.allocUnsafeSlow(size);
          }

          if (typeof size !== 'number') {
            throw new TypeError('size must be a number');
          }

          if (size >= MAX_LEN) {
            throw new RangeError('size is too large');
          }

          return new SlowBuffer(size);
        };
        /* WEBPACK VAR INJECTION */

      }).call(exports, function () {
        return this;
      }());
      /***/
    },
    /* 18 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (Buffer) {
        // Copyright Joyent, Inc. and other Node contributors.
        //
        // Permission is hereby granted, free of charge, to any person obtaining a
        // copy of this software and associated documentation files (the
        // "Software"), to deal in the Software without restriction, including
        // without limitation the rights to use, copy, modify, merge, publish,
        // distribute, sublicense, and/or sell copies of the Software, and to permit
        // persons to whom the Software is furnished to do so, subject to the
        // following conditions:
        //
        // The above copyright notice and this permission notice shall be included
        // in all copies or substantial portions of the Software.
        //
        // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
        // USE OR OTHER DEALINGS IN THE SOFTWARE.
        // NOTE: These type checking functions intentionally don't use `instanceof`
        // because it is fragile and can be easily faked with `Object.create()`.
        function isArray(arg) {
          if (Array.isArray) {
            return Array.isArray(arg);
          }

          return objectToString(arg) === '[object Array]';
        }

        exports.isArray = isArray;

        function isBoolean(arg) {
          return typeof arg === 'boolean';
        }

        exports.isBoolean = isBoolean;

        function isNull(arg) {
          return arg === null;
        }

        exports.isNull = isNull;

        function isNullOrUndefined(arg) {
          return arg == null;
        }

        exports.isNullOrUndefined = isNullOrUndefined;

        function isNumber(arg) {
          return typeof arg === 'number';
        }

        exports.isNumber = isNumber;

        function isString(arg) {
          return typeof arg === 'string';
        }

        exports.isString = isString;

        function isSymbol(arg) {
          return typeof arg === 'symbol';
        }

        exports.isSymbol = isSymbol;

        function isUndefined(arg) {
          return arg === void 0;
        }

        exports.isUndefined = isUndefined;

        function isRegExp(re) {
          return objectToString(re) === '[object RegExp]';
        }

        exports.isRegExp = isRegExp;

        function isObject(arg) {
          return typeof arg === 'object' && arg !== null;
        }

        exports.isObject = isObject;

        function isDate(d) {
          return objectToString(d) === '[object Date]';
        }

        exports.isDate = isDate;

        function isError(e) {
          return objectToString(e) === '[object Error]' || e instanceof Error;
        }

        exports.isError = isError;

        function isFunction(arg) {
          return typeof arg === 'function';
        }

        exports.isFunction = isFunction;

        function isPrimitive(arg) {
          return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || // ES6 symbol
          typeof arg === 'undefined';
        }

        exports.isPrimitive = isPrimitive;
        exports.isBuffer = Buffer.isBuffer;

        function objectToString(o) {
          return Object.prototype.toString.call(o);
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(1));
      /***/
    },
    /* 19 */

    /***/
    function (module, exports) {
      /* (ignored) */

      /***/
    },
    /* 20 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var Buffer = __webpack_require__(2).Buffer;
      /*<replacement>*/


      var bufferShim = __webpack_require__(17);
      /*</replacement>*/


      module.exports = BufferList;

      function BufferList() {
        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      BufferList.prototype.push = function (v) {
        var entry = {
          data: v,
          next: null
        };
        if (this.length > 0) this.tail.next = entry;else this.head = entry;
        this.tail = entry;
        ++this.length;
      };

      BufferList.prototype.unshift = function (v) {
        var entry = {
          data: v,
          next: this.head
        };
        if (this.length === 0) this.tail = entry;
        this.head = entry;
        ++this.length;
      };

      BufferList.prototype.shift = function () {
        if (this.length === 0) return;
        var ret = this.head.data;
        if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
        --this.length;
        return ret;
      };

      BufferList.prototype.clear = function () {
        this.head = this.tail = null;
        this.length = 0;
      };

      BufferList.prototype.join = function (s) {
        if (this.length === 0) return '';
        var p = this.head;
        var ret = '' + p.data;

        while (p = p.next) {
          ret += s + p.data;
        }

        return ret;
      };

      BufferList.prototype.concat = function (n) {
        if (this.length === 0) return bufferShim.alloc(0);
        if (this.length === 1) return this.head.data;
        var ret = bufferShim.allocUnsafe(n >>> 0);
        var p = this.head;
        var i = 0;

        while (p) {
          p.data.copy(ret, i);
          i += p.data.length;
          p = p.next;
        }

        return ret;
      };
      /***/

    },
    /* 21 */

    /***/
    function (module, exports, __webpack_require__) {
      // a duplex stream is just a stream that is both readable and writable.
      // Since JS doesn't have multiple prototypal inheritance, this class
      // prototypally inherits from Readable, and then parasitically from
      // Writable.
      'use strict';
      /*<replacement>*/

      var objectKeys = Object.keys || function (obj) {
        var keys = [];

        for (var key in obj) {
          keys.push(key);
        }

        return keys;
      };
      /*</replacement>*/


      module.exports = Duplex;
      /*<replacement>*/

      var processNextTick = __webpack_require__(15);
      /*</replacement>*/

      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      var Readable = __webpack_require__(14);

      var Writable = __webpack_require__(22);

      util.inherits(Duplex, Readable);
      var keys = objectKeys(Writable.prototype);

      for (var v = 0; v < keys.length; v++) {
        var method = keys[v];
        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
      }

      function Duplex(options) {
        if (!(this instanceof Duplex)) return new Duplex(options);
        Readable.call(this, options);
        Writable.call(this, options);
        if (options && options.readable === false) this.readable = false;
        if (options && options.writable === false) this.writable = false;
        this.allowHalfOpen = true;
        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
        this.once('end', onend);
      } // the no-half-open enforcer


      function onend() {
        // if we allow half-open state, or if the writable side ended,
        // then we're ok.
        if (this.allowHalfOpen || this._writableState.ended) return; // no more data can be written.
        // But allow more writes to happen in this tick.

        processNextTick(onEndNT, this);
      }

      function onEndNT(self) {
        self.end();
      }

      function forEach(xs, f) {
        for (var i = 0, l = xs.length; i < l; i++) {
          f(xs[i], i);
        }
      }
      /***/

    },
    /* 22 */

    /***/
    function (module, exports, __webpack_require__) {
      /* WEBPACK VAR INJECTION */
      (function (process) {
        // A bit simpler than readable streams.
        // Implement an async ._write(chunk, encoding, cb), and it'll handle all
        // the drain event emission and buffering.
        'use strict';

        module.exports = Writable;
        /*<replacement>*/

        var processNextTick = __webpack_require__(15);
        /*</replacement>*/

        /*<replacement>*/


        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
        /*</replacement>*/

        /*<replacement>*/

        var Duplex;
        /*</replacement>*/

        Writable.WritableState = WritableState;
        /*<replacement>*/

        var util = __webpack_require__(18);

        util.inherits = __webpack_require__(12);
        /*</replacement>*/

        /*<replacement>*/

        var internalUtil = {
          deprecate: __webpack_require__(23)
        };
        /*</replacement>*/

        /*<replacement>*/

        var Stream;

        (function () {
          try {
            Stream = __webpack_require__(11);
          } catch (_) {} finally {
            if (!Stream) Stream = __webpack_require__(8).EventEmitter;
          }
        })();
        /*</replacement>*/


        var Buffer = __webpack_require__(2).Buffer;
        /*<replacement>*/


        var bufferShim = __webpack_require__(17);
        /*</replacement>*/


        util.inherits(Writable, Stream);

        function nop() {}

        function WriteReq(chunk, encoding, cb) {
          this.chunk = chunk;
          this.encoding = encoding;
          this.callback = cb;
          this.next = null;
        }

        function WritableState(options, stream) {
          Duplex = Duplex || __webpack_require__(21);
          options = options || {}; // object stream flag to indicate whether or not this stream
          // contains buffers or objects.

          this.objectMode = !!options.objectMode;
          if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
          // Note: 0 is a valid value, means that we always return false if
          // the entire buffer is not flushed immediately on write()

          var hwm = options.highWaterMark;
          var defaultHwm = this.objectMode ? 16 : 16 * 1024;
          this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm; // cast to ints.

          this.highWaterMark = ~~this.highWaterMark; // drain event flag.

          this.needDrain = false; // at the start of calling end()

          this.ending = false; // when end() has been called, and returned

          this.ended = false; // when 'finish' is emitted

          this.finished = false; // should we decode strings into buffers before passing to _write?
          // this is here so that some node-core streams can optimize string
          // handling at a lower level.

          var noDecode = options.decodeStrings === false;
          this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
          // encoding is 'binary' so we have to make this configurable.
          // Everything else in the universe uses 'utf8', though.

          this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
          // of how much we're waiting to get pushed to some underlying
          // socket or file.

          this.length = 0; // a flag to see when we're in the middle of a write.

          this.writing = false; // when true all writes will be buffered until .uncork() call

          this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
          // or on a later tick.  We set this to true at first, because any
          // actions that shouldn't happen until "later" should generally also
          // not happen before the first write call.

          this.sync = true; // a flag to know if we're processing previously buffered items, which
          // may call the _write() callback in the same tick, so that we don't
          // end up in an overlapped onwrite situation.

          this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

          this.onwrite = function (er) {
            onwrite(stream, er);
          }; // the callback that the user supplies to write(chunk,encoding,cb)


          this.writecb = null; // the amount that is being written when _write is called.

          this.writelen = 0;
          this.bufferedRequest = null;
          this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
          // this must be 0 before 'finish' can be emitted

          this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
          // This is relevant for synchronous Transform streams

          this.prefinished = false; // True if the error was already emitted and should not be thrown again

          this.errorEmitted = false; // count buffered requests

          this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
          // one allocated and free to use, and we maintain at most two

          this.corkedRequestsFree = new CorkedRequest(this);
        }

        WritableState.prototype.getBuffer = function getBuffer() {
          var current = this.bufferedRequest;
          var out = [];

          while (current) {
            out.push(current);
            current = current.next;
          }

          return out;
        };

        (function () {
          try {
            Object.defineProperty(WritableState.prototype, 'buffer', {
              get: internalUtil.deprecate(function () {
                return this.getBuffer();
              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
            });
          } catch (_) {}
        })(); // Test _writableState for inheritance to account for Duplex streams,
        // whose prototype chain only points to Readable.


        var realHasInstance;

        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
          realHasInstance = Function.prototype[Symbol.hasInstance];
          Object.defineProperty(Writable, Symbol.hasInstance, {
            value: function (object) {
              if (realHasInstance.call(this, object)) return true;
              return object && object._writableState instanceof WritableState;
            }
          });
        } else {
          realHasInstance = function (object) {
            return object instanceof this;
          };
        }

        function Writable(options) {
          Duplex = Duplex || __webpack_require__(21); // Writable ctor is applied to Duplexes, too.
          // `realHasInstance` is necessary because using plain `instanceof`
          // would return false, as no `_writableState` property is attached.
          // Trying to use the custom `instanceof` for Writable here will also break the
          // Node.js LazyTransform implementation, which has a non-trivial getter for
          // `_writableState` that would lead to infinite recursion.

          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
            return new Writable(options);
          }

          this._writableState = new WritableState(options, this); // legacy.

          this.writable = true;

          if (options) {
            if (typeof options.write === 'function') this._write = options.write;
            if (typeof options.writev === 'function') this._writev = options.writev;
          }

          Stream.call(this);
        } // Otherwise people can pipe Writable streams, which is just wrong.


        Writable.prototype.pipe = function () {
          this.emit('error', new Error('Cannot pipe, not readable'));
        };

        function writeAfterEnd(stream, cb) {
          var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

          stream.emit('error', er);
          processNextTick(cb, er);
        } // Checks that a user-supplied chunk is valid, especially for the particular
        // mode the stream is in. Currently this means that `null` is never accepted
        // and undefined/non-string values are only allowed in object mode.


        function validChunk(stream, state, chunk, cb) {
          var valid = true;
          var er = false;

          if (chunk === null) {
            er = new TypeError('May not write null values to stream');
          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
            er = new TypeError('Invalid non-string/buffer chunk');
          }

          if (er) {
            stream.emit('error', er);
            processNextTick(cb, er);
            valid = false;
          }

          return valid;
        }

        Writable.prototype.write = function (chunk, encoding, cb) {
          var state = this._writableState;
          var ret = false;
          var isBuf = Buffer.isBuffer(chunk);

          if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
          if (typeof cb !== 'function') cb = nop;
          if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
            state.pendingcb++;
            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
          }
          return ret;
        };

        Writable.prototype.cork = function () {
          var state = this._writableState;
          state.corked++;
        };

        Writable.prototype.uncork = function () {
          var state = this._writableState;

          if (state.corked) {
            state.corked--;
            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
          }
        };

        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
          // node::ParseEncoding() requires lower case.
          if (typeof encoding === 'string') encoding = encoding.toLowerCase();
          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
          this._writableState.defaultEncoding = encoding;
          return this;
        };

        function decodeChunk(state, chunk, encoding) {
          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
            chunk = bufferShim.from(chunk, encoding);
          }

          return chunk;
        } // if we're already writing something, then just put this
        // in the queue, and wait our turn.  Otherwise, call _write
        // If we return false, then we need a drain event, so set that flag.


        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
          if (!isBuf) {
            chunk = decodeChunk(state, chunk, encoding);
            if (Buffer.isBuffer(chunk)) encoding = 'buffer';
          }

          var len = state.objectMode ? 1 : chunk.length;
          state.length += len;
          var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

          if (!ret) state.needDrain = true;

          if (state.writing || state.corked) {
            var last = state.lastBufferedRequest;
            state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);

            if (last) {
              last.next = state.lastBufferedRequest;
            } else {
              state.bufferedRequest = state.lastBufferedRequest;
            }

            state.bufferedRequestCount += 1;
          } else {
            doWrite(stream, state, false, len, chunk, encoding, cb);
          }

          return ret;
        }

        function doWrite(stream, state, writev, len, chunk, encoding, cb) {
          state.writelen = len;
          state.writecb = cb;
          state.writing = true;
          state.sync = true;
          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
          state.sync = false;
        }

        function onwriteError(stream, state, sync, er, cb) {
          --state.pendingcb;
          if (sync) processNextTick(cb, er);else cb(er);
          stream._writableState.errorEmitted = true;
          stream.emit('error', er);
        }

        function onwriteStateUpdate(state) {
          state.writing = false;
          state.writecb = null;
          state.length -= state.writelen;
          state.writelen = 0;
        }

        function onwrite(stream, er) {
          var state = stream._writableState;
          var sync = state.sync;
          var cb = state.writecb;
          onwriteStateUpdate(state);
          if (er) onwriteError(stream, state, sync, er, cb);else {
            // Check if we're actually ready to finish, but don't emit yet
            var finished = needFinish(state);

            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
              clearBuffer(stream, state);
            }

            if (sync) {
              /*<replacement>*/
              asyncWrite(afterWrite, stream, state, finished, cb);
              /*</replacement>*/
            } else {
              afterWrite(stream, state, finished, cb);
            }
          }
        }

        function afterWrite(stream, state, finished, cb) {
          if (!finished) onwriteDrain(stream, state);
          state.pendingcb--;
          cb();
          finishMaybe(stream, state);
        } // Must force callback to be called on nextTick, so that we don't
        // emit 'drain' before the write() consumer gets the 'false' return
        // value, and has a chance to attach a 'drain' listener.


        function onwriteDrain(stream, state) {
          if (state.length === 0 && state.needDrain) {
            state.needDrain = false;
            stream.emit('drain');
          }
        } // if there's something in the buffer waiting, then process it


        function clearBuffer(stream, state) {
          state.bufferProcessing = true;
          var entry = state.bufferedRequest;

          if (stream._writev && entry && entry.next) {
            // Fast case, write everything using _writev()
            var l = state.bufferedRequestCount;
            var buffer = new Array(l);
            var holder = state.corkedRequestsFree;
            holder.entry = entry;
            var count = 0;

            while (entry) {
              buffer[count] = entry;
              entry = entry.next;
              count += 1;
            }

            doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
            // as the hot path ends with doWrite

            state.pendingcb++;
            state.lastBufferedRequest = null;

            if (holder.next) {
              state.corkedRequestsFree = holder.next;
              holder.next = null;
            } else {
              state.corkedRequestsFree = new CorkedRequest(state);
            }
          } else {
            // Slow case, write chunks one-by-one
            while (entry) {
              var chunk = entry.chunk;
              var encoding = entry.encoding;
              var cb = entry.callback;
              var len = state.objectMode ? 1 : chunk.length;
              doWrite(stream, state, false, len, chunk, encoding, cb);
              entry = entry.next; // if we didn't call the onwrite immediately, then
              // it means that we need to wait until it does.
              // also, that means that the chunk and cb are currently
              // being processed, so move the buffer counter past them.

              if (state.writing) {
                break;
              }
            }

            if (entry === null) state.lastBufferedRequest = null;
          }

          state.bufferedRequestCount = 0;
          state.bufferedRequest = entry;
          state.bufferProcessing = false;
        }

        Writable.prototype._write = function (chunk, encoding, cb) {
          cb(new Error('_write() is not implemented'));
        };

        Writable.prototype._writev = null;

        Writable.prototype.end = function (chunk, encoding, cb) {
          var state = this._writableState;

          if (typeof chunk === 'function') {
            cb = chunk;
            chunk = null;
            encoding = null;
          } else if (typeof encoding === 'function') {
            cb = encoding;
            encoding = null;
          }

          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

          if (state.corked) {
            state.corked = 1;
            this.uncork();
          } // ignore unnecessary end() calls.


          if (!state.ending && !state.finished) endWritable(this, state, cb);
        };

        function needFinish(state) {
          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
        }

        function prefinish(stream, state) {
          if (!state.prefinished) {
            state.prefinished = true;
            stream.emit('prefinish');
          }
        }

        function finishMaybe(stream, state) {
          var need = needFinish(state);

          if (need) {
            if (state.pendingcb === 0) {
              prefinish(stream, state);
              state.finished = true;
              stream.emit('finish');
            } else {
              prefinish(stream, state);
            }
          }

          return need;
        }

        function endWritable(stream, state, cb) {
          state.ending = true;
          finishMaybe(stream, state);

          if (cb) {
            if (state.finished) processNextTick(cb);else stream.once('finish', cb);
          }

          state.ended = true;
          stream.writable = false;
        } // It seems a linked list but it is not
        // there will be only 2 of these for each stream


        function CorkedRequest(state) {
          var _this = this;

          this.next = null;
          this.entry = null;

          this.finish = function (err) {
            var entry = _this.entry;
            _this.entry = null;

            while (entry) {
              var cb = entry.callback;
              state.pendingcb--;
              cb(err);
              entry = entry.next;
            }

            if (state.corkedRequestsFree) {
              state.corkedRequestsFree.next = _this;
            } else {
              state.corkedRequestsFree = _this;
            }
          };
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, __webpack_require__(6));
      /***/
    },
    /* 23 */

    /***/
    function (module, exports) {
      /* WEBPACK VAR INJECTION */
      (function (global) {
        /**
         * Module exports.
         */
        module.exports = deprecate;
        /**
         * Mark that a method should not be used.
         * Returns a modified function which warns once by default.
         *
         * If `localStorage.noDeprecation = true` is set, then it is a no-op.
         *
         * If `localStorage.throwDeprecation = true` is set, then deprecated functions
         * will throw an Error when invoked.
         *
         * If `localStorage.traceDeprecation = true` is set, then deprecated functions
         * will invoke `console.trace()` instead of `console.error()`.
         *
         * @param {Function} fn - the function to deprecate
         * @param {String} msg - the string to print to the console when `fn` is invoked
         * @returns {Function} a new "deprecated" version of `fn`
         * @api public
         */

        function deprecate(fn, msg) {
          if (config('noDeprecation')) {
            return fn;
          }

          var warned = false;

          function deprecated() {
            if (!warned) {
              if (config('throwDeprecation')) {
                throw new Error(msg);
              } else if (config('traceDeprecation')) {
                console.trace(msg);
              } else {
                console.warn(msg);
              }

              warned = true;
            }

            return fn.apply(this, arguments);
          }

          return deprecated;
        }
        /**
         * Checks `localStorage` for boolean values for the given `name`.
         *
         * @param {String} name
         * @returns {Boolean}
         * @api private
         */


        function config(name) {
          // accessing global.localStorage can trigger a DOMException in sandboxed iframes
          try {
            if (!global.localStorage) return false;
          } catch (_) {
            return false;
          }

          var val = global.localStorage[name];
          if (null == val) return false;
          return String(val).toLowerCase() === 'true';
        }
        /* WEBPACK VAR INJECTION */

      }).call(exports, function () {
        return this;
      }());
      /***/
    },
    /* 24 */

    /***/
    function (module, exports, __webpack_require__) {
      // Copyright Joyent, Inc. and other Node contributors.
      //
      // Permission is hereby granted, free of charge, to any person obtaining a
      // copy of this software and associated documentation files (the
      // "Software"), to deal in the Software without restriction, including
      // without limitation the rights to use, copy, modify, merge, publish,
      // distribute, sublicense, and/or sell copies of the Software, and to permit
      // persons to whom the Software is furnished to do so, subject to the
      // following conditions:
      //
      // The above copyright notice and this permission notice shall be included
      // in all copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
      // USE OR OTHER DEALINGS IN THE SOFTWARE.
      var Buffer = __webpack_require__(2).Buffer;

      var isBufferEncoding = Buffer.isEncoding || function (encoding) {
        switch (encoding && encoding.toLowerCase()) {
          case 'hex':
          case 'utf8':
          case 'utf-8':
          case 'ascii':
          case 'binary':
          case 'base64':
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
          case 'raw':
            return true;

          default:
            return false;
        }
      };

      function assertEncoding(encoding) {
        if (encoding && !isBufferEncoding(encoding)) {
          throw new Error('Unknown encoding: ' + encoding);
        }
      } // StringDecoder provides an interface for efficiently splitting a series of
      // buffers into a series of JS strings without breaking apart multi-byte
      // characters. CESU-8 is handled as part of the UTF-8 encoding.
      //
      // @TODO Handling all encodings inside a single object makes it very difficult
      // to reason about this code, so it should be split up in the future.
      // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
      // points as used by CESU-8.


      var StringDecoder = exports.StringDecoder = function (encoding) {
        this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
        assertEncoding(encoding);

        switch (this.encoding) {
          case 'utf8':
            // CESU-8 represents each of Surrogate Pair by 3-bytes
            this.surrogateSize = 3;
            break;

          case 'ucs2':
          case 'utf16le':
            // UTF-16 represents each of Surrogate Pair by 2-bytes
            this.surrogateSize = 2;
            this.detectIncompleteChar = utf16DetectIncompleteChar;
            break;

          case 'base64':
            // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
            this.surrogateSize = 3;
            this.detectIncompleteChar = base64DetectIncompleteChar;
            break;

          default:
            this.write = passThroughWrite;
            return;
        } // Enough space to store all bytes of a single character. UTF-8 needs 4
        // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).


        this.charBuffer = new Buffer(6); // Number of bytes received for the current incomplete multi-byte character.

        this.charReceived = 0; // Number of bytes expected for the current incomplete multi-byte character.

        this.charLength = 0;
      }; // write decodes the given buffer and returns it as JS string that is
      // guaranteed to not contain any partial multi-byte characters. Any partial
      // character found at the end of the buffer is buffered up, and will be
      // returned when calling write again with the remaining bytes.
      //
      // Note: Converting a Buffer containing an orphan surrogate to a String
      // currently works, but converting a String to a Buffer (via `new Buffer`, or
      // Buffer#write) will replace incomplete surrogates with the unicode
      // replacement character. See https://codereview.chromium.org/121173009/ .


      StringDecoder.prototype.write = function (buffer) {
        var charStr = ''; // if our last write ended with an incomplete multibyte character

        while (this.charLength) {
          // determine how many remaining bytes this buffer has to offer for this char
          var available = buffer.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : buffer.length; // add the new bytes to the char buffer

          buffer.copy(this.charBuffer, this.charReceived, 0, available);
          this.charReceived += available;

          if (this.charReceived < this.charLength) {
            // still not enough chars in this buffer? wait for more ...
            return '';
          } // remove bytes belonging to the current character from the buffer


          buffer = buffer.slice(available, buffer.length); // get the character that was split

          charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

          var charCode = charStr.charCodeAt(charStr.length - 1);

          if (charCode >= 0xD800 && charCode <= 0xDBFF) {
            this.charLength += this.surrogateSize;
            charStr = '';
            continue;
          }

          this.charReceived = this.charLength = 0; // if there are no more bytes in this buffer, just emit our char

          if (buffer.length === 0) {
            return charStr;
          }

          break;
        } // determine and set charLength / charReceived


        this.detectIncompleteChar(buffer);
        var end = buffer.length;

        if (this.charLength) {
          // buffer the incomplete character bytes we got
          buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
          end -= this.charReceived;
        }

        charStr += buffer.toString(this.encoding, 0, end);
        var end = charStr.length - 1;
        var charCode = charStr.charCodeAt(end); // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character

        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          var size = this.surrogateSize;
          this.charLength += size;
          this.charReceived += size;
          this.charBuffer.copy(this.charBuffer, size, 0, size);
          buffer.copy(this.charBuffer, 0, 0, size);
          return charStr.substring(0, end);
        } // or just emit the charStr


        return charStr;
      }; // detectIncompleteChar determines if there is an incomplete UTF-8 character at
      // the end of the given buffer. If so, it sets this.charLength to the byte
      // length that character, and sets this.charReceived to the number of bytes
      // that are available for this character.


      StringDecoder.prototype.detectIncompleteChar = function (buffer) {
        // determine how many bytes we have to check at the end of this buffer
        var i = buffer.length >= 3 ? 3 : buffer.length; // Figure out if one of the last i bytes of our buffer announces an
        // incomplete char.

        for (; i > 0; i--) {
          var c = buffer[buffer.length - i]; // See http://en.wikipedia.org/wiki/UTF-8#Description
          // 110XXXXX

          if (i == 1 && c >> 5 == 0x06) {
            this.charLength = 2;
            break;
          } // 1110XXXX


          if (i <= 2 && c >> 4 == 0x0E) {
            this.charLength = 3;
            break;
          } // 11110XXX


          if (i <= 3 && c >> 3 == 0x1E) {
            this.charLength = 4;
            break;
          }
        }

        this.charReceived = i;
      };

      StringDecoder.prototype.end = function (buffer) {
        var res = '';
        if (buffer && buffer.length) res = this.write(buffer);

        if (this.charReceived) {
          var cr = this.charReceived;
          var buf = this.charBuffer;
          var enc = this.encoding;
          res += buf.slice(0, cr).toString(enc);
        }

        return res;
      };

      function passThroughWrite(buffer) {
        return buffer.toString(this.encoding);
      }

      function utf16DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 2;
        this.charLength = this.charReceived ? 2 : 0;
      }

      function base64DetectIncompleteChar(buffer) {
        this.charReceived = buffer.length % 3;
        this.charLength = this.charReceived ? 3 : 0;
      }
      /***/

    },
    /* 25 */

    /***/
    function (module, exports, __webpack_require__) {
      // a transform stream is a readable/writable stream where you do
      // something with the data.  Sometimes it's called a "filter",
      // but that's not a great name for it, since that implies a thing where
      // some bits pass through, and others are simply ignored.  (That would
      // be a valid example of a transform, of course.)
      //
      // While the output is causally related to the input, it's not a
      // necessarily symmetric or synchronous transformation.  For example,
      // a zlib stream might take multiple plain-text writes(), and then
      // emit a single compressed chunk some time in the future.
      //
      // Here's how this works:
      //
      // The Transform stream has all the aspects of the readable and writable
      // stream classes.  When you write(chunk), that calls _write(chunk,cb)
      // internally, and returns false if there's a lot of pending writes
      // buffered up.  When you call read(), that calls _read(n) until
      // there's enough pending readable data buffered up.
      //
      // In a transform stream, the written data is placed in a buffer.  When
      // _read(n) is called, it transforms the queued up data, calling the
      // buffered _write cb's as it consumes chunks.  If consuming a single
      // written chunk would result in multiple output chunks, then the first
      // outputted bit calls the readcb, and subsequent chunks just go into
      // the read buffer, and will cause it to emit 'readable' if necessary.
      //
      // This way, back-pressure is actually determined by the reading side,
      // since _read has to be called to start processing a new chunk.  However,
      // a pathological inflate type of transform can cause excessive buffering
      // here.  For example, imagine a stream where every byte of input is
      // interpreted as an integer from 0-255, and then results in that many
      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
      // 1kb of data being output.  In this case, you could write a very small
      // amount of input, and end up with a very large amount of output.  In
      // such a pathological inflating mechanism, there'd be no way to tell
      // the system to stop doing the transform.  A single 4MB write could
      // cause the system to run out of memory.
      //
      // However, even in such a pathological case, only a single written chunk
      // would be consumed, and then the rest would wait (un-transformed) until
      // the results of the previous transformed chunk were consumed.
      'use strict';

      module.exports = Transform;

      var Duplex = __webpack_require__(21);
      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      util.inherits(Transform, Duplex);

      function TransformState(stream) {
        this.afterTransform = function (er, data) {
          return afterTransform(stream, er, data);
        };

        this.needTransform = false;
        this.transforming = false;
        this.writecb = null;
        this.writechunk = null;
        this.writeencoding = null;
      }

      function afterTransform(stream, er, data) {
        var ts = stream._transformState;
        ts.transforming = false;
        var cb = ts.writecb;
        if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
        ts.writechunk = null;
        ts.writecb = null;
        if (data !== null && data !== undefined) stream.push(data);
        cb(er);
        var rs = stream._readableState;
        rs.reading = false;

        if (rs.needReadable || rs.length < rs.highWaterMark) {
          stream._read(rs.highWaterMark);
        }
      }

      function Transform(options) {
        if (!(this instanceof Transform)) return new Transform(options);
        Duplex.call(this, options);
        this._transformState = new TransformState(this);
        var stream = this; // start out asking for a readable event once data is transformed.

        this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
        // that Readable wants before the first _read call, so unset the
        // sync guard flag.

        this._readableState.sync = false;

        if (options) {
          if (typeof options.transform === 'function') this._transform = options.transform;
          if (typeof options.flush === 'function') this._flush = options.flush;
        } // When the writable side finishes, then flush out anything remaining.


        this.once('prefinish', function () {
          if (typeof this._flush === 'function') this._flush(function (er, data) {
            done(stream, er, data);
          });else done(stream);
        });
      }

      Transform.prototype.push = function (chunk, encoding) {
        this._transformState.needTransform = false;
        return Duplex.prototype.push.call(this, chunk, encoding);
      }; // This is the part where you do stuff!
      // override this function in implementation classes.
      // 'chunk' is an input chunk.
      //
      // Call `push(newChunk)` to pass along transformed output
      // to the readable side.  You may call 'push' zero or more times.
      //
      // Call `cb(err)` when you are done with this chunk.  If you pass
      // an error, then that'll put the hurt on the whole operation.  If you
      // never call cb(), then you'll never get another chunk.


      Transform.prototype._transform = function (chunk, encoding, cb) {
        throw new Error('_transform() is not implemented');
      };

      Transform.prototype._write = function (chunk, encoding, cb) {
        var ts = this._transformState;
        ts.writecb = cb;
        ts.writechunk = chunk;
        ts.writeencoding = encoding;

        if (!ts.transforming) {
          var rs = this._readableState;
          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
        }
      }; // Doesn't matter what the args are here.
      // _transform does all the work.
      // That we got here means that the readable side wants more data.


      Transform.prototype._read = function (n) {
        var ts = this._transformState;

        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
          ts.transforming = true;

          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
        } else {
          // mark that we need a transform, so that any data that comes in
          // will get processed, now that we've asked for it.
          ts.needTransform = true;
        }
      };

      function done(stream, er, data) {
        if (er) return stream.emit('error', er);
        if (data !== null && data !== undefined) stream.push(data); // if there's nothing in the write buffer, then that means
        // that nothing more will ever be provided

        var ws = stream._writableState;
        var ts = stream._transformState;
        if (ws.length) throw new Error('Calling transform done when ws.length != 0');
        if (ts.transforming) throw new Error('Calling transform done when still transforming');
        return stream.push(null);
      }
      /***/

    },
    /* 26 */

    /***/
    function (module, exports, __webpack_require__) {
      // a passthrough stream.
      // basically just the most minimal sort of Transform stream.
      // Every written chunk gets output as-is.
      'use strict';

      module.exports = PassThrough;

      var Transform = __webpack_require__(25);
      /*<replacement>*/


      var util = __webpack_require__(18);

      util.inherits = __webpack_require__(12);
      /*</replacement>*/

      util.inherits(PassThrough, Transform);

      function PassThrough(options) {
        if (!(this instanceof PassThrough)) return new PassThrough(options);
        Transform.call(this, options);
      }

      PassThrough.prototype._transform = function (chunk, encoding, cb) {
        cb(null, chunk);
      };
      /***/

    },
    /* 27 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(22);
      /***/
    },
    /* 28 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(21);
      /***/
    },
    /* 29 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(25);
      /***/
    },
    /* 30 */

    /***/
    function (module, exports, __webpack_require__) {
      module.exports = __webpack_require__(26);
      /***/
    },
    /* 31 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var zlib_inflate = __webpack_require__(32);

      var utils = __webpack_require__(33);

      var strings = __webpack_require__(38);

      var c = __webpack_require__(39);

      var msg = __webpack_require__(40);

      var ZStream = __webpack_require__(41);

      var GZheader = __webpack_require__(42);

      var toString = Object.prototype.toString;
      /**
       * class Inflate
       *
       * Generic JS-style wrapper for zlib calls. If you don't need
       * streaming behaviour - use more simple functions: [[inflate]]
       * and [[inflateRaw]].
       **/

      /* internal
       * inflate.chunks -> Array
       *
       * Chunks of output data, if [[Inflate#onData]] not overriden.
       **/

      /**
       * Inflate.result -> Uint8Array|Array|String
       *
       * Uncompressed result, generated by default [[Inflate#onData]]
       * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
       * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you
       * push a chunk with explicit flush (call [[Inflate#push]] with
       * `Z_SYNC_FLUSH` param).
       **/

      /**
       * Inflate.err -> Number
       *
       * Error code after inflate finished. 0 (Z_OK) on success.
       * Should be checked if broken data possible.
       **/

      /**
       * Inflate.msg -> String
       *
       * Error message, if [[Inflate.err]] != 0
       **/

      /**
       * new Inflate(options)
       * - options (Object): zlib inflate options.
       *
       * Creates new inflator instance with specified params. Throws exception
       * on bad params. Supported options:
       *
       * - `windowBits`
       * - `dictionary`
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information on these.
       *
       * Additional options, for internal needs:
       *
       * - `chunkSize` - size of generated data chunks (16K by default)
       * - `raw` (Boolean) - do raw inflate
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       * By default, when no options set, autodetect deflate/gzip data format via
       * wrapper header.
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])
       *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);
       *
       * var inflate = new pako.Inflate({ level: 3});
       *
       * inflate.push(chunk1, false);
       * inflate.push(chunk2, true);  // true -> last chunk
       *
       * if (inflate.err) { throw new Error(inflate.err); }
       *
       * console.log(inflate.result);
       * ```
       **/

      function Inflate(options) {
        if (!(this instanceof Inflate)) return new Inflate(options);
        this.options = utils.assign({
          chunkSize: 16384,
          windowBits: 0,
          to: ''
        }, options || {});
        var opt = this.options; // Force window size for `raw` data, if not set directly,
        // because we have no header for autodetect.

        if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
          opt.windowBits = -opt.windowBits;

          if (opt.windowBits === 0) {
            opt.windowBits = -15;
          }
        } // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate


        if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
          opt.windowBits += 32;
        } // Gzip header has no info about windows size, we can do autodetect only
        // for deflate. So, if window size not set, force it to max when gzip possible


        if (opt.windowBits > 15 && opt.windowBits < 48) {
          // bit 3 (16) -> gzipped data
          // bit 4 (32) -> autodetect gzip/deflate
          if ((opt.windowBits & 15) === 0) {
            opt.windowBits |= 15;
          }
        }

        this.err = 0; // error code, if happens (0 = Z_OK)

        this.msg = ''; // error message

        this.ended = false; // used to avoid multiple onEnd() calls

        this.chunks = []; // chunks of compressed data

        this.strm = new ZStream();
        this.strm.avail_out = 0;
        var status = zlib_inflate.inflateInit2(this.strm, opt.windowBits);

        if (status !== c.Z_OK) {
          throw new Error(msg[status]);
        }

        this.header = new GZheader();
        zlib_inflate.inflateGetHeader(this.strm, this.header);
      }
      /**
       * Inflate#push(data[, mode]) -> Boolean
       * - data (Uint8Array|Array|ArrayBuffer|String): input data
       * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
       *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.
       *
       * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
       * new output chunks. Returns `true` on success. The last data block must have
       * mode Z_FINISH (or `true`). That will flush internal pending buffers and call
       * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you
       * can use mode Z_SYNC_FLUSH, keeping the decompression context.
       *
       * On fail call [[Inflate#onEnd]] with error code and return false.
       *
       * We strongly recommend to use `Uint8Array` on input for best speed (output
       * format is detected automatically). Also, don't skip last param and always
       * use the same type in your code (boolean or number). That will improve JS speed.
       *
       * For regular `Array`-s make sure all elements are [0..255].
       *
       * ##### Example
       *
       * ```javascript
       * push(chunk, false); // push one of data chunks
       * ...
       * push(chunk, true);  // push last chunk
       * ```
       **/


      Inflate.prototype.push = function (data, mode) {
        var strm = this.strm;
        var chunkSize = this.options.chunkSize;
        var dictionary = this.options.dictionary;

        var status, _mode;

        var next_out_utf8, tail, utf8str;
        var dict; // Flag to properly process Z_BUF_ERROR on testing inflate call
        // when we check that all output data was flushed.

        var allowBufError = false;

        if (this.ended) {
          return false;
        }

        _mode = mode === ~~mode ? mode : mode === true ? c.Z_FINISH : c.Z_NO_FLUSH; // Convert data if needed

        if (typeof data === 'string') {
          // Only binary strings can be decompressed on practice
          strm.input = strings.binstring2buf(data);
        } else if (toString.call(data) === '[object ArrayBuffer]') {
          strm.input = new Uint8Array(data);
        } else {
          strm.input = data;
        }

        strm.next_in = 0;
        strm.avail_in = strm.input.length;

        do {
          if (strm.avail_out === 0) {
            strm.output = new utils.Buf8(chunkSize);
            strm.next_out = 0;
            strm.avail_out = chunkSize;
          }

          status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);
          /* no bad return value */

          if (status === c.Z_NEED_DICT && dictionary) {
            // Convert data if needed
            if (typeof dictionary === 'string') {
              dict = strings.string2buf(dictionary);
            } else if (toString.call(dictionary) === '[object ArrayBuffer]') {
              dict = new Uint8Array(dictionary);
            } else {
              dict = dictionary;
            }

            status = zlib_inflate.inflateSetDictionary(this.strm, dict);
          }

          if (status === c.Z_BUF_ERROR && allowBufError === true) {
            status = c.Z_OK;
            allowBufError = false;
          }

          if (status !== c.Z_STREAM_END && status !== c.Z_OK) {
            this.onEnd(status);
            this.ended = true;
            return false;
          }

          if (strm.next_out) {
            if (strm.avail_out === 0 || status === c.Z_STREAM_END || strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH)) {
              if (this.options.to === 'string') {
                next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
                tail = strm.next_out - next_out_utf8;
                utf8str = strings.buf2string(strm.output, next_out_utf8); // move tail

                strm.next_out = tail;
                strm.avail_out = chunkSize - tail;

                if (tail) {
                  utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);
                }

                this.onData(utf8str);
              } else {
                this.onData(utils.shrinkBuf(strm.output, strm.next_out));
              }
            }
          } // When no more input data, we should check that internal inflate buffers
          // are flushed. The only way to do it when avail_out = 0 - run one more
          // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.
          // Here we set flag to process this error properly.
          //
          // NOTE. Deflate does not return error in this case and does not needs such
          // logic.


          if (strm.avail_in === 0 && strm.avail_out === 0) {
            allowBufError = true;
          }
        } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);

        if (status === c.Z_STREAM_END) {
          _mode = c.Z_FINISH;
        } // Finalize on the last chunk.


        if (_mode === c.Z_FINISH) {
          status = zlib_inflate.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === c.Z_OK;
        } // callback interim results if Z_SYNC_FLUSH.


        if (_mode === c.Z_SYNC_FLUSH) {
          this.onEnd(c.Z_OK);
          strm.avail_out = 0;
          return true;
        }

        return true;
      };
      /**
       * Inflate#onData(chunk) -> Void
       * - chunk (Uint8Array|Array|String): ouput data. Type of array depends
       *   on js engine support. When string output requested, each chunk
       *   will be string.
       *
       * By default, stores data blocks in `chunks[]` property and glue
       * those in `onEnd`. Override this handler, if you need another behaviour.
       **/


      Inflate.prototype.onData = function (chunk) {
        this.chunks.push(chunk);
      };
      /**
       * Inflate#onEnd(status) -> Void
       * - status (Number): inflate status. 0 (Z_OK) on success,
       *   other if not.
       *
       * Called either after you tell inflate that the input stream is
       * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)
       * or if an error happened. By default - join collected chunks,
       * free memory and fill `results` / `err` properties.
       **/


      Inflate.prototype.onEnd = function (status) {
        // On success - join
        if (status === c.Z_OK) {
          if (this.options.to === 'string') {
            // Glue & convert here, until we teach pako to send
            // utf8 alligned strings to onData
            this.result = this.chunks.join('');
          } else {
            this.result = utils.flattenChunks(this.chunks);
          }
        }

        this.chunks = [];
        this.err = status;
        this.msg = this.strm.msg;
      };
      /**
       * inflate(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Decompress `data` with inflate/ungzip and `options`. Autodetect
       * format via wrapper header by default. That's why we don't provide
       * separate `ungzip` method.
       *
       * Supported options are:
       *
       * - windowBits
       *
       * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
       * for more information.
       *
       * Sugar (options):
       *
       * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
       *   negative windowBits implicitly.
       * - `to` (String) - if equal to 'string', then result will be converted
       *   from utf8 to utf16 (javascript) string. When string output requested,
       *   chunk length can differ from `chunkSize`, depending on content.
       *
       *
       * ##### Example:
       *
       * ```javascript
       * var pako = require('pako')
       *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])
       *   , output;
       *
       * try {
       *   output = pako.inflate(input);
       * } catch (err)
       *   console.log(err);
       * }
       * ```
       **/


      function inflate(input, options) {
        var inflator = new Inflate(options);
        inflator.push(input, true); // That will never happens, if you don't cheat with options :)

        if (inflator.err) {
          throw inflator.msg || msg[inflator.err];
        }

        return inflator.result;
      }
      /**
       * inflateRaw(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * The same as [[inflate]], but creates raw data, without wrapper
       * (header and adler32 crc).
       **/


      function inflateRaw(input, options) {
        options = options || {};
        options.raw = true;
        return inflate(input, options);
      }
      /**
       * ungzip(data[, options]) -> Uint8Array|Array|String
       * - data (Uint8Array|Array|String): input data to decompress.
       * - options (Object): zlib inflate options.
       *
       * Just shortcut to [[inflate]], because it autodetects format
       * by header.content. Done for convenience.
       **/


      exports.Inflate = Inflate;
      exports.inflate = inflate;
      exports.inflateRaw = inflateRaw;
      exports.ungzip = inflate;
      /***/
    },
    /* 32 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var utils = __webpack_require__(33);

      var adler32 = __webpack_require__(34);

      var crc32 = __webpack_require__(35);

      var inflate_fast = __webpack_require__(36);

      var inflate_table = __webpack_require__(37);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      /* Public constants ==========================================================*/

      /* ===========================================================================*/

      /* Allowed flush values; see deflate() and inflate() below for details */
      //var Z_NO_FLUSH      = 0;
      //var Z_PARTIAL_FLUSH = 1;
      //var Z_SYNC_FLUSH    = 2;
      //var Z_FULL_FLUSH    = 3;

      var Z_FINISH = 4;
      var Z_BLOCK = 5;
      var Z_TREES = 6;
      /* Return codes for the compression/decompression functions. Negative values
       * are errors, positive values are used for special but normal events.
       */

      var Z_OK = 0;
      var Z_STREAM_END = 1;
      var Z_NEED_DICT = 2; //var Z_ERRNO         = -1;

      var Z_STREAM_ERROR = -2;
      var Z_DATA_ERROR = -3;
      var Z_MEM_ERROR = -4;
      var Z_BUF_ERROR = -5; //var Z_VERSION_ERROR = -6;

      /* The deflate compression method */

      var Z_DEFLATED = 8;
      /* STATES ====================================================================*/

      /* ===========================================================================*/

      var HEAD = 1;
      /* i: waiting for magic header */

      var FLAGS = 2;
      /* i: waiting for method and flags (gzip) */

      var TIME = 3;
      /* i: waiting for modification time (gzip) */

      var OS = 4;
      /* i: waiting for extra flags and operating system (gzip) */

      var EXLEN = 5;
      /* i: waiting for extra length (gzip) */

      var EXTRA = 6;
      /* i: waiting for extra bytes (gzip) */

      var NAME = 7;
      /* i: waiting for end of file name (gzip) */

      var COMMENT = 8;
      /* i: waiting for end of comment (gzip) */

      var HCRC = 9;
      /* i: waiting for header crc (gzip) */

      var DICTID = 10;
      /* i: waiting for dictionary check value */

      var DICT = 11;
      /* waiting for inflateSetDictionary() call */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      var TYPEDO = 13;
      /* i: same, but skip check to exit inflate on new block */

      var STORED = 14;
      /* i: waiting for stored size (length and complement) */

      var COPY_ = 15;
      /* i/o: same as COPY below, but only first time in */

      var COPY = 16;
      /* i/o: waiting for input or output to copy stored block */

      var TABLE = 17;
      /* i: waiting for dynamic block table lengths */

      var LENLENS = 18;
      /* i: waiting for code length code lengths */

      var CODELENS = 19;
      /* i: waiting for length/lit and distance code lengths */

      var LEN_ = 20;
      /* i: same as LEN below, but only first time in */

      var LEN = 21;
      /* i: waiting for length/lit/eob code */

      var LENEXT = 22;
      /* i: waiting for length extra bits */

      var DIST = 23;
      /* i: waiting for distance code */

      var DISTEXT = 24;
      /* i: waiting for distance extra bits */

      var MATCH = 25;
      /* o: waiting for output space to copy string */

      var LIT = 26;
      /* o: waiting for output space to write literal */

      var CHECK = 27;
      /* i: waiting for 32-bit check value */

      var LENGTH = 28;
      /* i: waiting for 32-bit length (gzip) */

      var DONE = 29;
      /* finished check, done -- remain here until reset */

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var MEM = 31;
      /* got an inflate() memory error -- remain here until reset */

      var SYNC = 32;
      /* looking for synchronization bytes to restart inflate() */

      /* ===========================================================================*/

      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

      var MAX_WBITS = 15;
      /* 32K LZ77 window */

      var DEF_WBITS = MAX_WBITS;

      function zswap32(q) {
        return (q >>> 24 & 0xff) + (q >>> 8 & 0xff00) + ((q & 0xff00) << 8) + ((q & 0xff) << 24);
      }

      function InflateState() {
        this.mode = 0;
        /* current inflate mode */

        this.last = false;
        /* true if processing last block */

        this.wrap = 0;
        /* bit 0 true for zlib, bit 1 true for gzip */

        this.havedict = false;
        /* true if dictionary provided */

        this.flags = 0;
        /* gzip header method and flags (0 if zlib) */

        this.dmax = 0;
        /* zlib header max distance (INFLATE_STRICT) */

        this.check = 0;
        /* protected copy of check value */

        this.total = 0;
        /* protected copy of output count */
        // TODO: may be {}

        this.head = null;
        /* where to save gzip header information */

        /* sliding window */

        this.wbits = 0;
        /* log base 2 of requested window size */

        this.wsize = 0;
        /* window size or zero if not using window */

        this.whave = 0;
        /* valid bytes in the window */

        this.wnext = 0;
        /* window write index */

        this.window = null;
        /* allocated sliding window, if needed */

        /* bit accumulator */

        this.hold = 0;
        /* input bit accumulator */

        this.bits = 0;
        /* number of bits in "in" */

        /* for string and stored block copying */

        this.length = 0;
        /* literal or length of data to copy */

        this.offset = 0;
        /* distance back to copy string from */

        /* for table and code decoding */

        this.extra = 0;
        /* extra bits needed */

        /* fixed and dynamic code tables */

        this.lencode = null;
        /* starting table for length/literal codes */

        this.distcode = null;
        /* starting table for distance codes */

        this.lenbits = 0;
        /* index bits for lencode */

        this.distbits = 0;
        /* index bits for distcode */

        /* dynamic table building */

        this.ncode = 0;
        /* number of code length code lengths */

        this.nlen = 0;
        /* number of length code lengths */

        this.ndist = 0;
        /* number of distance code lengths */

        this.have = 0;
        /* number of code lengths in lens[] */

        this.next = null;
        /* next available space in codes[] */

        this.lens = new utils.Buf16(320);
        /* temporary storage for code lengths */

        this.work = new utils.Buf16(288);
        /* work area for code table building */

        /*
         because we don't have pointers in js, we use lencode and distcode directly
         as buffers so we don't need codes
        */
        //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */

        this.lendyn = null;
        /* dynamic table for length/literal codes (JS specific) */

        this.distdyn = null;
        /* dynamic table for distance codes (JS specific) */

        this.sane = 0;
        /* if false, allow invalid distance too far */

        this.back = 0;
        /* bits back of last unprocessed length/lit */

        this.was = 0;
        /* initial length of match */
      }

      function inflateResetKeep(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        strm.total_in = strm.total_out = state.total = 0;
        strm.msg = '';
        /*Z_NULL*/

        if (state.wrap) {
          /* to support ill-conceived Java test suite */
          strm.adler = state.wrap & 1;
        }

        state.mode = HEAD;
        state.last = 0;
        state.havedict = 0;
        state.dmax = 32768;
        state.head = null
        /*Z_NULL*/
        ;
        state.hold = 0;
        state.bits = 0; //state.lencode = state.distcode = state.next = state.codes;

        state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);
        state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);
        state.sane = 1;
        state.back = -1; //Tracev((stderr, "inflate: reset\n"));

        return Z_OK;
      }

      function inflateReset(strm) {
        var state;

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        state.wsize = 0;
        state.whave = 0;
        state.wnext = 0;
        return inflateResetKeep(strm);
      }

      function inflateReset2(strm, windowBits) {
        var wrap;
        var state;
        /* get the state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;
        /* extract wrap request from windowBits parameter */

        if (windowBits < 0) {
          wrap = 0;
          windowBits = -windowBits;
        } else {
          wrap = (windowBits >> 4) + 1;

          if (windowBits < 48) {
            windowBits &= 15;
          }
        }
        /* set number of window bits, free window if different */


        if (windowBits && (windowBits < 8 || windowBits > 15)) {
          return Z_STREAM_ERROR;
        }

        if (state.window !== null && state.wbits !== windowBits) {
          state.window = null;
        }
        /* update state and reset the rest of it */


        state.wrap = wrap;
        state.wbits = windowBits;
        return inflateReset(strm);
      }

      function inflateInit2(strm, windowBits) {
        var ret;
        var state;

        if (!strm) {
          return Z_STREAM_ERROR;
        } //strm.msg = Z_NULL;                 /* in case we return an error */


        state = new InflateState(); //if (state === Z_NULL) return Z_MEM_ERROR;
        //Tracev((stderr, "inflate: allocated\n"));

        strm.state = state;
        state.window = null
        /*Z_NULL*/
        ;
        ret = inflateReset2(strm, windowBits);

        if (ret !== Z_OK) {
          strm.state = null
          /*Z_NULL*/
          ;
        }

        return ret;
      }

      function inflateInit(strm) {
        return inflateInit2(strm, DEF_WBITS);
      }
      /*
       Return state with length and distance decoding tables and index sizes set to
       fixed code decoding.  Normally this returns fixed tables from inffixed.h.
       If BUILDFIXED is defined, then instead this routine builds the tables the
       first time it's called, and returns those tables the first time and
       thereafter.  This reduces the size of the code by about 2K bytes, in
       exchange for a little execution time.  However, BUILDFIXED should not be
       used for threaded applications, since the rewriting of the tables and virgin
       may not be thread-safe.
       */


      var virgin = true;
      var lenfix, distfix; // We have no pointers in JS, so keep tables separate

      function fixedtables(state) {
        /* build fixed huffman tables if first call (may not be thread safe) */
        if (virgin) {
          var sym;
          lenfix = new utils.Buf32(512);
          distfix = new utils.Buf32(32);
          /* literal/length table */

          sym = 0;

          while (sym < 144) {
            state.lens[sym++] = 8;
          }

          while (sym < 256) {
            state.lens[sym++] = 9;
          }

          while (sym < 280) {
            state.lens[sym++] = 7;
          }

          while (sym < 288) {
            state.lens[sym++] = 8;
          }

          inflate_table(LENS, state.lens, 0, 288, lenfix, 0, state.work, {
            bits: 9
          });
          /* distance table */

          sym = 0;

          while (sym < 32) {
            state.lens[sym++] = 5;
          }

          inflate_table(DISTS, state.lens, 0, 32, distfix, 0, state.work, {
            bits: 5
          });
          /* do this just once */

          virgin = false;
        }

        state.lencode = lenfix;
        state.lenbits = 9;
        state.distcode = distfix;
        state.distbits = 5;
      }
      /*
       Update the window with the last wsize (normally 32K) bytes written before
       returning.  If window does not exist yet, create it.  This is only called
       when a window is already in use, or when output has been written during this
       inflate call, but the end of the deflate stream has not been reached yet.
       It is also called to create a window for dictionary data when a dictionary
       is loaded.
      
       Providing output buffers larger than 32K to inflate() should provide a speed
       advantage, since only the last 32K of output is copied to the sliding window
       upon return from inflate(), and since all distances after the first 32K of
       output will fall in the output data, making match copies simpler and faster.
       The advantage may be dependent on the size of the processor's data caches.
       */


      function updatewindow(strm, src, end, copy) {
        var dist;
        var state = strm.state;
        /* if it hasn't been done already, allocate space for the window */

        if (state.window === null) {
          state.wsize = 1 << state.wbits;
          state.wnext = 0;
          state.whave = 0;
          state.window = new utils.Buf8(state.wsize);
        }
        /* copy state->wsize or less output bytes into the circular window */


        if (copy >= state.wsize) {
          utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);
          state.wnext = 0;
          state.whave = state.wsize;
        } else {
          dist = state.wsize - state.wnext;

          if (dist > copy) {
            dist = copy;
          } //zmemcpy(state->window + state->wnext, end - copy, dist);


          utils.arraySet(state.window, src, end - copy, dist, state.wnext);
          copy -= dist;

          if (copy) {
            //zmemcpy(state->window, end - copy, copy);
            utils.arraySet(state.window, src, end - copy, copy, 0);
            state.wnext = copy;
            state.whave = state.wsize;
          } else {
            state.wnext += dist;

            if (state.wnext === state.wsize) {
              state.wnext = 0;
            }

            if (state.whave < state.wsize) {
              state.whave += dist;
            }
          }
        }

        return 0;
      }

      function inflate(strm, flush) {
        var state;
        var input, output; // input/output buffers

        var next;
        /* next input INDEX */

        var put;
        /* next output INDEX */

        var have, left;
        /* available input and output */

        var hold;
        /* bit buffer */

        var bits;
        /* bits in bit buffer */

        var _in, _out;
        /* save starting available input and output */


        var copy;
        /* number of stored or match bytes to copy */

        var from;
        /* where to copy match bytes from */

        var from_source;
        var here = 0;
        /* current decoding table entry */

        var here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
        //var last;                   /* parent table entry */

        var last_bits, last_op, last_val; // paked "last" denormalized (JS specific)

        var len;
        /* length to copy for repeats, bits to drop */

        var ret;
        /* return code */

        var hbuf = new utils.Buf8(4);
        /* buffer for gzip header crc calculation */

        var opts;
        var n; // temporary var for NEED_BITS

        var order =
        /* permutation of code lengths */
        [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

        if (!strm || !strm.state || !strm.output || !strm.input && strm.avail_in !== 0) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if (state.mode === TYPE) {
          state.mode = TYPEDO;
        }
        /* skip check */
        //--- LOAD() ---


        put = strm.next_out;
        output = strm.output;
        left = strm.avail_out;
        next = strm.next_in;
        input = strm.input;
        have = strm.avail_in;
        hold = state.hold;
        bits = state.bits; //---

        _in = have;
        _out = left;
        ret = Z_OK;

        inf_leave: // goto emulation
        for (;;) {
          switch (state.mode) {
            case HEAD:
              if (state.wrap === 0) {
                state.mode = TYPEDO;
                break;
              } //=== NEEDBITS(16);


              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.wrap & 2 && hold === 0x8b1f) {
                /* gzip header */
                state.check = 0
                /*crc32(0L, Z_NULL, 0)*/
                ; //=== CRC2(state.check, hold);

                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
                //=== INITBITS();

                hold = 0;
                bits = 0; //===//

                state.mode = FLAGS;
                break;
              }

              state.flags = 0;
              /* expect zlib header */

              if (state.head) {
                state.head.done = false;
              }

              if (!(state.wrap & 1) ||
              /* check if zlib header allowed */
              (((hold & 0xff) <<
              /*BITS(8)*/
              8) + (hold >> 8)) % 31) {
                strm.msg = 'incorrect header check';
                state.mode = BAD;
                break;
              }

              if ((hold & 0x0f) !==
              /*BITS(4)*/
              Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              } //--- DROPBITS(4) ---//


              hold >>>= 4;
              bits -= 4; //---//

              len = (hold & 0x0f) +
              /*BITS(4)*/
              8;

              if (state.wbits === 0) {
                state.wbits = len;
              } else if (len > state.wbits) {
                strm.msg = 'invalid window size';
                state.mode = BAD;
                break;
              }

              state.dmax = 1 << len; //Tracev((stderr, "inflate:   zlib header ok\n"));

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = hold & 0x200 ? DICTID : TYPE; //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              break;

            case FLAGS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.flags = hold;

              if ((state.flags & 0xff) !== Z_DEFLATED) {
                strm.msg = 'unknown compression method';
                state.mode = BAD;
                break;
              }

              if (state.flags & 0xe000) {
                strm.msg = 'unknown header flags set';
                state.mode = BAD;
                break;
              }

              if (state.head) {
                state.head.text = hold >> 8 & 1;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = TIME;

            /* falls through */

            case TIME:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.time = hold;
              }

              if (state.flags & 0x0200) {
                //=== CRC4(state.check, hold)
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                hbuf[2] = hold >>> 16 & 0xff;
                hbuf[3] = hold >>> 24 & 0xff;
                state.check = crc32(state.check, hbuf, 4, 0); //===
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = OS;

            /* falls through */

            case OS:
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if (state.head) {
                state.head.xflags = hold & 0xff;
                state.head.os = hold >> 8;
              }

              if (state.flags & 0x0200) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = hold >>> 8 & 0xff;
                state.check = crc32(state.check, hbuf, 2, 0); //===//
              } //=== INITBITS();


              hold = 0;
              bits = 0; //===//

              state.mode = EXLEN;

            /* falls through */

            case EXLEN:
              if (state.flags & 0x0400) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length = hold;

                if (state.head) {
                  state.head.extra_len = hold;
                }

                if (state.flags & 0x0200) {
                  //=== CRC2(state.check, hold);
                  hbuf[0] = hold & 0xff;
                  hbuf[1] = hold >>> 8 & 0xff;
                  state.check = crc32(state.check, hbuf, 2, 0); //===//
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              } else if (state.head) {
                state.head.extra = null
                /*Z_NULL*/
                ;
              }

              state.mode = EXTRA;

            /* falls through */

            case EXTRA:
              if (state.flags & 0x0400) {
                copy = state.length;

                if (copy > have) {
                  copy = have;
                }

                if (copy) {
                  if (state.head) {
                    len = state.head.extra_len - state.length;

                    if (!state.head.extra) {
                      // Use untyped array for more conveniend processing later
                      state.head.extra = new Array(state.head.extra_len);
                    }

                    utils.arraySet(state.head.extra, input, next, // extra field is limited to 65536 bytes
                    // - no need for additional size check
                    copy,
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len); //zmemcpy(state.head.extra + len, next,
                    //        len + copy > state.head.extra_max ?
                    //        state.head.extra_max - len : copy);
                  }

                  if (state.flags & 0x0200) {
                    state.check = crc32(state.check, input, copy, next);
                  }

                  have -= copy;
                  next += copy;
                  state.length -= copy;
                }

                if (state.length) {
                  break inf_leave;
                }
              }

              state.length = 0;
              state.mode = NAME;

            /* falls through */

            case NAME:
              if (state.flags & 0x0800) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  // TODO: 2 or 1 bytes?
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.name_max*/
                  ) {
                    state.head.name += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.name = null;
              }

              state.length = 0;
              state.mode = COMMENT;

            /* falls through */

            case COMMENT:
              if (state.flags & 0x1000) {
                if (have === 0) {
                  break inf_leave;
                }

                copy = 0;

                do {
                  len = input[next + copy++];
                  /* use constant limit because in js we should not preallocate memory */

                  if (state.head && len && state.length < 65536
                  /*state.head.comm_max*/
                  ) {
                    state.head.comment += String.fromCharCode(len);
                  }
                } while (len && copy < have);

                if (state.flags & 0x0200) {
                  state.check = crc32(state.check, input, copy, next);
                }

                have -= copy;
                next += copy;

                if (len) {
                  break inf_leave;
                }
              } else if (state.head) {
                state.head.comment = null;
              }

              state.mode = HCRC;

            /* falls through */

            case HCRC:
              if (state.flags & 0x0200) {
                //=== NEEDBITS(16); */
                while (bits < 16) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.check & 0xffff)) {
                  strm.msg = 'header crc mismatch';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
              }

              if (state.head) {
                state.head.hcrc = state.flags >> 9 & 1;
                state.head.done = true;
              }

              strm.adler = state.check = 0;
              state.mode = TYPE;
              break;

            case DICTID:
              //=== NEEDBITS(32); */
              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              strm.adler = state.check = zswap32(hold); //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = DICT;

            /* falls through */

            case DICT:
              if (state.havedict === 0) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                return Z_NEED_DICT;
              }

              strm.adler = state.check = 1
              /*adler32(0L, Z_NULL, 0)*/
              ;
              state.mode = TYPE;

            /* falls through */

            case TYPE:
              if (flush === Z_BLOCK || flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case TYPEDO:
              if (state.last) {
                //--- BYTEBITS() ---//
                hold >>>= bits & 7;
                bits -= bits & 7; //---//

                state.mode = CHECK;
                break;
              } //=== NEEDBITS(3); */


              while (bits < 3) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.last = hold & 0x01
              /*BITS(1)*/
              ; //--- DROPBITS(1) ---//

              hold >>>= 1;
              bits -= 1; //---//

              switch (hold & 0x03) {
                /*BITS(2)*/
                case 0:
                  /* stored block */
                  //Tracev((stderr, "inflate:     stored block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = STORED;
                  break;

                case 1:
                  /* fixed block */
                  fixedtables(state); //Tracev((stderr, "inflate:     fixed codes block%s\n",
                  //        state.last ? " (last)" : ""));

                  state.mode = LEN_;
                  /* decode codes */

                  if (flush === Z_TREES) {
                    //--- DROPBITS(2) ---//
                    hold >>>= 2;
                    bits -= 2; //---//

                    break inf_leave;
                  }

                  break;

                case 2:
                  /* dynamic block */
                  //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                  //        state.last ? " (last)" : ""));
                  state.mode = TABLE;
                  break;

                case 3:
                  strm.msg = 'invalid block type';
                  state.mode = BAD;
              } //--- DROPBITS(2) ---//


              hold >>>= 2;
              bits -= 2; //---//

              break;

            case STORED:
              //--- BYTEBITS() ---// /* go to byte boundary */
              hold >>>= bits & 7;
              bits -= bits & 7; //---//
              //=== NEEDBITS(32); */

              while (bits < 32) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              if ((hold & 0xffff) !== (hold >>> 16 ^ 0xffff)) {
                strm.msg = 'invalid stored block lengths';
                state.mode = BAD;
                break;
              }

              state.length = hold & 0xffff; //Tracev((stderr, "inflate:       stored length %u\n",
              //        state.length));
              //=== INITBITS();

              hold = 0;
              bits = 0; //===//

              state.mode = COPY_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case COPY_:
              state.mode = COPY;

            /* falls through */

            case COPY:
              copy = state.length;

              if (copy) {
                if (copy > have) {
                  copy = have;
                }

                if (copy > left) {
                  copy = left;
                }

                if (copy === 0) {
                  break inf_leave;
                } //--- zmemcpy(put, next, copy); ---


                utils.arraySet(output, input, next, copy, put); //---//

                have -= copy;
                next += copy;
                left -= copy;
                put += copy;
                state.length -= copy;
                break;
              } //Tracev((stderr, "inflate:       stored end\n"));


              state.mode = TYPE;
              break;

            case TABLE:
              //=== NEEDBITS(14); */
              while (bits < 14) {
                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8;
              } //===//


              state.nlen = (hold & 0x1f) +
              /*BITS(5)*/
              257; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ndist = (hold & 0x1f) +
              /*BITS(5)*/
              1; //--- DROPBITS(5) ---//

              hold >>>= 5;
              bits -= 5; //---//

              state.ncode = (hold & 0x0f) +
              /*BITS(4)*/
              4; //--- DROPBITS(4) ---//

              hold >>>= 4;
              bits -= 4; //---//
              //#ifndef PKZIP_BUG_WORKAROUND

              if (state.nlen > 286 || state.ndist > 30) {
                strm.msg = 'too many length or distance symbols';
                state.mode = BAD;
                break;
              } //#endif
              //Tracev((stderr, "inflate:       table sizes ok\n"));


              state.have = 0;
              state.mode = LENLENS;

            /* falls through */

            case LENLENS:
              while (state.have < state.ncode) {
                //=== NEEDBITS(3);
                while (bits < 3) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.lens[order[state.have++]] = hold & 0x07; //BITS(3);
                //--- DROPBITS(3) ---//

                hold >>>= 3;
                bits -= 3; //---//
              }

              while (state.have < 19) {
                state.lens[order[state.have++]] = 0;
              } // We have separate tables & no pointers. 2 commented lines below not needed.
              //state.next = state.codes;
              //state.lencode = state.next;
              // Switch to use dynamic table


              state.lencode = state.lendyn;
              state.lenbits = 7;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
              state.lenbits = opts.bits;

              if (ret) {
                strm.msg = 'invalid code lengths set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, "inflate:       code lengths ok\n"));


              state.have = 0;
              state.mode = CODELENS;

            /* falls through */

            case CODELENS:
              while (state.have < state.nlen + state.ndist) {
                for (;;) {
                  here = state.lencode[hold & (1 << state.lenbits) - 1];
                  /*BITS(state.lenbits)*/

                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                }

                if (here_val < 16) {
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits; //---//

                  state.lens[state.have++] = here_val;
                } else {
                  if (here_val === 16) {
                    //=== NEEDBITS(here.bits + 2);
                    n = here_bits + 2;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    if (state.have === 0) {
                      strm.msg = 'invalid bit length repeat';
                      state.mode = BAD;
                      break;
                    }

                    len = state.lens[state.have - 1];
                    copy = 3 + (hold & 0x03); //BITS(2);
                    //--- DROPBITS(2) ---//

                    hold >>>= 2;
                    bits -= 2; //---//
                  } else if (here_val === 17) {
                    //=== NEEDBITS(here.bits + 3);
                    n = here_bits + 3;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 3 + (hold & 0x07); //BITS(3);
                    //--- DROPBITS(3) ---//

                    hold >>>= 3;
                    bits -= 3; //---//
                  } else {
                    //=== NEEDBITS(here.bits + 7);
                    n = here_bits + 7;

                    while (bits < n) {
                      if (have === 0) {
                        break inf_leave;
                      }

                      have--;
                      hold += input[next++] << bits;
                      bits += 8;
                    } //===//
                    //--- DROPBITS(here.bits) ---//


                    hold >>>= here_bits;
                    bits -= here_bits; //---//

                    len = 0;
                    copy = 11 + (hold & 0x7f); //BITS(7);
                    //--- DROPBITS(7) ---//

                    hold >>>= 7;
                    bits -= 7; //---//
                  }

                  if (state.have + copy > state.nlen + state.ndist) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }

                  while (copy--) {
                    state.lens[state.have++] = len;
                  }
                }
              }
              /* handle error breaks in while */


              if (state.mode === BAD) {
                break;
              }
              /* check for end-of-block code (better have one) */


              if (state.lens[256] === 0) {
                strm.msg = 'invalid code -- missing end-of-block';
                state.mode = BAD;
                break;
              }
              /* build code tables -- note: do not change the lenbits or distbits
                 values here (9 and 6) without reading the comments in inftrees.h
                 concerning the ENOUGH constants, which depend on those values */


              state.lenbits = 9;
              opts = {
                bits: state.lenbits
              };
              ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.lenbits = opts.bits; // state.lencode = state.next;

              if (ret) {
                strm.msg = 'invalid literal/lengths set';
                state.mode = BAD;
                break;
              }

              state.distbits = 6; //state.distcode.copy(state.codes);
              // Switch to use dynamic table

              state.distcode = state.distdyn;
              opts = {
                bits: state.distbits
              };
              ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts); // We have separate tables & no pointers. 2 commented lines below not needed.
              // state.next_index = opts.table_index;

              state.distbits = opts.bits; // state.distcode = state.next;

              if (ret) {
                strm.msg = 'invalid distances set';
                state.mode = BAD;
                break;
              } //Tracev((stderr, 'inflate:       codes ok\n'));


              state.mode = LEN_;

              if (flush === Z_TREES) {
                break inf_leave;
              }

            /* falls through */

            case LEN_:
              state.mode = LEN;

            /* falls through */

            case LEN:
              if (have >= 6 && left >= 258) {
                //--- RESTORE() ---
                strm.next_out = put;
                strm.avail_out = left;
                strm.next_in = next;
                strm.avail_in = have;
                state.hold = hold;
                state.bits = bits; //---

                inflate_fast(strm, _out); //--- LOAD() ---

                put = strm.next_out;
                output = strm.output;
                left = strm.avail_out;
                next = strm.next_in;
                input = strm.input;
                have = strm.avail_in;
                hold = state.hold;
                bits = state.bits; //---

                if (state.mode === TYPE) {
                  state.back = -1;
                }

                break;
              }

              state.back = 0;

              for (;;) {
                here = state.lencode[hold & (1 << state.lenbits) - 1];
                /*BITS(state.lenbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if (here_op && (here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;
              state.length = here_val;

              if (here_op === 0) {
                //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
                //        "inflate:         literal '%c'\n" :
                //        "inflate:         literal 0x%02x\n", here.val));
                state.mode = LIT;
                break;
              }

              if (here_op & 32) {
                //Tracevv((stderr, "inflate:         end of block\n"));
                state.back = -1;
                state.mode = TYPE;
                break;
              }

              if (here_op & 64) {
                strm.msg = 'invalid literal/length code';
                state.mode = BAD;
                break;
              }

              state.extra = here_op & 15;
              state.mode = LENEXT;

            /* falls through */

            case LENEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.length += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //Tracevv((stderr, "inflate:         length %u\n", state.length));


              state.was = state.length;
              state.mode = DIST;

            /* falls through */

            case DIST:
              for (;;) {
                here = state.distcode[hold & (1 << state.distbits) - 1];
                /*BITS(state.distbits)*/

                here_bits = here >>> 24;
                here_op = here >>> 16 & 0xff;
                here_val = here & 0xffff;

                if (here_bits <= bits) {
                  break;
                } //--- PULLBYTE() ---//


                if (have === 0) {
                  break inf_leave;
                }

                have--;
                hold += input[next++] << bits;
                bits += 8; //---//
              }

              if ((here_op & 0xf0) === 0) {
                last_bits = here_bits;
                last_op = here_op;
                last_val = here_val;

                for (;;) {
                  here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >>
                  /*BITS(last.bits + last.op)*/
                  last_bits)];
                  here_bits = here >>> 24;
                  here_op = here >>> 16 & 0xff;
                  here_val = here & 0xffff;

                  if (last_bits + here_bits <= bits) {
                    break;
                  } //--- PULLBYTE() ---//


                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8; //---//
                } //--- DROPBITS(last.bits) ---//


                hold >>>= last_bits;
                bits -= last_bits; //---//

                state.back += last_bits;
              } //--- DROPBITS(here.bits) ---//


              hold >>>= here_bits;
              bits -= here_bits; //---//

              state.back += here_bits;

              if (here_op & 64) {
                strm.msg = 'invalid distance code';
                state.mode = BAD;
                break;
              }

              state.offset = here_val;
              state.extra = here_op & 15;
              state.mode = DISTEXT;

            /* falls through */

            case DISTEXT:
              if (state.extra) {
                //=== NEEDBITS(state.extra);
                n = state.extra;

                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                state.offset += hold & (1 << state.extra) - 1
                /*BITS(state.extra)*/
                ; //--- DROPBITS(state.extra) ---//

                hold >>>= state.extra;
                bits -= state.extra; //---//

                state.back += state.extra;
              } //#ifdef INFLATE_STRICT


              if (state.offset > state.dmax) {
                strm.msg = 'invalid distance too far back';
                state.mode = BAD;
                break;
              } //#endif
              //Tracevv((stderr, "inflate:         distance %u\n", state.offset));


              state.mode = MATCH;

            /* falls through */

            case MATCH:
              if (left === 0) {
                break inf_leave;
              }

              copy = _out - left;

              if (state.offset > copy) {
                /* copy from window */
                copy = state.offset - copy;

                if (copy > state.whave) {
                  if (state.sane) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break;
                  } // (!) This block is disabled in zlib defailts,
                  // don't enable it for binary compatibility
                  //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                  //          Trace((stderr, "inflate.c too far\n"));
                  //          copy -= state.whave;
                  //          if (copy > state.length) { copy = state.length; }
                  //          if (copy > left) { copy = left; }
                  //          left -= copy;
                  //          state.length -= copy;
                  //          do {
                  //            output[put++] = 0;
                  //          } while (--copy);
                  //          if (state.length === 0) { state.mode = LEN; }
                  //          break;
                  //#endif

                }

                if (copy > state.wnext) {
                  copy -= state.wnext;
                  from = state.wsize - copy;
                } else {
                  from = state.wnext - copy;
                }

                if (copy > state.length) {
                  copy = state.length;
                }

                from_source = state.window;
              } else {
                /* copy from output */
                from_source = output;
                from = put - state.offset;
                copy = state.length;
              }

              if (copy > left) {
                copy = left;
              }

              left -= copy;
              state.length -= copy;

              do {
                output[put++] = from_source[from++];
              } while (--copy);

              if (state.length === 0) {
                state.mode = LEN;
              }

              break;

            case LIT:
              if (left === 0) {
                break inf_leave;
              }

              output[put++] = state.length;
              left--;
              state.mode = LEN;
              break;

            case CHECK:
              if (state.wrap) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--; // Use '|' insdead of '+' to make sure that result is signed

                  hold |= input[next++] << bits;
                  bits += 8;
                } //===//


                _out -= left;
                strm.total_out += _out;
                state.total += _out;

                if (_out) {
                  strm.adler = state.check =
                  /*UPDATE(state.check, put - _out, _out);*/
                  state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out);
                }

                _out = left; // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too

                if ((state.flags ? hold : zswap32(hold)) !== state.check) {
                  strm.msg = 'incorrect data check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   check matches trailer\n"));
              }

              state.mode = LENGTH;

            /* falls through */

            case LENGTH:
              if (state.wrap && state.flags) {
                //=== NEEDBITS(32);
                while (bits < 32) {
                  if (have === 0) {
                    break inf_leave;
                  }

                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                } //===//


                if (hold !== (state.total & 0xffffffff)) {
                  strm.msg = 'incorrect length check';
                  state.mode = BAD;
                  break;
                } //=== INITBITS();


                hold = 0;
                bits = 0; //===//
                //Tracev((stderr, "inflate:   length matches trailer\n"));
              }

              state.mode = DONE;

            /* falls through */

            case DONE:
              ret = Z_STREAM_END;
              break inf_leave;

            case BAD:
              ret = Z_DATA_ERROR;
              break inf_leave;

            case MEM:
              return Z_MEM_ERROR;

            case SYNC:
            /* falls through */

            default:
              return Z_STREAM_ERROR;
          }
        } // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

        /*
           Return from inflate(), updating the total counts and the check value.
           If there was no progress during the inflate() call, return a buffer
           error.  Call updatewindow() to create and/or update the window state.
           Note: a memory error from inflate() is non-recoverable.
         */
        //--- RESTORE() ---


        strm.next_out = put;
        strm.avail_out = left;
        strm.next_in = next;
        strm.avail_in = have;
        state.hold = hold;
        state.bits = bits; //---

        if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH)) {
          if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {
            state.mode = MEM;
            return Z_MEM_ERROR;
          }
        }

        _in -= strm.avail_in;
        _out -= strm.avail_out;
        strm.total_in += _in;
        strm.total_out += _out;
        state.total += _out;

        if (state.wrap && _out) {
          strm.adler = state.check =
          /*UPDATE(state.check, strm.next_out - _out, _out);*/
          state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out);
        }

        strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);

        if ((_in === 0 && _out === 0 || flush === Z_FINISH) && ret === Z_OK) {
          ret = Z_BUF_ERROR;
        }

        return ret;
      }

      function inflateEnd(strm) {
        if (!strm || !strm.state
        /*|| strm->zfree == (free_func)0*/
        ) {
            return Z_STREAM_ERROR;
          }

        var state = strm.state;

        if (state.window) {
          state.window = null;
        }

        strm.state = null;
        return Z_OK;
      }

      function inflateGetHeader(strm, head) {
        var state;
        /* check state */

        if (!strm || !strm.state) {
          return Z_STREAM_ERROR;
        }

        state = strm.state;

        if ((state.wrap & 2) === 0) {
          return Z_STREAM_ERROR;
        }
        /* save header structure */


        state.head = head;
        head.done = false;
        return Z_OK;
      }

      function inflateSetDictionary(strm, dictionary) {
        var dictLength = dictionary.length;
        var state;
        var dictid;
        var ret;
        /* check state */

        if (!strm
        /* == Z_NULL */
        || !strm.state
        /* == Z_NULL */
        ) {
            return Z_STREAM_ERROR;
          }

        state = strm.state;

        if (state.wrap !== 0 && state.mode !== DICT) {
          return Z_STREAM_ERROR;
        }
        /* check for correct dictionary identifier */


        if (state.mode === DICT) {
          dictid = 1;
          /* adler32(0, null, 0)*/

          /* dictid = adler32(dictid, dictionary, dictLength); */

          dictid = adler32(dictid, dictionary, dictLength, 0);

          if (dictid !== state.check) {
            return Z_DATA_ERROR;
          }
        }
        /* copy dictionary to window using updatewindow(), which will amend the
         existing dictionary if appropriate */


        ret = updatewindow(strm, dictionary, dictLength, dictLength);

        if (ret) {
          state.mode = MEM;
          return Z_MEM_ERROR;
        }

        state.havedict = 1; // Tracev((stderr, "inflate:   dictionary set\n"));

        return Z_OK;
      }

      exports.inflateReset = inflateReset;
      exports.inflateReset2 = inflateReset2;
      exports.inflateResetKeep = inflateResetKeep;
      exports.inflateInit = inflateInit;
      exports.inflateInit2 = inflateInit2;
      exports.inflate = inflate;
      exports.inflateEnd = inflateEnd;
      exports.inflateGetHeader = inflateGetHeader;
      exports.inflateSetDictionary = inflateSetDictionary;
      exports.inflateInfo = 'pako inflate (from Nodeca project)';
      /* Not implemented
      exports.inflateCopy = inflateCopy;
      exports.inflateGetDictionary = inflateGetDictionary;
      exports.inflateMark = inflateMark;
      exports.inflatePrime = inflatePrime;
      exports.inflateSync = inflateSync;
      exports.inflateSyncPoint = inflateSyncPoint;
      exports.inflateUndermine = inflateUndermine;
      */

      /***/
    },
    /* 33 */

    /***/
    function (module, exports) {
      'use strict';

      var TYPED_OK = typeof Uint8Array !== 'undefined' && typeof Uint16Array !== 'undefined' && typeof Int32Array !== 'undefined';

      exports.assign = function (obj
      /*from1, from2, from3, ...*/
      ) {
        var sources = Array.prototype.slice.call(arguments, 1);

        while (sources.length) {
          var source = sources.shift();

          if (!source) {
            continue;
          }

          if (typeof source !== 'object') {
            throw new TypeError(source + 'must be non-object');
          }

          for (var p in source) {
            if (source.hasOwnProperty(p)) {
              obj[p] = source[p];
            }
          }
        }

        return obj;
      }; // reduce buffer size, avoiding mem copy


      exports.shrinkBuf = function (buf, size) {
        if (buf.length === size) {
          return buf;
        }

        if (buf.subarray) {
          return buf.subarray(0, size);
        }

        buf.length = size;
        return buf;
      };

      var fnTyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          if (src.subarray && dest.subarray) {
            dest.set(src.subarray(src_offs, src_offs + len), dest_offs);
            return;
          } // Fallback to ordinary array


          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          var i, l, len, pos, chunk, result; // calculate data length

          len = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            len += chunks[i].length;
          } // join chunks


          result = new Uint8Array(len);
          pos = 0;

          for (i = 0, l = chunks.length; i < l; i++) {
            chunk = chunks[i];
            result.set(chunk, pos);
            pos += chunk.length;
          }

          return result;
        }
      };
      var fnUntyped = {
        arraySet: function (dest, src, src_offs, len, dest_offs) {
          for (var i = 0; i < len; i++) {
            dest[dest_offs + i] = src[src_offs + i];
          }
        },
        // Join array of chunks to single array.
        flattenChunks: function (chunks) {
          return [].concat.apply([], chunks);
        }
      }; // Enable/Disable typed arrays use, for testing
      //

      exports.setTyped = function (on) {
        if (on) {
          exports.Buf8 = Uint8Array;
          exports.Buf16 = Uint16Array;
          exports.Buf32 = Int32Array;
          exports.assign(exports, fnTyped);
        } else {
          exports.Buf8 = Array;
          exports.Buf16 = Array;
          exports.Buf32 = Array;
          exports.assign(exports, fnUntyped);
        }
      };

      exports.setTyped(TYPED_OK);
      /***/
    },
    /* 34 */

    /***/
    function (module, exports) {
      'use strict'; // Note: adler32 takes 12% for level 0 and 2% for level 6.
      // It doesn't worth to make additional optimizationa as in original.
      // Small size is preferable.

      function adler32(adler, buf, len, pos) {
        var s1 = adler & 0xffff | 0,
            s2 = adler >>> 16 & 0xffff | 0,
            n = 0;

        while (len !== 0) {
          // Set limit ~ twice less than 5552, to keep
          // s2 in 31-bits, because we force signed ints.
          // in other case %= will fail.
          n = len > 2000 ? 2000 : len;
          len -= n;

          do {
            s1 = s1 + buf[pos++] | 0;
            s2 = s2 + s1 | 0;
          } while (--n);

          s1 %= 65521;
          s2 %= 65521;
        }

        return s1 | s2 << 16 | 0;
      }

      module.exports = adler32;
      /***/
    },
    /* 35 */

    /***/
    function (module, exports) {
      'use strict'; // Note: we can't get significant speed boost here.
      // So write code to minimize size - no pregenerated tables
      // and array tools dependencies.
      // Use ordinary array, since untyped makes no boost here

      function makeTable() {
        var c,
            table = [];

        for (var n = 0; n < 256; n++) {
          c = n;

          for (var k = 0; k < 8; k++) {
            c = c & 1 ? 0xEDB88320 ^ c >>> 1 : c >>> 1;
          }

          table[n] = c;
        }

        return table;
      } // Create table on load. Just 255 signed longs. Not a problem.


      var crcTable = makeTable();

      function crc32(crc, buf, len, pos) {
        var t = crcTable,
            end = pos + len;
        crc ^= -1;

        for (var i = pos; i < end; i++) {
          crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 0xFF];
        }

        return crc ^ -1; // >>> 0;
      }

      module.exports = crc32;
      /***/
    },
    /* 36 */

    /***/
    function (module, exports) {
      'use strict'; // See state defs from inflate.js

      var BAD = 30;
      /* got a data error -- remain here until reset */

      var TYPE = 12;
      /* i: waiting for type bits, including last-flag bit */

      /*
         Decode literal, length, and distance codes and write out the resulting
         literal and match bytes until either not enough input or output is
         available, an end-of-block is encountered, or a data error is encountered.
         When large enough input and output buffers are supplied to inflate(), for
         example, a 16K input buffer and a 64K output buffer, more than 95% of the
         inflate execution time is spent in this routine.
      
         Entry assumptions:
      
              state.mode === LEN
              strm.avail_in >= 6
              strm.avail_out >= 258
              start >= strm.avail_out
              state.bits < 8
      
         On return, state.mode is one of:
      
              LEN -- ran out of enough output space or enough available input
              TYPE -- reached end of block code, inflate() to interpret next block
              BAD -- error in block data
      
         Notes:
      
          - The maximum input bits used by a length/distance pair is 15 bits for the
            length code, 5 bits for the length extra, 15 bits for the distance code,
            and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
            Therefore if strm.avail_in >= 6, then there is enough input to avoid
            checking for available input while decoding.
      
          - The maximum bytes that a single length/distance pair can output is 258
            bytes, which is the maximum length that can be coded.  inflate_fast()
            requires strm.avail_out >= 258 for each loop to avoid checking for
            output space.
       */

      module.exports = function inflate_fast(strm, start) {
        var state;

        var _in;
        /* local strm.input */


        var last;
        /* have enough input while in < last */

        var _out;
        /* local strm.output */


        var beg;
        /* inflate()'s initial strm.output */

        var end;
        /* while out < end, enough space available */
        //#ifdef INFLATE_STRICT

        var dmax;
        /* maximum distance from zlib header */
        //#endif

        var wsize;
        /* window size or zero if not using window */

        var whave;
        /* valid bytes in the window */

        var wnext;
        /* window write index */
        // Use `s_window` instead `window`, avoid conflict with instrumentation tools

        var s_window;
        /* allocated sliding window, if wsize != 0 */

        var hold;
        /* local strm.hold */

        var bits;
        /* local strm.bits */

        var lcode;
        /* local strm.lencode */

        var dcode;
        /* local strm.distcode */

        var lmask;
        /* mask for first level of length codes */

        var dmask;
        /* mask for first level of distance codes */

        var here;
        /* retrieved table entry */

        var op;
        /* code bits, operation, extra bits, or */

        /*  window position, window bytes to copy */

        var len;
        /* match length, unused bytes */

        var dist;
        /* match distance */

        var from;
        /* where to copy match from */

        var from_source;
        var input, output; // JS specific, because we have no pointers

        /* copy state to local variables */

        state = strm.state; //here = state.here;

        _in = strm.next_in;
        input = strm.input;
        last = _in + (strm.avail_in - 5);
        _out = strm.next_out;
        output = strm.output;
        beg = _out - (start - strm.avail_out);
        end = _out + (strm.avail_out - 257); //#ifdef INFLATE_STRICT

        dmax = state.dmax; //#endif

        wsize = state.wsize;
        whave = state.whave;
        wnext = state.wnext;
        s_window = state.window;
        hold = state.hold;
        bits = state.bits;
        lcode = state.lencode;
        dcode = state.distcode;
        lmask = (1 << state.lenbits) - 1;
        dmask = (1 << state.distbits) - 1;
        /* decode literals and length/distances until end-of-block or not enough
           input data or output space */

        top: do {
          if (bits < 15) {
            hold += input[_in++] << bits;
            bits += 8;
            hold += input[_in++] << bits;
            bits += 8;
          }

          here = lcode[hold & lmask];

          dolen: for (;;) {
            // Goto emulation
            op = here >>> 24
            /*here.bits*/
            ;
            hold >>>= op;
            bits -= op;
            op = here >>> 16 & 0xff
            /*here.op*/
            ;

            if (op === 0) {
              /* literal */
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              output[_out++] = here & 0xffff
              /*here.val*/
              ;
            } else if (op & 16) {
              /* length base */
              len = here & 0xffff
              /*here.val*/
              ;
              op &= 15;
              /* number of extra bits */

              if (op) {
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                }

                len += hold & (1 << op) - 1;
                hold >>>= op;
                bits -= op;
              } //Tracevv((stderr, "inflate:         length %u\n", len));


              if (bits < 15) {
                hold += input[_in++] << bits;
                bits += 8;
                hold += input[_in++] << bits;
                bits += 8;
              }

              here = dcode[hold & dmask];

              dodist: for (;;) {
                // goto emulation
                op = here >>> 24
                /*here.bits*/
                ;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 0xff
                /*here.op*/
                ;

                if (op & 16) {
                  /* distance base */
                  dist = here & 0xffff
                  /*here.val*/
                  ;
                  op &= 15;
                  /* number of extra bits */

                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;

                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }

                  dist += hold & (1 << op) - 1; //#ifdef INFLATE_STRICT

                  if (dist > dmax) {
                    strm.msg = 'invalid distance too far back';
                    state.mode = BAD;
                    break top;
                  } //#endif


                  hold >>>= op;
                  bits -= op; //Tracevv((stderr, "inflate:         distance %u\n", dist));

                  op = _out - beg;
                  /* max distance in output */

                  if (dist > op) {
                    /* see if copy from window */
                    op = dist - op;
                    /* distance back in window */

                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = 'invalid distance too far back';
                        state.mode = BAD;
                        break top;
                      } // (!) This block is disabled in zlib defailts,
                      // don't enable it for binary compatibility
                      //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
                      //                if (len <= op - whave) {
                      //                  do {
                      //                    output[_out++] = 0;
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //                len -= op - whave;
                      //                do {
                      //                  output[_out++] = 0;
                      //                } while (--op > whave);
                      //                if (op === 0) {
                      //                  from = _out - dist;
                      //                  do {
                      //                    output[_out++] = output[from++];
                      //                  } while (--len);
                      //                  continue top;
                      //                }
                      //#endif

                    }

                    from = 0; // window index

                    from_source = s_window;

                    if (wnext === 0) {
                      /* very common case */
                      from += wsize - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    } else if (wnext < op) {
                      /* wrap around window */
                      from += wsize + wnext - op;
                      op -= wnext;

                      if (op < len) {
                        /* some from end of window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = 0;

                        if (wnext < len) {
                          /* some from start of window */
                          op = wnext;
                          len -= op;

                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);

                          from = _out - dist;
                          /* rest from output */

                          from_source = output;
                        }
                      }
                    } else {
                      /* contiguous in window */
                      from += wnext - op;

                      if (op < len) {
                        /* some from window */
                        len -= op;

                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);

                        from = _out - dist;
                        /* rest from output */

                        from_source = output;
                      }
                    }

                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }

                    if (len) {
                      output[_out++] = from_source[from++];

                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    /* copy direct from output */

                    do {
                      /* minimum length is three */
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);

                    if (len) {
                      output[_out++] = output[from++];

                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  /* 2nd level distance code */
                  here = dcode[(here & 0xffff) + (
                  /*here.val*/
                  hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = 'invalid distance code';
                  state.mode = BAD;
                  break top;
                }

                break; // need to emulate goto via "continue"
              }
            } else if ((op & 64) === 0) {
              /* 2nd level length code */
              here = lcode[(here & 0xffff) + (
              /*here.val*/
              hold & (1 << op) - 1)];
              continue dolen;
            } else if (op & 32) {
              /* end-of-block */
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.mode = TYPE;
              break top;
            } else {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break top;
            }

            break; // need to emulate goto via "continue"
          }
        } while (_in < last && _out < end);
        /* return unused bytes (on entry, bits < 8, so in won't go too far back) */


        len = bits >> 3;
        _in -= len;
        bits -= len << 3;
        hold &= (1 << bits) - 1;
        /* update state and return */

        strm.next_in = _in;
        strm.next_out = _out;
        strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
        strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
        state.hold = hold;
        state.bits = bits;
        return;
      };
      /***/

    },
    /* 37 */

    /***/
    function (module, exports, __webpack_require__) {
      'use strict';

      var utils = __webpack_require__(33);

      var MAXBITS = 15;
      var ENOUGH_LENS = 852;
      var ENOUGH_DISTS = 592; //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

      var CODES = 0;
      var LENS = 1;
      var DISTS = 2;
      var lbase = [
      /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0];
      var lext = [
      /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78];
      var dbase = [
      /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0];
      var dext = [
      /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

      module.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts) {
        var bits = opts.bits; //here = opts.here; /* table entry for duplication */

        var len = 0;
        /* a code's length in bits */

        var sym = 0;
        /* index of code symbols */

        var min = 0,
            max = 0;
        /* minimum and maximum code lengths */

        var root = 0;
        /* number of index bits for root table */

        var curr = 0;
        /* number of index bits for current table */

        var drop = 0;
        /* code bits to drop for sub-table */

        var left = 0;
        /* number of prefix codes available */

        var used = 0;
        /* code entries in table used */

        var huff = 0;
        /* Huffman code */

        var incr;
        /* for incrementing code, index */

        var fill;
        /* index for replicating entries */

        var low;
        /* low bits for current root entry */

        var mask;
        /* mask for low root bits */

        var next;
        /* next available space in table */

        var base = null;
        /* base value table to use */

        var base_index = 0; //  var shoextra;    /* extra bits table to use */

        var end;
        /* use base and extra for symbol > end */

        var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */

        var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */

        var extra = null;
        var extra_index = 0;
        var here_bits, here_op, here_val;
        /*
         Process a set of code lengths to create a canonical Huffman code.  The
         code lengths are lens[0..codes-1].  Each length corresponds to the
         symbols 0..codes-1.  The Huffman code is generated by first sorting the
         symbols by length from short to long, and retaining the symbol order
         for codes with equal lengths.  Then the code starts with all zero bits
         for the first code of the shortest length, and the codes are integer
         increments for the same length, and zeros are appended as the length
         increases.  For the deflate format, these bits are stored backwards
         from their more natural integer increment ordering, and so when the
         decoding tables are built in the large loop below, the integer codes
         are incremented backwards.
           This routine assumes, but does not check, that all of the entries in
         lens[] are in the range 0..MAXBITS.  The caller must assure this.
         1..MAXBITS is interpreted as that code length.  zero means that that
         symbol does not occur in this code.
           The codes are sorted by computing a count of codes for each length,
         creating from that a table of starting indices for each length in the
         sorted table, and then entering the symbols in order in the sorted
         table.  The sorted table is work[], with that space being provided by
         the caller.
           The length counts are used for other purposes as well, i.e. finding
         the minimum and maximum length codes, determining if there are any
         codes at all, checking for a valid set of lengths, and looking ahead
         at length counts to determine sub-table sizes when building the
         decoding tables.
         */

        /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */

        for (len = 0; len <= MAXBITS; len++) {
          count[len] = 0;
        }

        for (sym = 0; sym < codes; sym++) {
          count[lens[lens_index + sym]]++;
        }
        /* bound code lengths, force root to be within code lengths */


        root = bits;

        for (max = MAXBITS; max >= 1; max--) {
          if (count[max] !== 0) {
            break;
          }
        }

        if (root > max) {
          root = max;
        }

        if (max === 0) {
          /* no symbols to code at all */
          //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
          //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
          //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
          table[table_index++] = 1 << 24 | 64 << 16 | 0; //table.op[opts.table_index] = 64;
          //table.bits[opts.table_index] = 1;
          //table.val[opts.table_index++] = 0;

          table[table_index++] = 1 << 24 | 64 << 16 | 0;
          opts.bits = 1;
          return 0;
          /* no symbols, but wait for decoding to report error */
        }

        for (min = 1; min < max; min++) {
          if (count[min] !== 0) {
            break;
          }
        }

        if (root < min) {
          root = min;
        }
        /* check for an over-subscribed or incomplete set of lengths */


        left = 1;

        for (len = 1; len <= MAXBITS; len++) {
          left <<= 1;
          left -= count[len];

          if (left < 0) {
            return -1;
          }
          /* over-subscribed */

        }

        if (left > 0 && (type === CODES || max !== 1)) {
          return -1;
          /* incomplete set */
        }
        /* generate offsets into symbol table for each length for sorting */


        offs[1] = 0;

        for (len = 1; len < MAXBITS; len++) {
          offs[len + 1] = offs[len] + count[len];
        }
        /* sort symbols by length, by symbol order within each length */


        for (sym = 0; sym < codes; sym++) {
          if (lens[lens_index + sym] !== 0) {
            work[offs[lens[lens_index + sym]]++] = sym;
          }
        }
        /*
         Create and fill in decoding tables.  In this loop, the table being
         filled is at next and has curr index bits.  The code being used is huff
         with length len.  That code is converted to an index by dropping drop
         bits off of the bottom.  For codes where len is less than drop + curr,
         those top drop + curr - len bits are incremented through all values to
         fill the table with replicated entries.
           root is the number of index bits for the root table.  When len exceeds
         root, sub-tables are created pointed to by the root entry with an index
         of the low root bits of huff.  This is saved in low to check for when a
         new sub-table should be started.  drop is zero when the root table is
         being filled, and drop is root when sub-tables are being filled.
           When a new sub-table is needed, it is necessary to look ahead in the
         code lengths to determine what size sub-table is needed.  The length
         counts are used for this, and so count[] is decremented as codes are
         entered in the tables.
           used keeps track of how many table entries have been allocated from the
         provided *table space.  It is checked for LENS and DIST tables against
         the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
         the initial root table size constants.  See the comments in inftrees.h
         for more information.
           sym increments through all symbols, and the loop terminates when
         all codes of length max, i.e. all codes, have been processed.  This
         routine permits incomplete codes, so another loop after this one fills
         in the rest of the decoding tables with invalid code markers.
         */

        /* set up for code type */
        // poor man optimization - use if-else instead of switch,
        // to avoid deopts in old v8


        if (type === CODES) {
          base = extra = work;
          /* dummy value--not used */

          end = 19;
        } else if (type === LENS) {
          base = lbase;
          base_index -= 257;
          extra = lext;
          extra_index -= 257;
          end = 256;
        } else {
          /* DISTS */
          base = dbase;
          extra = dext;
          end = -1;
        }
        /* initialize opts for loop */


        huff = 0;
        /* starting code */

        sym = 0;
        /* starting code symbol */

        len = min;
        /* starting code length */

        next = table_index;
        /* current table to fill in */

        curr = root;
        /* current table index bits */

        drop = 0;
        /* current bits to drop from code for index */

        low = -1;
        /* trigger new sub-table when len > root */

        used = 1 << root;
        /* use root table entries */

        mask = used - 1;
        /* mask for comparing low */

        /* check available table space */

        if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
          return 1;
        }
        /* process all codes and make table entries */


        for (;;) {
          /* create table entry */
          here_bits = len - drop;

          if (work[sym] < end) {
            here_op = 0;
            here_val = work[sym];
          } else if (work[sym] > end) {
            here_op = extra[extra_index + work[sym]];
            here_val = base[base_index + work[sym]];
          } else {
            here_op = 32 + 64;
            /* end of block */

            here_val = 0;
          }
          /* replicate for those indices with low len bits equal to huff */


          incr = 1 << len - drop;
          fill = 1 << curr;
          min = fill;
          /* save offset to next table */

          do {
            fill -= incr;
            table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
          } while (fill !== 0);
          /* backwards increment the len-bit code huff */


          incr = 1 << len - 1;

          while (huff & incr) {
            incr >>= 1;
          }

          if (incr !== 0) {
            huff &= incr - 1;
            huff += incr;
          } else {
            huff = 0;
          }
          /* go to next symbol, update count, len */


          sym++;

          if (--count[len] === 0) {
            if (len === max) {
              break;
            }

            len = lens[lens_index + work[sym]];
          }
          /* create new sub-table if needed */


          if (len > root && (huff & mask) !== low) {
            /* if first time, transition to sub-tables */
            if (drop === 0) {
              drop = root;
            }
            /* increment past last table */


            next += min;
            /* here min is 1 << curr */

            /* determine length of next table */

            curr = len - drop;
            left = 1 << curr;

            while (curr + drop < max) {
              left -= count[curr + drop];

              if (left <= 0) {
                break;
              }

              curr++;
              left <<= 1;
            }
            /* check for enough space */


            used += 1 << curr;

            if (type === LENS && used > ENOUGH_LENS || type === DISTS && used > ENOUGH_DISTS) {
              return 1;
            }
            /* point entry in root table to sub-table */


            low = huff & mask;
            /*table.op[low] = curr;
            table.bits[low] = root;
            table.val[low] = next - opts.table_index;*/

            table[low] = root << 24 | curr << 16 | next - table_index | 0;
          }
        }
        /* fill in remaining table entry if code is incomplete (guaranteed to have
         at most one remaining entry, since if the code is incomplete, the
         maximum code length that was allowed to get this far is one bit) */


        if (huff !== 0) {
          //table.op[next + huff] = 64;            /* invalid code marker */
          //table.bits[next + huff] = len - drop;
          //table.val[next + huff] = 0;
          table[next + huff] = len - drop << 24 | 64 << 16 | 0;
        }
        /* set return parameters */
        //opts.table_index += used;


        opts.bits = root;
        return 0;
      };
      /***/

    },
    /* 38 */

    /***/
    function (module, exports, __webpack_require__) {
      // String encode/decode helpers
      'use strict';

      var utils = __webpack_require__(33); // Quick check if we can use fast array to bin string conversion
      //
      // - apply(Array) can fail on Android 2.2
      // - apply(Uint8Array) can fail on iOS 5.1 Safary
      //


      var STR_APPLY_OK = true;
      var STR_APPLY_UIA_OK = true;

      try {
        String.fromCharCode.apply(null, [0]);
      } catch (__) {
        STR_APPLY_OK = false;
      }

      try {
        String.fromCharCode.apply(null, new Uint8Array(1));
      } catch (__) {
        STR_APPLY_UIA_OK = false;
      } // Table with utf8 lengths (calculated by first byte of sequence)
      // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
      // because max possible codepoint is 0x10ffff


      var _utf8len = new utils.Buf8(256);

      for (var q = 0; q < 256; q++) {
        _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
      }

      _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start
      // convert string to array (typed, when possible)

      exports.string2buf = function (str) {
        var buf,
            c,
            c2,
            m_pos,
            i,
            str_len = str.length,
            buf_len = 0; // count binary size

        for (m_pos = 0; m_pos < str_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
        } // allocate buffer


        buf = new utils.Buf8(buf_len); // convert

        for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
          c = str.charCodeAt(m_pos);

          if ((c & 0xfc00) === 0xd800 && m_pos + 1 < str_len) {
            c2 = str.charCodeAt(m_pos + 1);

            if ((c2 & 0xfc00) === 0xdc00) {
              c = 0x10000 + (c - 0xd800 << 10) + (c2 - 0xdc00);
              m_pos++;
            }
          }

          if (c < 0x80) {
            /* one byte */
            buf[i++] = c;
          } else if (c < 0x800) {
            /* two bytes */
            buf[i++] = 0xC0 | c >>> 6;
            buf[i++] = 0x80 | c & 0x3f;
          } else if (c < 0x10000) {
            /* three bytes */
            buf[i++] = 0xE0 | c >>> 12;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          } else {
            /* four bytes */
            buf[i++] = 0xf0 | c >>> 18;
            buf[i++] = 0x80 | c >>> 12 & 0x3f;
            buf[i++] = 0x80 | c >>> 6 & 0x3f;
            buf[i++] = 0x80 | c & 0x3f;
          }
        }

        return buf;
      }; // Helper (used in 2 places)


      function buf2binstring(buf, len) {
        // use fallback for big arrays to avoid stack overflow
        if (len < 65537) {
          if (buf.subarray && STR_APPLY_UIA_OK || !buf.subarray && STR_APPLY_OK) {
            return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));
          }
        }

        var result = '';

        for (var i = 0; i < len; i++) {
          result += String.fromCharCode(buf[i]);
        }

        return result;
      } // Convert byte array to binary string


      exports.buf2binstring = function (buf) {
        return buf2binstring(buf, buf.length);
      }; // Convert binary string (typed, when possible)


      exports.binstring2buf = function (str) {
        var buf = new utils.Buf8(str.length);

        for (var i = 0, len = buf.length; i < len; i++) {
          buf[i] = str.charCodeAt(i);
        }

        return buf;
      }; // convert array to string


      exports.buf2string = function (buf, max) {
        var i, out, c, c_len;
        var len = max || buf.length; // Reserve max possible length (2 words per char)
        // NB: by unknown reasons, Array is significantly faster for
        //     String.fromCharCode.apply than Uint16Array.

        var utf16buf = new Array(len * 2);

        for (out = 0, i = 0; i < len;) {
          c = buf[i++]; // quick process ascii

          if (c < 0x80) {
            utf16buf[out++] = c;
            continue;
          }

          c_len = _utf8len[c]; // skip 5 & 6 byte codes

          if (c_len > 4) {
            utf16buf[out++] = 0xfffd;
            i += c_len - 1;
            continue;
          } // apply mask on first byte


          c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07; // join the rest

          while (c_len > 1 && i < len) {
            c = c << 6 | buf[i++] & 0x3f;
            c_len--;
          } // terminated by end of string?


          if (c_len > 1) {
            utf16buf[out++] = 0xfffd;
            continue;
          }

          if (c < 0x10000) {
            utf16buf[out++] = c;
          } else {
            c -= 0x10000;
            utf16buf[out++] = 0xd800 | c >> 10 & 0x3ff;
            utf16buf[out++] = 0xdc00 | c & 0x3ff;
          }
        }

        return buf2binstring(utf16buf, out);
      }; // Calculate max possible position in utf8 buffer,
      // that will not break sequence. If that's not possible
      // - (very small limits) return max size as is.
      //
      // buf[] - utf8 bytes array
      // max   - length limit (mandatory);


      exports.utf8border = function (buf, max) {
        var pos;
        max = max || buf.length;

        if (max > buf.length) {
          max = buf.length;
        } // go back from last position, until start of sequence found


        pos = max - 1;

        while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) {
          pos--;
        } // Fuckup - very small and broken sequence,
        // return max, because we should return something anyway.


        if (pos < 0) {
          return max;
        } // If we came to start of buffer - that means vuffer is too small,
        // return max too.


        if (pos === 0) {
          return max;
        }

        return pos + _utf8len[buf[pos]] > max ? pos : max;
      };
      /***/

    },
    /* 39 */

    /***/
    function (module, exports) {
      'use strict';

      module.exports = {
        /* Allowed flush values; see deflate() and inflate() below for details */
        Z_NO_FLUSH: 0,
        Z_PARTIAL_FLUSH: 1,
        Z_SYNC_FLUSH: 2,
        Z_FULL_FLUSH: 3,
        Z_FINISH: 4,
        Z_BLOCK: 5,
        Z_TREES: 6,

        /* Return codes for the compression/decompression functions. Negative values
        * are errors, positive values are used for special but normal events.
        */
        Z_OK: 0,
        Z_STREAM_END: 1,
        Z_NEED_DICT: 2,
        Z_ERRNO: -1,
        Z_STREAM_ERROR: -2,
        Z_DATA_ERROR: -3,
        //Z_MEM_ERROR:     -4,
        Z_BUF_ERROR: -5,
        //Z_VERSION_ERROR: -6,

        /* compression levels */
        Z_NO_COMPRESSION: 0,
        Z_BEST_SPEED: 1,
        Z_BEST_COMPRESSION: 9,
        Z_DEFAULT_COMPRESSION: -1,
        Z_FILTERED: 1,
        Z_HUFFMAN_ONLY: 2,
        Z_RLE: 3,
        Z_FIXED: 4,
        Z_DEFAULT_STRATEGY: 0,

        /* Possible values of the data_type field (though see inflate()) */
        Z_BINARY: 0,
        Z_TEXT: 1,
        //Z_ASCII:                1, // = Z_TEXT (deprecated)
        Z_UNKNOWN: 2,

        /* The deflate compression method */
        Z_DEFLATED: 8 //Z_NULL:                 null // Use -1 or null inline, depending on var type

      };
      /***/
    },
    /* 40 */

    /***/
    function (module, exports) {
      'use strict';

      module.exports = {
        2: 'need dictionary',

        /* Z_NEED_DICT       2  */
        1: 'stream end',

        /* Z_STREAM_END      1  */
        0: '',

        /* Z_OK              0  */
        '-1': 'file error',

        /* Z_ERRNO         (-1) */
        '-2': 'stream error',

        /* Z_STREAM_ERROR  (-2) */
        '-3': 'data error',

        /* Z_DATA_ERROR    (-3) */
        '-4': 'insufficient memory',

        /* Z_MEM_ERROR     (-4) */
        '-5': 'buffer error',

        /* Z_BUF_ERROR     (-5) */
        '-6': 'incompatible version'
        /* Z_VERSION_ERROR (-6) */

      };
      /***/
    },
    /* 41 */

    /***/
    function (module, exports) {
      'use strict';

      function ZStream() {
        /* next input byte */
        this.input = null; // JS specific, because we have no pointers

        this.next_in = 0;
        /* number of bytes available at input */

        this.avail_in = 0;
        /* total number of input bytes read so far */

        this.total_in = 0;
        /* next output byte should be put there */

        this.output = null; // JS specific, because we have no pointers

        this.next_out = 0;
        /* remaining free space at output */

        this.avail_out = 0;
        /* total number of bytes output so far */

        this.total_out = 0;
        /* last error message, NULL if no error */

        this.msg = ''
        /*Z_NULL*/
        ;
        /* not visible by applications */

        this.state = null;
        /* best guess about the data type: binary or text */

        this.data_type = 2
        /*Z_UNKNOWN*/
        ;
        /* adler32 value of the uncompressed data */

        this.adler = 0;
      }

      module.exports = ZStream;
      /***/
    },
    /* 42 */

    /***/
    function (module, exports) {
      'use strict';

      function GZheader() {
        /* true if compressed data believed to be text */
        this.text = 0;
        /* modification time */

        this.time = 0;
        /* extra flags (not used when writing a gzip file) */

        this.xflags = 0;
        /* operating system */

        this.os = 0;
        /* pointer to extra field or Z_NULL if none */

        this.extra = null;
        /* extra field length (valid if extra != Z_NULL) */

        this.extra_len = 0; // Actually, we don't need it in JS,
        // but leave for few code modifications
        //
        // Setup limits is not necessary because in js we should not preallocate memory
        // for inflate use constant limit in 65536 bytes
        //

        /* space at extra (only when reading header) */
        // this.extra_max  = 0;

        /* pointer to zero-terminated file name or Z_NULL */

        this.name = '';
        /* space at name (only when reading header) */
        // this.name_max   = 0;

        /* pointer to zero-terminated comment or Z_NULL */

        this.comment = '';
        /* space at comment (only when reading header) */
        // this.comm_max   = 0;

        /* true if there was or will be a header crc */

        this.hcrc = 0;
        /* true when done reading gzip header (not used when writing a gzip file) */

        this.done = false;
      }

      module.exports = GZheader;
      /***/
    }
    /******/
    ])
  );
});

;
},{"buffer":"node_modules/buffer/index.js","process":"node_modules/process/browser.js"}],"src/js/storage-driver/backend/browserfs/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _fs = _interopRequireDefault(require("../fs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BrowserFSBackend =
/*#__PURE__*/
function (_FSBackend) {
  (0, _inherits2.default)(BrowserFSBackend, _FSBackend);

  function BrowserFSBackend(config) {
    var _this;

    (0, _classCallCheck2.default)(this, BrowserFSBackend);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(BrowserFSBackend).call(this, config));
    _this.wd = _this._setupWd(config);

    if (typeof window === 'undefined') {
      console.warn('Do you want to use browserfs in non browser?');
      return (0, _possibleConstructorReturn2.default)(_this);
    }

    var BrowserFS = require('browserfs');

    BrowserFS.install(window);
    BrowserFS.configure({
      fs: config.backend
    }, function (e) {
      if (e) {
        // An error happened!
        throw e;
      } // Otherwise, BrowserFS is ready-to-use!

    });
    _this.fs = BrowserFS.BFSRequire('fs');
    return _this;
  }

  return BrowserFSBackend;
}(_fs.default);

exports.default = BrowserFSBackend;
;
BrowserFSBackend.info = {
  type: 'browserfs',
  configure: {
    params: [{
      key: 'wd',
      name: 'Working Directory',
      description: 'Working Directory used in BrowserFS',
      type: 'text',
      default: '/',
      required: false
    }, {
      key: 'backend',
      name: 'Backend FS',
      description: '',
      type: 'Selection',
      selection: ['IndexedDB', 'fs', 'LocalStorage'],
      required: true
    }]
  }
};
},{"@babel/runtime/helpers/classCallCheck":"node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/possibleConstructorReturn":"node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","@babel/runtime/helpers/getPrototypeOf":"node_modules/@babel/runtime/helpers/getPrototypeOf.js","@babel/runtime/helpers/inherits":"node_modules/@babel/runtime/helpers/inherits.js","../fs":"src/js/storage-driver/backend/fs/index.js","browserfs":"node_modules/browserfs/dist/browserfs.js"}],"src/js/index.js":[function(require,module,exports) {
"use strict";

var _vue = _interopRequireDefault(require("vue"));

var _bootstrapVue = _interopRequireDefault(require("bootstrap-vue"));

require("bootstrap/dist/css/bootstrap.css");

require("bootstrap-vue/dist/bootstrap-vue.css");

var _App = _interopRequireDefault(require("./App.vue"));

require("./storage-driver/backend/isomorphic-git/sample.js");

var _browserfs = _interopRequireDefault(require("./storage-driver/backend/browserfs"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue.default.use(_bootstrapVue.default);

new _vue.default({
  el: '#app',
  render: function render(h) {
    return h(_App.default);
  }
});
window.BrowserFSBackend = _browserfs.default; // import IsomorphicGitBackend from './storage-driver/backend/isomorphic-git';
// window.IsomorphicGitBackend = IsomorphicGitBackend;
},{"vue":"node_modules/vue/dist/vue.runtime.esm.js","bootstrap-vue":"node_modules/bootstrap-vue/es/index.js","bootstrap/dist/css/bootstrap.css":"node_modules/bootstrap/dist/css/bootstrap.css","bootstrap-vue/dist/bootstrap-vue.css":"node_modules/bootstrap-vue/dist/bootstrap-vue.css","./App.vue":"src/js/App.vue","./storage-driver/backend/isomorphic-git/sample.js":"src/js/storage-driver/backend/isomorphic-git/sample.js","./storage-driver/backend/browserfs":"src/js/storage-driver/backend/browserfs/index.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "59401" + '/');

  ws.onmessage = function (event) {
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      console.clear();
      data.assets.forEach(function (asset) {
        hmrApply(global.parcelRequire, asset);
      });
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          hmrAccept(global.parcelRequire, asset.id);
        }
      });
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAccept(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAccept(bundle.parent, id);
  }

  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAccept(global.parcelRequire, id);
  });
}
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js","src/js/index.js"], null)
//# sourceMappingURL=/js.d818e0ef.map