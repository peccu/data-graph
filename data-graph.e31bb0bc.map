{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","node_modules/regenerator-runtime/runtime-module.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","js/emitter.js","js/credentialManager.js","index.js"],"names":["emitter","emit","event","message","document","getElementById","textContent","get","JSON","parse","window","localStorage","getItem","set","cred","setItem","stringify","credentialManager","fill","url","length","console","log","username","prompt","password","approved","auth","_cred","find","x","push","rejected","alert","filter","worker","Worker","portal","MagicPortal","addEventListener","data","void","pfs","fs","git","value","clone","dir","corsProxy","singleBranch","depth","listBranches","remote","branches"],"mappingsjtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpCA;AACO,IAAMA,OAAO,GAAG;AACfC,EAAAA,IADe;AAAA;AAAA;AAAA,+CACVC,KADU,EACHC,OADG;AAAA;AAAA;AAAA;AAAA;AAEnB,kBAAID,KAAK,KAAK,SAAd,EAAyB;AACvBE,gBAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,WAA/B,IAA8CH,OAAO,GAAG,IAAxD;AACD;;AAJkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAAhB;;;;;;;;;;;;;;;;ACDP,IAAMI,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB,SAAOC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,YAA5B,CAAX,CAAP;AACD,CAFD;;AAGA,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,IAAD,EAAU;AACpB,SAAOJ,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4B,YAA5B,EAA0CP,IAAI,CAACQ,SAAL,CAAeF,IAAf,CAA1C,CAAP;AACD,CAFD,EAIA;AACA;;;AACO,IAAMG,iBAAiB,GAAG;AACzBC,EAAAA,IADyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,cAAAA,GADmB,QACnBA,GADmB;AAEzBL,cAAAA,IAFyB,GAElBP,GAAG,EAFe;;AAAA,oBAG1BO,IAAI,IAAIK,GAAG,IAAIL,IAAf,IAAuBA,IAAI,CAACK,GAAD,CAAJ,CAAUC,MAAV,KAAqB,CAHlB;AAAA;AAAA;AAAA;;AAAA,+CAIpBN,IAAI,CAACK,GAAD,CAAJ,CAAU,CAAV,CAJoB;;AAAA;AAAA,oBAM1BL,IAAI,IAAIK,GAAG,IAAIL,IAAf,IAAuBA,IAAI,CAACK,GAAD,CAAJ,CAAUC,MAAV,GAAmB,CANhB;AAAA;AAAA;AAAA;;AAO3BC,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAP2B,+CAQpBR,IAAI,CAACK,GAAD,CAAJ,CAAU,CAAV,CARoB;;AAAA;AAUzBI,cAAAA,QAVyB,GAUdb,MAAM,CAACc,MAAP,CAAc,WAAd,CAVc;AAWzBC,cAAAA,QAXyB,GAWdf,MAAM,CAACc,MAAP,CAAc,WAAd,CAXc;AAAA,+CAYtB;AAAED,gBAAAA,QAAQ,EAARA,QAAF;AAAYE,gBAAAA,QAAQ,EAARA;AAAZ,eAZsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAczBC,EAAAA,QAdyB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcfP,cAAAA,GAde,SAcfA,GAde,EAcVQ,IAdU,SAcVA,IAdU;AAe7BN,cAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB,CAACH,GAAD,EAAMQ,IAAN,CAAxB;AACIb,cAAAA,IAhByB,GAgBlBP,GAAG,EAhBe;;AAAA,kBAiBzBO,IAjByB;AAAA;AAAA;AAAA;;AAkB3BO,cAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0D,CAACH,GAAD,EAAMQ,IAAN,CAA1D;AACAb,cAAAA,IAAI,GAAG,EAAP;AACAA,cAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,CAACQ,IAAD,CAAZ;AACAd,cAAAA,GAAG,CAACC,IAAD,CAAH;AArB2B;;AAAA;AAAA,oBAwB1BA,IAAI,IAAI,CAACK,GAAD,IAAQL,IAxBU;AAAA;AAAA;AAAA;;AAyB3BO,cAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ,EAAwD,CAACH,GAAD,EAAMQ,IAAN,CAAxD;AACAb,cAAAA,IAAI,CAACK,GAAD,CAAJ,GAAY,CAACQ,IAAD,CAAZ;AACAd,cAAAA,GAAG,CAACC,IAAD,CAAH;AA3B2B;;AAAA;AA8BzBc,cAAAA,KA9ByB,GA8BjBd,IAAI,CAACK,GAAD,CAAJ,CAAUU,IAAV,CAAe,UAAAC,CAAC;AAAA,uBAAItB,IAAI,CAACQ,SAAL,CAAec,CAAf,MAAsBtB,IAAI,CAACQ,SAAL,CAAeW,IAAf,CAA1B;AAAA,eAAhB,CA9BiB;;AAAA,mBA+B1BC,KA/B0B;AAAA;AAAA;AAAA;;AAgC3BP,cAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAhC2B;;AAAA;AAmC7BD,cAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuD,CAACH,GAAD,EAAMQ,IAAN,CAAvD;AACAb,cAAAA,IAAI,CAACK,GAAD,CAAJ,CAAUY,IAAV,CAAeJ,IAAf;AACAd,cAAAA,GAAG,CAACC,IAAD,CAAH;;AArC6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAwCzBkB,EAAAA,QAxCyB;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAwCfb,cAAAA,GAxCe,SAwCfA,GAxCe,EAwCVQ,IAxCU,SAwCVA,IAxCU;AAyC7BjB,cAAAA,MAAM,CAACuB,KAAP,CAAa,yBAAb;AACInB,cAAAA,IA1CyB,GA0ClBP,GAAG,EA1Ce;;AAAA,oBA2C1B,CAACO,IAAD,IAAS,CAACK,GAAD,IAAQL,IA3CS;AAAA;AAAA;AAAA;;AA4C3BO,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AA5C2B;;AAAA;AA+CzBM,cAAAA,KA/CyB,GA+CjBd,IAAI,CAACK,GAAD,CAAJ,CAAUe,MAAV,CAAiB,UAAAJ,CAAC;AAAA,uBAAItB,IAAI,CAACQ,SAAL,CAAec,CAAf,MAAsBtB,IAAI,CAACQ,SAAL,CAAeW,IAAf,CAA1B;AAAA,eAAlB,CA/CiB;;AAAA,oBAgD1Bb,IAAI,CAACK,GAAD,CAAJ,CAAUC,MAAV,KAAqBQ,KAAK,CAACR,MAhDD;AAAA;AAAA;AAAA;;AAiD3BC,cAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AAjD2B;;AAAA;AAoD7B,kBAAIM,KAAK,CAACR,MAAN,KAAiB,CAArB,EAAwB;AACtBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CH,GAA7C;AACA,uBAAOL,IAAI,CAACK,GAAD,CAAX;AACAN,gBAAAA,GAAG,CAACC,IAAD,CAAH;AACD,eAJD,MAIO;AACLO,gBAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwC,CAACH,GAAD,EAAMQ,IAAN,CAAxC;AACAb,gBAAAA,IAAI,CAACK,GAAD,CAAJ,GAAYS,KAAZ;AACAf,gBAAAA,GAAG,CAACC,IAAD,CAAH;AACD;;AA5D4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAA1B;;;;;;;;;ACLP;;AAGA;;;;AAPA,IAAIqB,MAAM,GAAG,IAAIC,MAAJ,CAAW,sCAAX,CAAb;AACA,IAAMC,MAAM,GAAG,IAAIC,WAAJ,CAAgBH,MAAhB,CAAf;AACAA,MAAM,CAACI,gBAAP,CAAwB,SAAxB,EAAmC;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,SAAcnB,OAAO,CAACC,GAAR,CAAYkB,IAAZ,CAAd;AAAA,CAAnC;AAGAH,MAAM,CAACxB,GAAP,CAAW,SAAX,EAAsBb,gBAAtB,EAA+B;AAAEyC,EAAAA,IAAI,EAAE,CAAC,MAAD;AAAR,CAA/B;AAGAJ,MAAM,CAACxB,GAAP,CAAW,mBAAX,EAAgCI,oCAAhC,EAAmD;AACjDwB,EAAAA,IAAI,EAAE,CAAC,UAAD,EAAa,UAAb;AAD2C,CAAnD;AAIA;AAAA;AAAA,0BAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACmBJ,MAAM,CAAC9B,GAAP,CAAW,KAAX,CADnB;;AAAA;AACOmC,UAAAA,GADP;AAEChC,UAAAA,MAAM,CAACgC,GAAP,GAAaA,GAAb;AAFD;AAAA,iBAGkBL,MAAM,CAAC9B,GAAP,CAAW,IAAX,CAHlB;;AAAA;AAGOoC,UAAAA,EAHP;AAICjC,UAAAA,MAAM,CAACiC,EAAP,GAAYA,EAAZ;AAJD;AAAA,iBAMmBN,MAAM,CAAC9B,GAAP,CAAW,KAAX,CANnB;;AAAA;AAMOqC,UAAAA,GANP;AAOCxC,UAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,WAA/B,IAA8C,SAA9C;AACAF,UAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCwC,KAAtC,GAA8C,kDAA9C;AACAzC,UAAAA,QAAQ,CACLC,cADH,CACkB,aADlB,EAEGkC,gBAFH,CAEoB,OAFpB;AAAA;AAAA;AAAA;AAAA,oCAE6B;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBnC,oBAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,WAA/B,GAA6C,EAA7C;AADyB;AAAA,2BAEnBsC,GAAG,CAACE,KAAJ,CAAU;AACdC,sBAAAA,GAAG,EAAE,GADS;AAEdC,sBAAAA,SAAS,EAAE,iCAFG;AAGd;AACA7B,sBAAAA,GAAG,EAAEf,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCwC,KAJ7B;AAKdI,sBAAAA,YAAY,EAAE,IALA;AAMdC,sBAAAA,KAAK,EAAE;AANO,qBAAV,CAFmB;;AAAA;AAAA;AAAA,2BAUJN,GAAG,CAACO,YAAJ,CAAiB;AAAEJ,sBAAAA,GAAG,EAAE,GAAP;AAAYK,sBAAAA,MAAM,EAAE;AAApB,qBAAjB,CAVI;;AAAA;AAUrBC,oBAAAA,QAVqB;AAWzBhC,oBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwB+B,QAAxB;AACAjD,oBAAAA,QAAQ,CAACC,cAAT,CAAwB,KAAxB,EAA+BC,WAA/B,IACE,cAAc+C,QAAd,GAAyB,IAD3B;;AAZyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAF7B;AAkBA3C,UAAAA,MAAM,CAACkC,GAAP,GAAaA,GAAb;AACAlC,UAAAA,MAAM,CAACyB,MAAP,GAAgBA,MAAhB;AACAd,UAAAA,OAAO,CAACC,GAAR,CAAYsB,GAAZ;;AA7BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","file":"data-graph.e31bb0bc.map","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = require(\"./runtime\");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","// 'emitter' plugin\nexport const emitter = {\n  async emit(event, message) {\n    if (event === 'message') {\n      document.getElementById('log').textContent += message + '\\n';\n    }\n  }\n};\n","const get = () => {\n  return JSON.parse(window.localStorage.getItem('credential'));\n};\nconst set = (cred) => {\n  return window.localStorage.setItem('credential', JSON.stringify(cred));\n};\n\n// 'credentialManager' plugin\n// cf. https://github.com/isomorphic-git/credential-manager-node-cli/blob/master/index.js\nexport const credentialManager = {\n  async fill({url}){\n    let cred = get();\n    if(cred && url in cred && cred[url].length === 1){\n      return cred[url][0];\n    }\n    if(cred && url in cred && cred[url].length > 0){\n      console.log('returning first credential');\n      return cred[url][0];\n    }\n    let username = window.prompt('Username:');\n    let password = window.prompt('Password:');\n    return { username, password };\n  },\n  async approved({url, auth}){\n    console.log('approved', [url, auth]);\n    let cred = get();\n    if(!cred){\n      console.log('save approved credential about (first url)', [url, auth]);\n      cred = {};\n      cred[url] = [auth];\n      set(cred);\n      return;\n    }\n    if(cred && !url in cred ){\n      console.log('save approved credential about (new url)', [url, auth]);\n      cred[url] = [auth];\n      set(cred);\n      return;\n    }\n    let _cred = cred[url].find(x => JSON.stringify(x) === JSON.stringify(auth));\n    if(_cred){\n      console.log('already stored credential');\n      return;\n    }\n    console.log('save approved credential about (append)', [url, auth]);\n    cred[url].push(auth);\n    set(cred);\n  },\n\n  async rejected({url, auth}){\n    window.alert('Authentication rejected');\n    let cred = get();\n    if(!cred || !url in cred){\n      console.log('no stored credentials');\n      return;\n    }\n    let _cred = cred[url].filter(x => JSON.stringify(x) !== JSON.stringify(auth));\n    if(cred[url].length === _cred.length){\n      console.log('no stored failed credentials');\n      return;\n    }\n    if (_cred.length === 0) {\n      console.log('failed last credentials about', url);\n      delete(cred[url]);\n      set(cred);\n    } else {\n      console.log('failed credentials about', [url, auth]);\n      cred[url] = _cred;\n      set(cred);\n    }\n  }\n};\n","let worker = new Worker('./js/worker.js');\nconst portal = new MagicPortal(worker);\nworker.addEventListener('message', ({ data }) => console.log(data));\n\nimport {emitter} from './js/emitter.js';\nportal.set('emitter', emitter, { void: ['emit'] });\n\nimport {credentialManager} from './js/credentialManager.js';\nportal.set('credentialManager', credentialManager, {\n  void: ['approved', 'rejected']\n});\n\n(async () => {\n  const pfs = await portal.get('pfs');\n  window.pfs = pfs;\n  const fs = await portal.get('fs');\n  window.fs = fs;\n\n  const git = await portal.get('git');\n  document.getElementById('log').textContent += 'ready\\n';\n  document.getElementById('repository').value = 'https://github.com/isomorphic-git/isomorphic-git';\n  document\n    .getElementById('cloneButton')\n    .addEventListener('click', async () => {\n      document.getElementById('log').textContent = '';\n      await git.clone({\n        dir: '.',\n        corsProxy: 'https://cors.isomorphic-git.org',\n        // corsProxy: 'http://localhost:9999',\n        url: document.getElementById('repository').value,\n        singleBranch: true,\n        depth: 100\n      });\n      let branches = await git.listBranches({ dir: '.', remote: 'origin' });\n      console.log('branches', branches);\n      document.getElementById('log').textContent +=\n        'branches ' + branches + '\\n';\n    });\n\n  window.git = git;\n  window.worker = worker;\n  console.log(git);\n})();\n"]}